/// <reference types="ws" />
import { Bot } from "../bot.js";
import { DiscordInteraction, DiscordInteractionDataOption, DiscordInteractionDataResolved } from "../types/discord.js";
import { ChannelTypes } from "../types/shared.js";
import { Collection } from "../util/collection.js";
import { Attachment } from "./attachment.js";
import { Member, User } from "./member.js";
import { Message } from "./message.js";
import { Role } from "./role.js";
export declare function transformInteraction(bot: Bot, payload: DiscordInteraction): {
    data?: {
        values?: string[] | undefined;
        id?: bigint | undefined;
        options?: {
            value?: string | number | boolean | {
                pending?: boolean | undefined;
                mute?: boolean | undefined;
                user?: {
                    avatar?: string | null | undefined;
                    locale?: string | undefined;
                    flags?: import("../types/shared.js").UserFlags | undefined;
                    premium_type?: import("../types/shared.js").PremiumTypes | undefined;
                    public_flags?: import("../types/shared.js").UserFlags | undefined;
                    accent_color?: number | undefined;
                    bot?: boolean | undefined;
                    system?: boolean | undefined;
                    mfa_enabled?: boolean | undefined;
                    verified?: boolean | undefined;
                    email?: string | null | undefined;
                    banner?: string | undefined;
                    id: string;
                    discriminator: string;
                    username: string;
                } | undefined;
                avatar?: string | undefined;
                deaf?: boolean | undefined;
                permissions?: string | undefined;
                nick?: string | null | undefined;
                premium_since?: string | null | undefined;
                communication_disabled_until?: string | null | undefined;
                roles: string[];
                joined_at: string;
            } | {
                name?: string | undefined;
                position?: number | undefined;
                flags?: import("../types/shared.js").ChannelFlags | undefined;
                guild_id?: string | undefined;
                member?: {
                    id: string;
                    flags: number;
                    user_id: string;
                    join_timestamp: string;
                } | undefined;
                topic?: string | null | undefined;
                bitrate?: number | undefined;
                user_limit?: number | undefined;
                rate_limit_per_user?: number | undefined;
                rtc_region?: string | null | undefined;
                video_quality_mode?: import("../types/shared.js").VideoQualityModes | undefined;
                message_count?: number | undefined;
                member_count?: number | undefined;
                default_auto_archive_duration?: number | undefined;
                permission_overwrites?: {
                    allow?: string | undefined;
                    deny?: string | undefined;
                    type: import("../types/shared.js").OverwriteTypes;
                    id: string;
                }[] | undefined;
                nsfw?: boolean | undefined;
                last_message_id?: string | null | undefined;
                owner_id?: string | undefined;
                application_id?: string | undefined;
                parent_id?: string | null | undefined;
                last_pin_timestamp?: string | null | undefined;
                thread_metadata?: {
                    invitable?: boolean | undefined;
                    create_timestamp?: string | null | undefined;
                    auto_archive_duration: 60 | 1440 | 4320 | 10080;
                    archived: boolean;
                    locked: boolean;
                    archive_timestamp: string;
                } | undefined;
                permissions?: string | undefined;
                newly_created?: boolean | undefined;
                type: ChannelTypes;
                id: string;
            } | {
                icon?: string | undefined;
                tags?: {
                    bot_id?: string | undefined;
                    integration_id?: string | undefined;
                    premium_subscriber?: null | undefined;
                } | undefined;
                unicode_emoji?: string | undefined;
                id: string;
                name: string;
                color: number;
                position: number;
                permissions: string;
                hoist: boolean;
                mentionable: boolean;
                managed: boolean;
            } | undefined;
            options?: {
                value?: string | number | boolean | {
                    pending?: boolean | undefined;
                    mute?: boolean | undefined;
                    user?: {
                        avatar?: string | null | undefined;
                        locale?: string | undefined;
                        flags?: import("../types/shared.js").UserFlags | undefined;
                        premium_type?: import("../types/shared.js").PremiumTypes | undefined;
                        public_flags?: import("../types/shared.js").UserFlags | undefined;
                        accent_color?: number | undefined;
                        bot?: boolean | undefined;
                        system?: boolean | undefined;
                        mfa_enabled?: boolean | undefined;
                        verified?: boolean | undefined;
                        email?: string | null | undefined;
                        banner?: string | undefined;
                        id: string;
                        discriminator: string;
                        username: string;
                    } | undefined;
                    avatar?: string | undefined;
                    deaf?: boolean | undefined;
                    permissions?: string | undefined;
                    nick?: string | null | undefined;
                    premium_since?: string | null | undefined;
                    communication_disabled_until?: string | null | undefined;
                    roles: string[];
                    joined_at: string;
                } | {
                    name?: string | undefined;
                    position?: number | undefined;
                    flags?: import("../types/shared.js").ChannelFlags | undefined;
                    guild_id?: string | undefined;
                    member?: {
                        id: string;
                        flags: number;
                        user_id: string;
                        join_timestamp: string;
                    } | undefined;
                    topic?: string | null | undefined;
                    bitrate?: number | undefined;
                    user_limit?: number | undefined;
                    rate_limit_per_user?: number | undefined;
                    rtc_region?: string | null | undefined;
                    video_quality_mode?: import("../types/shared.js").VideoQualityModes | undefined;
                    message_count?: number | undefined;
                    member_count?: number | undefined;
                    default_auto_archive_duration?: number | undefined;
                    permission_overwrites?: {
                        allow?: string | undefined;
                        deny?: string | undefined;
                        type: import("../types/shared.js").OverwriteTypes;
                        id: string;
                    }[] | undefined;
                    nsfw?: boolean | undefined;
                    last_message_id?: string | null | undefined;
                    owner_id?: string | undefined;
                    application_id?: string | undefined;
                    parent_id?: string | null | undefined;
                    last_pin_timestamp?: string | null | undefined;
                    thread_metadata?: {
                        invitable?: boolean | undefined;
                        create_timestamp?: string | null | undefined;
                        auto_archive_duration: 60 | 1440 | 4320 | 10080;
                        archived: boolean;
                        locked: boolean;
                        archive_timestamp: string;
                    } | undefined;
                    permissions?: string | undefined;
                    newly_created?: boolean | undefined;
                    type: ChannelTypes;
                    id: string;
                } | {
                    icon?: string | undefined;
                    tags?: {
                        bot_id?: string | undefined;
                        integration_id?: string | undefined;
                        premium_subscriber?: null | undefined;
                    } | undefined;
                    unicode_emoji?: string | undefined;
                    id: string;
                    name: string;
                    color: number;
                    position: number;
                    permissions: string;
                    hoist: boolean;
                    mentionable: boolean;
                    managed: boolean;
                } | undefined;
                options?: any[] | undefined;
                focused?: boolean | undefined;
                type: import("../types/shared.js").ApplicationCommandOptionTypes;
                name: string;
            }[] | undefined;
            focused?: boolean | undefined;
            type: import("../types/shared.js").ApplicationCommandOptionTypes;
            name: string;
        }[] | undefined;
        guildId?: bigint | undefined;
        targetId?: bigint | undefined;
        components?: {
            url?: string | undefined;
            value?: string | undefined;
            label?: string | undefined;
            style?: import("../types/shared.js").ButtonStyles | import("../types/shared.js").TextStyles | undefined;
            disabled?: boolean | undefined;
            options?: {
                description?: string | undefined;
                default?: boolean | undefined;
                emoji?: {
                    id?: bigint | undefined;
                    name?: string | undefined;
                    animated?: boolean | undefined;
                } | undefined;
                value: string;
                label: string;
            }[] | undefined;
            emoji?: {
                id?: bigint | undefined;
                name?: string | undefined;
                animated?: boolean | undefined;
            } | undefined;
            components?: any[] | undefined;
            customId?: string | undefined;
            placeholder?: string | undefined;
            minValues?: number | undefined;
            maxValues?: number | undefined;
            type: import("../types/shared.js").MessageComponentTypes;
        }[] | undefined;
        resolved?: {
            roles?: {
                maxSize?: number | undefined;
                sweeper?: {
                    bot?: {
                        handleDiscordPayload?: {} | undefined;
                        botGatewayData?: {
                            url: string;
                            shards: number;
                            sessionStartLimit: {
                                total: number;
                                remaining: number;
                                resetAfter: number;
                                maxConcurrency: number;
                            };
                        } | undefined;
                        id: bigint;
                        constants: {
                            DISCORDENO_VERSION: string;
                            USER_AGENT: string;
                            BASE_URL: string;
                            CDN_URL: string;
                            routes: {
                                GATEWAY_BOT: () => string;
                                AUTOMOD_RULES: (guildId: bigint) => string;
                                AUTOMOD_RULE: (guildId: bigint, ruleId: bigint) => string;
                                CHANNEL: (channelId: bigint) => string;
                                CHANNEL_MESSAGE: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_MESSAGES: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => string;
                                CHANNEL_PIN: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_PINS: (channelId: bigint) => string;
                                CHANNEL_BULK_DELETE: (channelId: bigint) => string;
                                CHANNEL_INVITES: (channelId: bigint) => string;
                                CHANNEL_WEBHOOKS: (channelId: bigint) => string;
                                CHANNEL_MESSAGE_REACTION_ME: (channelId: bigint, messageId: bigint, emoji: string) => string;
                                CHANNEL_MESSAGE_REACTION_USER: (channelId: bigint, messageId: bigint, emoji: string, userId: bigint) => string;
                                CHANNEL_MESSAGE_REACTIONS: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_MESSAGE_REACTION: (channelId: bigint, messageId: bigint, emoji: string, options?: import("../mod.js").GetReactions | undefined) => string;
                                CHANNEL_FOLLOW: (channelId: bigint) => string;
                                CHANNEL_MESSAGE_CROSSPOST: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_OVERWRITE: (channelId: bigint, overwriteId: bigint) => string;
                                CHANNEL_TYPING: (channelId: bigint) => string;
                                THREAD_START_PUBLIC: (channelId: bigint, messageId: bigint) => string;
                                THREAD_START_PRIVATE: (channelId: bigint) => string;
                                THREAD_ACTIVE: (guildId: bigint) => string;
                                THREAD_MEMBERS: (channelId: bigint) => string;
                                THREAD_ME: (channelId: bigint) => string;
                                THREAD_USER: (channelId: bigint, userId: bigint) => string;
                                THREAD_ARCHIVED: (channelId: bigint) => string;
                                THREAD_ARCHIVED_PUBLIC: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                                THREAD_ARCHIVED_PRIVATE: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                                THREAD_ARCHIVED_PRIVATE_JOINED: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                                FORUM_START: (channelId: bigint) => string;
                                GUILD: (guildId: bigint, withCounts?: boolean | undefined) => string;
                                GUILDS: () => string;
                                GUILD_AUDIT_LOGS: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => string;
                                GUILD_BAN: (guildId: bigint, userId: bigint) => string;
                                GUILD_BANS: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => string;
                                GUILD_BANNER: (guildId: bigint, icon: string) => string;
                                GUILD_CHANNELS: (guildId: bigint) => string;
                                GUILD_WIDGET: (guildId: bigint) => string;
                                GUILD_WIDGET_JSON: (guildId: bigint) => string;
                                GUILD_WIDGET_IMAGE: (guildId: bigint, style?: "shield" | "banner1" | "banner2" | "banner3" | "banner4" | undefined) => string;
                                GUILD_EMOJI: (guildId: bigint, emojiId: bigint) => string;
                                GUILD_EMOJIS: (guildId: bigint) => string;
                                GUILD_ICON: (guildId: bigint, icon: string) => string;
                                GUILD_INTEGRATION: (guildId: bigint, integrationId: bigint) => string;
                                GUILD_INTEGRATION_SYNC: (guildId: bigint, integrationId: bigint) => string;
                                GUILD_INTEGRATIONS: (guildId: bigint) => string;
                                GUILD_INVITES: (guildId: bigint) => string;
                                GUILD_LEAVE: (guildId: bigint) => string;
                                GUILD_MEMBER: (guildId: bigint, userId: bigint) => string;
                                GUILD_MEMBERS: (guildId: bigint, options?: import("../mod.js").ListGuildMembers | undefined) => string;
                                GUILD_MEMBER_ROLE: (guildId: bigint, memberId: bigint, roleId: bigint) => string;
                                GUILD_MEMBERS_SEARCH: (guildId: bigint, query: string, options?: {
                                    limit?: number | undefined;
                                } | undefined) => string;
                                GUILD_PRUNE: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => string;
                                GUILD_REGIONS: (guildId: bigint) => string;
                                GUILD_ROLE: (guildId: bigint, roleId: bigint) => string;
                                GUILD_ROLES: (guildId: bigint) => string;
                                GUILD_SPLASH: (guildId: bigint, icon: string) => string;
                                GUILD_VANITY_URL: (guildId: bigint) => string;
                                GUILD_WEBHOOKS: (guildId: bigint) => string;
                                TEMPLATE: (code: string) => string;
                                GUILD_TEMPLATE: (guildId: bigint, code: string) => string;
                                GUILD_TEMPLATES: (guildId: bigint) => string;
                                GUILD_PREVIEW: (guildId: bigint) => string;
                                UPDATE_VOICE_STATE: (guildId: bigint, userId?: bigint | undefined) => string;
                                GUILD_WELCOME_SCREEN: (guildId: bigint) => string;
                                GUILD_SCHEDULED_EVENTS: (guildId: bigint, withUserCount?: boolean | undefined) => string;
                                GUILD_SCHEDULED_EVENT: (guildId: bigint, eventId: bigint, withUserCount?: boolean | undefined) => string;
                                GUILD_SCHEDULED_EVENT_USERS: (guildId: bigint, eventId: bigint, options?: import("../mod.js").GetScheduledEventUsers | undefined) => string;
                                VOICE_REGIONS: () => string;
                                INVITE: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => string;
                                WEBHOOK: (webhookId: bigint, token: string, options?: {
                                    wait?: boolean | undefined;
                                    threadId?: bigint | undefined;
                                } | undefined) => string;
                                WEBHOOK_ID: (webhookId: bigint) => string;
                                WEBHOOK_MESSAGE: (webhookId: bigint, token: string, messageId: bigint, options?: {
                                    threadId?: bigint | undefined;
                                } | undefined) => string;
                                WEBHOOK_MESSAGE_ORIGINAL: (webhookId: bigint, token: string, options?: {
                                    threadId?: bigint | undefined;
                                } | undefined) => string;
                                WEBHOOK_SLACK: (webhookId: bigint, token: string) => string;
                                WEBHOOK_GITHUB: (webhookId: bigint, token: string) => string;
                                COMMANDS: (applicationId: bigint) => string;
                                COMMANDS_GUILD: (applicationId: bigint, guildId: bigint) => string;
                                COMMANDS_PERMISSIONS: (applicationId: bigint, guildId: bigint) => string;
                                COMMANDS_PERMISSION: (applicationId: bigint, guildId: bigint, commandId: bigint) => string;
                                COMMANDS_ID: (applicationId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                                COMMANDS_GUILD_ID: (applicationId: bigint, guildId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                                INTERACTION_ID_TOKEN: (interactionId: bigint, token: string) => string;
                                INTERACTION_ORIGINAL_ID_TOKEN: (interactionId: bigint, token: string) => string;
                                INTERACTION_ID_TOKEN_MESSAGE_ID: (applicationId: bigint, token: string, messageId: bigint) => string;
                                USER: (userId: bigint) => string;
                                USER_BOT: () => string;
                                USER_GUILDS: () => string;
                                USER_AVATAR: (userId: bigint, icon: string) => string;
                                USER_DEFAULT_AVATAR: (icon: number) => string;
                                USER_DM: () => string;
                                USER_CONNECTIONS: () => string;
                                USER_NICK: (guildId: bigint) => string;
                                DISCOVERY_CATEGORIES: () => string;
                                DISCOVERY_VALID_TERM: (term: string) => string;
                                DISCOVERY_METADATA: (guildId: bigint) => string;
                                DISCOVERY_SUBCATEGORY: (guildId: bigint, categoryId: number) => string;
                                OAUTH2_APPLICATION: () => string;
                                STAGE_INSTANCES: () => string;
                                STAGE_INSTANCE: (channelId: bigint) => string;
                                NITRO_STICKER_PACKS: () => string;
                            };
                            regexes: {
                                SLASH_COMMANDS_NAME_REGEX: RegExp;
                                CONTEXT_MENU_COMMANDS_NAME_REGEX: RegExp;
                                CHANNEL_MENTION_REGEX: RegExp;
                                DISCORD_SNOWFLAKE_REGEX: RegExp;
                            };
                            Errors: {
                                REQUEST_UNKNOWN_ERROR: import("../types/shared.js").Errors.REQUEST_UNKNOWN_ERROR;
                                GUILD_NOT_FOUND: import("../types/shared.js").Errors.GUILD_NOT_FOUND;
                                RULES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.RULES_CHANNEL_CANNOT_BE_DELETED;
                                UPDATES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.UPDATES_CHANNEL_CANNOT_BE_DELETED;
                                NICKNAMES_MAX_LENGTH: import("../types/shared.js").Errors.NICKNAMES_MAX_LENGTH;
                                MEMBER_NOT_IN_VOICE_CHANNEL: import("../types/shared.js").Errors.MEMBER_NOT_IN_VOICE_CHANNEL;
                                MESSAGE_MAX_LENGTH: import("../types/shared.js").Errors.MESSAGE_MAX_LENGTH;
                                BOTS_HIGHEST_ROLE_TOO_LOW: import("../types/shared.js").Errors.BOTS_HIGHEST_ROLE_TOO_LOW;
                                CHANNEL_NOT_FOUND: import("../types/shared.js").Errors.CHANNEL_NOT_FOUND;
                                CHANNEL_NOT_IN_GUILD: import("../types/shared.js").Errors.CHANNEL_NOT_IN_GUILD;
                                CHANNEL_NOT_TEXT_BASED: import("../types/shared.js").Errors.CHANNEL_NOT_TEXT_BASED;
                                CHANNEL_NOT_STAGE_VOICE: import("../types/shared.js").Errors.CHANNEL_NOT_STAGE_VOICE;
                                INVALID_TOPIC_LENGTH: import("../types/shared.js").Errors.INVALID_TOPIC_LENGTH;
                                GUILD_NOT_DISCOVERABLE: import("../types/shared.js").Errors.GUILD_NOT_DISCOVERABLE;
                                GUILD_WIDGET_NOT_ENABLED: import("../types/shared.js").Errors.GUILD_WIDGET_NOT_ENABLED;
                                MEMBER_NOT_FOUND: import("../types/shared.js").Errors.MEMBER_NOT_FOUND;
                                MEMBER_SEARCH_LIMIT_TOO_HIGH: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_HIGH;
                                MEMBER_SEARCH_LIMIT_TOO_LOW: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_LOW;
                                PRUNE_MAX_DAYS: import("../types/shared.js").Errors.PRUNE_MAX_DAYS;
                                ROLE_NOT_FOUND: import("../types/shared.js").Errors.ROLE_NOT_FOUND;
                                INVALID_THREAD_PARENT_CHANNEL_TYPE: import("../types/shared.js").Errors.INVALID_THREAD_PARENT_CHANNEL_TYPE;
                                GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS: import("../types/shared.js").Errors.GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS;
                                NOT_A_THREAD_CHANNEL: import("../types/shared.js").Errors.NOT_A_THREAD_CHANNEL;
                                MISSING_MANAGE_THREADS_AND_NOT_MEMBER: import("../types/shared.js").Errors.MISSING_MANAGE_THREADS_AND_NOT_MEMBER;
                                CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD: import("../types/shared.js").Errors.CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD;
                                HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS: import("../types/shared.js").Errors.HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS;
                                INVALID_GET_MESSAGES_LIMIT: import("../types/shared.js").Errors.INVALID_GET_MESSAGES_LIMIT;
                                DELETE_MESSAGES_MIN: import("../types/shared.js").Errors.DELETE_MESSAGES_MIN;
                                PRUNE_MIN_DAYS: import("../types/shared.js").Errors.PRUNE_MIN_DAYS;
                                INVALID_SLASH_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_DESCRIPTION;
                                INVALID_SLASH_NAME: import("../types/shared.js").Errors.INVALID_SLASH_NAME;
                                INVALID_SLASH_OPTIONS: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS;
                                INVALID_SLASH_OPTIONS_CHOICES: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICES;
                                TOO_MANY_SLASH_OPTIONS: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTIONS;
                                INVALID_SLASH_OPTION_CHOICE_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_CHOICE_NAME;
                                INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE;
                                TOO_MANY_SLASH_OPTION_CHOICES: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTION_CHOICES;
                                ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES: import("../types/shared.js").Errors.ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES;
                                INVALID_SLASH_OPTION_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_NAME;
                                INVALID_SLASH_OPTION_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_DESCRIPTION;
                                INVALID_CONTEXT_MENU_COMMAND_NAME: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_NAME;
                                INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION;
                                INVALID_WEBHOOK_NAME: import("../types/shared.js").Errors.INVALID_WEBHOOK_NAME;
                                INVALID_WEBHOOK_OPTIONS: import("../types/shared.js").Errors.INVALID_WEBHOOK_OPTIONS;
                                MISSING_ADD_REACTIONS: import("../types/shared.js").Errors.MISSING_ADD_REACTIONS;
                                MISSING_ADMINISTRATOR: import("../types/shared.js").Errors.MISSING_ADMINISTRATOR;
                                MISSING_ATTACH_FILES: import("../types/shared.js").Errors.MISSING_ATTACH_FILES;
                                MISSING_BAN_MEMBERS: import("../types/shared.js").Errors.MISSING_BAN_MEMBERS;
                                MISSING_CHANGE_NICKNAME: import("../types/shared.js").Errors.MISSING_CHANGE_NICKNAME;
                                MISSING_CONNECT: import("../types/shared.js").Errors.MISSING_CONNECT;
                                MISSING_CREATE_INSTANT_INVITE: import("../types/shared.js").Errors.MISSING_CREATE_INSTANT_INVITE;
                                MISSING_DEAFEN_MEMBERS: import("../types/shared.js").Errors.MISSING_DEAFEN_MEMBERS;
                                MISSING_EMBED_LINKS: import("../types/shared.js").Errors.MISSING_EMBED_LINKS;
                                MISSING_INTENT_GUILD_MEMBERS: import("../types/shared.js").Errors.MISSING_INTENT_GUILD_MEMBERS;
                                MISSING_KICK_MEMBERS: import("../types/shared.js").Errors.MISSING_KICK_MEMBERS;
                                MISSING_MANAGE_CHANNELS: import("../types/shared.js").Errors.MISSING_MANAGE_CHANNELS;
                                MISSING_MANAGE_EMOJIS: import("../types/shared.js").Errors.MISSING_MANAGE_EMOJIS;
                                MISSING_MANAGE_GUILD: import("../types/shared.js").Errors.MISSING_MANAGE_GUILD;
                                MISSING_MANAGE_MESSAGES: import("../types/shared.js").Errors.MISSING_MANAGE_MESSAGES;
                                MISSING_MANAGE_NICKNAMES: import("../types/shared.js").Errors.MISSING_MANAGE_NICKNAMES;
                                MISSING_MANAGE_ROLES: import("../types/shared.js").Errors.MISSING_MANAGE_ROLES;
                                MISSING_MANAGE_WEBHOOKS: import("../types/shared.js").Errors.MISSING_MANAGE_WEBHOOKS;
                                MISSING_MENTION_EVERYONE: import("../types/shared.js").Errors.MISSING_MENTION_EVERYONE;
                                MISSING_MOVE_MEMBERS: import("../types/shared.js").Errors.MISSING_MOVE_MEMBERS;
                                MISSING_MUTE_MEMBERS: import("../types/shared.js").Errors.MISSING_MUTE_MEMBERS;
                                MISSING_PRIORITY_SPEAKER: import("../types/shared.js").Errors.MISSING_PRIORITY_SPEAKER;
                                MISSING_READ_MESSAGE_HISTORY: import("../types/shared.js").Errors.MISSING_READ_MESSAGE_HISTORY;
                                MISSING_SEND_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_MESSAGES;
                                MISSING_SEND_TTS_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_TTS_MESSAGES;
                                MISSING_SPEAK: import("../types/shared.js").Errors.MISSING_SPEAK;
                                MISSING_STREAM: import("../types/shared.js").Errors.MISSING_STREAM;
                                MISSING_USE_VAD: import("../types/shared.js").Errors.MISSING_USE_VAD;
                                MISSING_USE_EXTERNAL_EMOJIS: import("../types/shared.js").Errors.MISSING_USE_EXTERNAL_EMOJIS;
                                MISSING_VIEW_AUDIT_LOG: import("../types/shared.js").Errors.MISSING_VIEW_AUDIT_LOG;
                                MISSING_VIEW_CHANNEL: import("../types/shared.js").Errors.MISSING_VIEW_CHANNEL;
                                MISSING_VIEW_GUILD_INSIGHTS: import("../types/shared.js").Errors.MISSING_VIEW_GUILD_INSIGHTS;
                                USERNAME_INVALID_CHARACTER: import("../types/shared.js").Errors.USERNAME_INVALID_CHARACTER;
                                USERNAME_INVALID_USERNAME: import("../types/shared.js").Errors.USERNAME_INVALID_USERNAME;
                                USERNAME_MAX_LENGTH: import("../types/shared.js").Errors.USERNAME_MAX_LENGTH;
                                USERNAME_MIN_LENGTH: import("../types/shared.js").Errors.USERNAME_MIN_LENGTH;
                                NONCE_TOO_LONG: import("../types/shared.js").Errors.NONCE_TOO_LONG;
                                INVITE_MAX_AGE_INVALID: import("../types/shared.js").Errors.INVITE_MAX_AGE_INVALID;
                                INVITE_MAX_USES_INVALID: import("../types/shared.js").Errors.INVITE_MAX_USES_INVALID;
                                RATE_LIMIT_RETRY_MAXED: import("../types/shared.js").Errors.RATE_LIMIT_RETRY_MAXED;
                                REQUEST_CLIENT_ERROR: import("../types/shared.js").Errors.REQUEST_CLIENT_ERROR;
                                REQUEST_SERVER_ERROR: import("../types/shared.js").Errors.REQUEST_SERVER_ERROR;
                                TOO_MANY_COMPONENTS: import("../types/shared.js").Errors.TOO_MANY_COMPONENTS;
                                TOO_MANY_ACTION_ROWS: import("../types/shared.js").Errors.TOO_MANY_ACTION_ROWS;
                                LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID: import("../types/shared.js").Errors.LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID;
                                COMPONENT_LABEL_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_LABEL_TOO_BIG;
                                COMPONENT_CUSTOM_ID_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_CUSTOM_ID_TOO_BIG;
                                BUTTON_REQUIRES_CUSTOM_ID: import("../types/shared.js").Errors.BUTTON_REQUIRES_CUSTOM_ID;
                                COMPONENT_SELECT_MUST_BE_ALONE: import("../types/shared.js").Errors.COMPONENT_SELECT_MUST_BE_ALONE;
                                COMPONENT_PLACEHOLDER_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_PLACEHOLDER_TOO_BIG;
                                COMPONENT_SELECT_MIN_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_LOW;
                                COMPONENT_SELECT_MIN_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_MANY;
                                COMPONENT_SELECT_MAX_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_LOW;
                                COMPONENT_SELECT_MAX_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_MANY;
                                COMPONENT_SELECT_OPTIONS_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_LOW;
                                COMPONENT_SELECT_OPTIONS_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_MANY;
                                SELECT_OPTION_LABEL_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_LABEL_TOO_BIG;
                                SELECT_OPTION_VALUE_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_VALUE_TOO_BIG;
                                SELECT_OPTION_TOO_MANY_DEFAULTS: import("../types/shared.js").Errors.SELECT_OPTION_TOO_MANY_DEFAULTS;
                                COMPONENT_SELECT_MIN_HIGHER_THAN_MAX: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_HIGHER_THAN_MAX;
                                CANNOT_ADD_USER_TO_ARCHIVED_THREADS: import("../types/shared.js").Errors.CANNOT_ADD_USER_TO_ARCHIVED_THREADS;
                                CANNOT_LEAVE_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_LEAVE_ARCHIVED_THREAD;
                                CANNOT_REMOVE_FROM_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_REMOVE_FROM_ARCHIVED_THREAD;
                                YOU_CAN_NOT_DM_THE_BOT_ITSELF: import("../types/shared.js").Errors.YOU_CAN_NOT_DM_THE_BOT_ITSELF;
                            };
                        };
                        events: import("../bot.js").EventHandlers;
                        applicationId: bigint;
                        token: string;
                        intents: import("../types/shared.js").GatewayIntents;
                        urlWSS: string;
                        utils: {
                            snowflakeToBigint: typeof import("../mod.js").snowflakeToBigint;
                            bigintToSnowflake: typeof import("../mod.js").bigintToSnowflake;
                            calculateShardId: typeof import("../mod.js").calculateShardId;
                            delay: typeof import("../mod.js").delay;
                            iconHashToBigInt: typeof import("../mod.js").iconHashToBigInt;
                            iconBigintToHash: typeof import("../mod.js").iconBigintToHash;
                            validateLength: typeof import("../mod.js").validateLength;
                            urlToBase64: typeof import("../util/urlToBase64.js").urlToBase64;
                            formatImageURL: typeof import("../mod.js").formatImageURL;
                            calculateBits: typeof import("../util/permissions.js").calculateBits;
                            calculatePermissions: typeof import("../util/permissions.js").calculatePermissions;
                        };
                        transformers: import("../bot.js").Transformers;
                        helpers: {
                            addToThread: (threadId: bigint, userId: bigint) => Promise<void>;
                            getActiveThreads: (guildId: bigint) => Promise<{
                                threads: Collection<bigint, import("./channel.js").Channel>;
                                members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                            }>;
                            getArchivedThreads: (channelId: bigint, options?: (import("../mod.js").ListArchivedThreads & {
                                type?: "private" | "public" | "privateJoinedThreads" | undefined;
                            }) | undefined) => Promise<{
                                threads: Collection<bigint, import("./channel.js").Channel>;
                                members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                                hasMore: boolean;
                            }>;
                            getThreadMember: (threadId: bigint, userId: bigint) => Promise<{
                                id: bigint | undefined;
                                userId: bigint | undefined;
                                joinTimestamp: number;
                                flags: number;
                            }>;
                            getThreadMembers: (threadId: bigint) => Promise<Collection<bigint | undefined, import("./threadMember.js").ThreadMember>>;
                            joinThread: (threadId: bigint) => Promise<void>;
                            leaveThread: (threadId: bigint) => Promise<void>;
                            removeThreadMember: (threadId: bigint, userId: bigint) => Promise<void>;
                            startThreadWithMessage: (channelId: bigint, messageId: bigint, options: import("../mod.js").StartThreadWithMessage) => Promise<import("./channel.js").Channel>;
                            startThreadWithoutMessage: (channelId: bigint, options: import("../mod.js").StartThreadWithoutMessage) => Promise<import("./channel.js").Channel>;
                            createForumPost: (channelId: bigint, options: import("../mod.js").CreateForumPostWithMessage) => Promise<import("./channel.js").Channel>;
                            createChannel: (guildId: bigint, options?: import("../mod.js").CreateGuildChannel | undefined, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                            createStageInstance: (options: import("../mod.js").CreateStageInstance) => Promise<import("./stageInstance.js").StageInstance>;
                            deleteChannel: (channelId: bigint, reason?: string | undefined) => Promise<void>;
                            deleteChannelOverwrite: (channelId: bigint, overwriteId: bigint) => Promise<void>;
                            deleteStageInstance: (channelId: bigint) => Promise<void>;
                            editChannel: (channelId: bigint, options: import("../mod.js").ModifyChannel, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                            editChannelOverwrite: (channelId: bigint, overwrite: import("../mod.js").OverwriteReadable) => Promise<void>;
                            followChannel: (sourceChannelId: bigint, targetChannelId: bigint) => Promise<bigint>;
                            getChannel: (channelId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                            getChannels: (guildId: bigint) => Promise<Collection<bigint, import("./channel.js").Channel>>;
                            getChannelWebhooks: (channelId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                            getPins: (channelId: bigint) => Promise<Message[]>;
                            getStageInstance: (channelId: bigint) => Promise<import("./stageInstance.js").StageInstance>;
                            startTyping: (channelId: bigint) => Promise<void>;
                            swapChannels: (guildId: bigint, channelPositions: import("../mod.js").ModifyGuildChannelPositions[]) => Promise<void>;
                            updateStageInstance: (channelId: bigint, data: import("../types/shared.js").AtLeastOne<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, {
                                topic: Pick<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, "topic">;
                            }>) => Promise<import("./stageInstance.js").StageInstance>;
                            updateBotVoiceState: (guildId: bigint, options: import("../mod.js").UpdateSelfVoiceState) => Promise<void>;
                            updateUserVoiceState: (guildId: bigint, options: import("../mod.js").UpdateOthersVoiceState) => Promise<void>;
                            addDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                            editDiscovery: (guildId: bigint, data: import("../mod.js").ModifyGuildDiscoveryMetadata) => Promise<{
                                guildId: bigint;
                                primaryCategoryId: number;
                                keywords: string[] | undefined;
                                emojiDiscoverabilityEnabled: boolean;
                                partnerActionedTimestamp: number | undefined;
                                partnerApplicationTimestamp: number | undefined;
                                categoryIds: number[];
                            }>;
                            getDiscovery: (guildId: bigint) => Promise<{
                                guildId: bigint;
                                primaryCategoryId: number;
                                keywords: string[] | undefined;
                                emojiDiscoverabilityEnabled: boolean;
                                partnerActionedTimestamp: number | undefined;
                                partnerApplicationTimestamp: number | undefined;
                                categoryIds: number[];
                            }>;
                            getDiscoveryCategories: () => Promise<Collection<number, import("../types/discord.js").DiscordDiscoveryCategory>>;
                            removeDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                            validDiscoveryTerm: (term: string) => Promise<boolean>;
                            createEmoji: (guildId: bigint, options: import("../mod.js").CreateGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                            deleteEmoji: (guildId: bigint, id: bigint, reason?: string | undefined) => Promise<void>;
                            editEmoji: (guildId: bigint, id: bigint, options: import("../mod.js").ModifyGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                            emojiUrl: (id: bigint, animated?: boolean | undefined) => string;
                            getEmoji: (guildId: bigint, emojiId: bigint) => Promise<import("./emoji.js").Emoji>;
                            getEmojis: (guildId: bigint) => Promise<Collection<bigint, import("./emoji.js").Emoji>>;
                            createScheduledEvent: (guildId: bigint, options: import("../mod.js").CreateScheduledEvent) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                            deleteScheduledEvent: (guildId: bigint, eventId: bigint) => Promise<void>;
                            editScheduledEvent: (guildId: bigint, eventId: bigint, options: Partial<import("../mod.js").EditScheduledEvent>) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                            getScheduledEvent: (guildId: bigint, eventId: bigint, options?: {
                                withUserCount?: boolean | undefined;
                            } | undefined) => Promise<import("./scheduledEvent.js").ScheduledEvent | undefined>;
                            getScheduledEvents: (guildId: bigint, options?: import("../mod.js").GetScheduledEvents | undefined) => Promise<Collection<bigint, import("./scheduledEvent.js").ScheduledEvent>>;
                            getScheduledEventUsers: (guildId: bigint, eventId: bigint, options?: (import("../mod.js").GetScheduledEventUsers & {
                                withMember: true;
                            }) | undefined) => Promise<Collection<bigint, {
                                user: User;
                                member: Member;
                            }>>;
                            getAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<import("./automodRule.js").AutoModerationRule>;
                            getAutomodRules: (guildId: bigint) => Promise<Collection<bigint, import("./automodRule.js").AutoModerationRule>>;
                            createAutomodRule: (guildId: bigint, options: import("../mod.js").CreateAutoModerationRuleOptions) => Promise<import("./automodRule.js").AutoModerationRule>;
                            editAutomodRule: (guildId: bigint, options: Partial<import("../mod.js").EditAutoModerationRuleOptions>) => Promise<import("./automodRule.js").AutoModerationRule>;
                            deleteAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<void>;
                            createGuild: (options: import("../mod.js").CreateGuild) => Promise<import("./guild.js").Guild>;
                            deleteGuild: (guildId: bigint) => Promise<void>;
                            editGuild: (guildId: bigint, options: import("../mod.js").ModifyGuild, shardId: number) => Promise<import("./guild.js").Guild>;
                            editWelcomeScreen: (guildId: bigint, options: import("../mod.js").ModifyGuildWelcomeScreen) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                            editWidget: (guildId: bigint, enabled: boolean, channelId?: string | null | undefined) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                            getAuditLogs: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => Promise<{
                                users: User[];
                                webhook: import("./webhook.js").Webhook[];
                                auditLogEntries: import("./auditLogEntry.js").AuditLogEntry[];
                                integrations: {
                                    id: bigint | undefined;
                                    name: string | undefined;
                                    type: "twitch" | "youtube" | "discord" | undefined;
                                    enabled: boolean | undefined;
                                    syncing: boolean | undefined;
                                    roleId: bigint | undefined;
                                    enableEmoticons: boolean | undefined;
                                    expireBehavior: import("../types/shared.js").IntegrationExpireBehaviors | undefined;
                                    expireGracePeriod: number | undefined;
                                    user: User | undefined;
                                    account: {
                                        id: bigint | undefined;
                                        name: string | undefined;
                                    };
                                    syncedAt: number | undefined;
                                    subscriberCount: number | undefined;
                                    revoked: boolean | undefined;
                                    application: {
                                        id: bigint;
                                        name: string;
                                        icon: bigint | undefined;
                                        description: string;
                                        bot: User | undefined;
                                    } | undefined;
                                }[];
                                threads: import("./channel.js").Channel[];
                                scheduledEvents: import("./scheduledEvent.js").ScheduledEvent[] | undefined;
                            }>;
                            getAvailableVoiceRegions: () => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                            getBan: (guildId: bigint, memberId: bigint) => Promise<{
                                reason: string | null;
                                user: User;
                            } | undefined>;
                            getBans: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => Promise<Collection<bigint, {
                                reason?: string | undefined;
                                user: User;
                            }>>;
                            getGuild: (guildId: bigint, options?: {
                                counts?: boolean | undefined;
                            } | undefined) => Promise<import("./guild.js").Guild | undefined>;
                            getGuildPreview: (guildId: bigint) => Promise<{
                                id: bigint;
                                name: string;
                                icon: string | undefined;
                                splash: string | undefined;
                                discoverySplash: string | undefined;
                                emojis: import("./emoji.js").Emoji[];
                                features: import("../types/shared.js").GuildFeatures[];
                                approximateMemberCount: number;
                                approximatePresenceCount: number;
                                description: string | undefined;
                                stickers: import("./sticker.js").Sticker[];
                            }>;
                            getPruneCount: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => Promise<number>;
                            getVanityUrl: (guildId: bigint) => Promise<{
                                uses: number | undefined;
                                code: string | undefined;
                            }>;
                            getVoiceRegions: (guildId: bigint) => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                            getWelcomeScreen: (guildId: bigint) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                            getWidget: (guildId: bigint) => Promise<import("./widget.js").GuildWidget>;
                            getWidgetImageURL: (guildId: bigint, options?: import("../mod.js").GetGuildWidgetImageQuery | undefined) => Promise<string>;
                            getWidgetSettings: (guildId: bigint) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                            guildBannerURL: (id: bigint, options: {
                                banner?: string | bigint | undefined;
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            }) => string | undefined;
                            guildIconURL: (id: bigint, icon: bigint | undefined, options?: {
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            } | undefined) => string | undefined;
                            guildSplashURL: (id: bigint, splash: bigint | undefined, options?: {
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            } | undefined) => string | undefined;
                            leaveGuild: (guildId: bigint) => Promise<void>;
                            deleteIntegration: (guildId: bigint, id: bigint) => Promise<void>;
                            getIntegrations: (guildId: bigint) => Promise<Collection<bigint, import("./integration.js").Integration>>;
                            createApplicationCommand: (options: import("../mod.js").CreateApplicationCommand | import("../mod.js").CreateContextApplicationCommand, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                            makeOptionsForCommand: () => import("../types/discord.js").DiscordApplicationCommandOption[];
                            isContextApplicationCommand: () => boolean;
                            deleteApplicationCommand: (id: bigint, guildId?: bigint | undefined) => Promise<void>;
                            deleteInteractionResponse: (token: string, messageId?: bigint | undefined) => Promise<void>;
                            editApplicationCommandPermissions: (guildId: bigint, commandId: bigint, bearerToken: string, options: import("../mod.js").ApplicationCommandPermissions[]) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                            editInteractionResponse: (token: string, options: import("../mod.js").EditWebhookMessage & {
                                messageId?: bigint | undefined;
                            }) => Promise<Message | undefined>;
                            getApplicationCommand: (commandId: bigint, options?: import("../mod.js").GetApplicationCommand | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                            getApplicationCommandPermission: (guildId: bigint, commandId: bigint) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                            getApplicationCommandPermissions: (guildId: bigint) => Promise<Collection<bigint, import("./applicationCommandPermission.js").ApplicationCommandPermission>>;
                            getApplicationCommands: (guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                            upsertApplicationCommand: (commandId: bigint, options: import("../types/shared.js").AtLeastOne<import("../mod.js").CreateContextApplicationCommand, {
                                type: Pick<import("../mod.js").CreateContextApplicationCommand, "type">;
                                description: Pick<import("../mod.js").CreateContextApplicationCommand, "description">;
                                name: Pick<import("../mod.js").CreateContextApplicationCommand, "name">;
                                nameLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "nameLocalizations"> | undefined;
                                descriptionLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "descriptionLocalizations"> | undefined;
                                defaultMemberPermissions?: Pick<import("../mod.js").CreateContextApplicationCommand, "defaultMemberPermissions"> | undefined;
                                dmPermission?: Pick<import("../mod.js").CreateContextApplicationCommand, "dmPermission"> | undefined;
                            }> | import("../types/shared.js").AtLeastOne<import("../mod.js").CreateApplicationCommand, {
                                name: Pick<import("../mod.js").CreateApplicationCommand, "name">;
                                nameLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "nameLocalizations"> | undefined;
                                description: Pick<import("../mod.js").CreateApplicationCommand, "description">;
                                descriptionLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "descriptionLocalizations"> | undefined;
                                type?: Pick<import("../mod.js").CreateApplicationCommand, "type"> | undefined;
                                options?: Pick<import("../mod.js").CreateApplicationCommand, "options"> | undefined;
                                defaultMemberPermissions?: Pick<import("../mod.js").CreateApplicationCommand, "defaultMemberPermissions"> | undefined;
                                dmPermission?: Pick<import("../mod.js").CreateApplicationCommand, "dmPermission"> | undefined;
                            }>, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                            upsertApplicationCommands: (options: (import("../mod.js").CreateContextApplicationCommand | import("../mod.js").UpsertApplicationCommands)[], guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                            deleteFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<void>;
                            editFollowupMessage: (interactionToken: string, messageId: bigint, options: import("../mod.js").EditWebhookMessage) => Promise<Message>;
                            getFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<Message>;
                            getOriginalInteractionResponse: (token: string) => Promise<Message>;
                            sendInteractionResponse: (id: bigint, token: string, options: import("../mod.js").InteractionResponse) => Promise<Message | undefined>;
                            verifySignature: () => {
                                isValid: boolean;
                                body: string;
                            };
                            createInvite: (channelId: bigint, options?: import("../mod.js").CreateChannelInvite | undefined) => Promise<{
                                code: string;
                                guildId: bigint | undefined;
                                channelId: bigint | undefined;
                                inviter: User | undefined;
                                targetType: import("../types/shared.js").TargetTypes | undefined;
                                targetUser: User | undefined;
                                targetApplicationId: bigint | undefined;
                                approximatePresenceCount: number | undefined;
                                approximateMemberCount: number | undefined;
                                expiresAt: number | undefined;
                            }>;
                            deleteInvite: (inviteCode: string) => Promise<void>;
                            getChannelInvites: (channelId: bigint) => Promise<Collection<string, {
                                uses: number;
                                maxUses: number;
                                maxAge: number;
                                temporary: boolean;
                                createdAt: number;
                            }>>;
                            getInvite: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => Promise<{
                                code: string;
                                guildId: bigint | undefined;
                                channelId: bigint | undefined;
                                inviter: User | undefined;
                                targetType: import("../types/shared.js").TargetTypes | undefined;
                                targetUser: User | undefined;
                                targetApplicationId: bigint | undefined;
                                approximatePresenceCount: number | undefined;
                                approximateMemberCount: number | undefined;
                                expiresAt: number | undefined;
                            }>;
                            getInvites: (guildId: bigint) => Promise<Collection<string, {
                                uses: number;
                                maxUses: number;
                                maxAge: number;
                                temporary: boolean;
                                createdAt: number;
                            }>>;
                            avatarURL: (userId: bigint, discriminator: string, options?: {
                                avatar: bigint | undefined;
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            } | undefined) => string;
                            banMember: (guildId: bigint, id: bigint, options?: import("../mod.js").CreateGuildBan | undefined) => Promise<void>;
                            editBotNickname: (guildId: bigint, options: {
                                nick: string | null;
                                reason?: string | undefined;
                            }) => Promise<string | undefined>;
                            editMember: (guildId: bigint, memberId: bigint, options: import("../mod.js").ModifyGuildMember) => Promise<Member>;
                            fetchMembers: (guildId: bigint, options?: Omit<import("../mod.js").RequestGuildMembers, "guildId"> | undefined) => Promise<void>;
                            getDmChannel: (userId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                            getMember: (guildId: bigint, id: bigint) => Promise<Member | undefined>;
                            getMembers: (guildId: bigint, options: import("../mod.js").ListGuildMembers) => Promise<Collection<bigint, Member>>;
                            kickMember: (guildId: bigint, memberId: bigint, reason?: string | undefined) => Promise<void>;
                            pruneMembers: (guildId: bigint, options: import("../mod.js").BeginGuildPrune) => Promise<number>;
                            searchMembers: (guildId: bigint, query: string, options?: Omit<import("../mod.js").SearchMembers, "query"> | undefined) => Promise<Collection<bigint, Member>>;
                            unbanMember: (guildId: bigint, id: bigint) => Promise<void>;
                            addReaction: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                            addReactions: (channelId: bigint, messageId: bigint, reactions: string[], ordered?: boolean | undefined) => Promise<void>;
                            deleteMessage: (channelId: bigint, messageId: bigint, reason?: string | undefined, delayMilliseconds?: number | undefined) => Promise<void>;
                            deleteMessages: (channelId: bigint, ids: bigint[], reason?: string | undefined) => Promise<void>;
                            editMessage: (channelId: bigint, messageId: bigint, content: import("../mod.js").EditMessage) => Promise<Message>;
                            getMessage: (channelId: bigint, id: bigint) => Promise<Message | undefined>;
                            getMessages: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => Promise<Collection<bigint, Message>>;
                            isGetMessagesAfter: () => boolean;
                            isGetMessagesBefore: () => boolean;
                            isGetMessagesAround: () => boolean;
                            isGetMessagesLimit: () => boolean;
                            getReactions: (channelId: bigint, messageId: bigint, reaction: string, options?: import("../mod.js").GetReactions | undefined) => Promise<Collection<bigint, User>>;
                            pinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                            publishMessage: (channelId: bigint, messageId: bigint) => Promise<Message>;
                            removeAllReactions: (channelId: bigint, messageId: bigint) => Promise<void>;
                            removeReaction: (channelId: bigint, messageId: bigint, reaction: string, options?: {
                                userId?: bigint | undefined;
                            } | undefined) => Promise<void>;
                            removeReactionEmoji: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                            sendMessage: (channelId: bigint, content: import("../mod.js").CreateMessage) => Promise<Message>;
                            unpinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                            editBotProfile: (options: {
                                username?: string | undefined;
                                botAvatarURL?: string | null | undefined;
                            }) => Promise<User>;
                            editBotStatus: (data: import("../mod.js").StatusUpdate) => Promise<void>;
                            editShardStatus: (shardId: number, data: import("../mod.js").StatusUpdate) => void;
                            getGatewayBot: () => Promise<import("./gatewayBot.js").GetGatewayBot>;
                            getUser: (userId: bigint) => Promise<User | undefined>;
                            nitroStickerPacks: () => Promise<import("./sticker.js").StickerPack[]>;
                            getApplicationInfo: () => Promise<import("./application.js").Application>;
                            addRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                            createRole: (guildId: bigint, options: import("../mod.js").CreateGuildRole, reason?: string | undefined) => Promise<Role>;
                            deleteRole: (guildId: bigint, id: bigint) => Promise<void>;
                            editRole: (guildId: bigint, id: bigint, options: import("../mod.js").EditGuildRole) => Promise<Role>;
                            getRoles: (guildId: bigint) => Promise<Collection<bigint, Role>>;
                            modifyRolePositions: (guildId: bigint, options: import("../mod.js").ModifyRolePositions[]) => Promise<Collection<bigint, Role>>;
                            removeRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                            createGuildFromTemplate: (templateCode: string, data: import("../mod.js").CreateGuildFromTemplate) => Promise<import("./guild.js").Guild>;
                            createGuildTemplate: (guildId: bigint, data: import("../mod.js").CreateTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                            deleteGuildTemplate: (guildId: bigint, templateCode: string) => Promise<void>;
                            editGuildTemplate: (guildId: bigint, templateCode: string, data: import("../mod.js").ModifyGuildTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                            getGuildTemplates: (guildId: bigint) => Promise<Collection<string, import("./template.js").Template>>;
                            getTemplate: (templateCode: string) => Promise<import("./template.js").Template>;
                            syncGuildTemplate: (guildId: bigint, templateCode: string) => Promise<import("../types/discord.js").DiscordTemplate>;
                            connectToVoiceChannel: (guildId: bigint, channelId: bigint, options?: import("../types/shared.js").AtLeastOne<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, {
                                selfDeaf: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfDeaf">;
                                selfMute: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfMute">;
                            }> | undefined) => Promise<void>;
                            createWebhook: (channelId: bigint, options: import("../mod.js").CreateWebhook) => Promise<import("./webhook.js").Webhook>;
                            deleteWebhook: (webhookId: bigint, reason?: string | undefined) => Promise<void>;
                            deleteWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").DeleteWebhookMessageOptions | undefined) => Promise<void>;
                            deleteWebhookWithToken: (webhookId: bigint, webhookToken: string) => Promise<void>;
                            editWebhook: (webhookId: bigint, options: import("../mod.js").ModifyWebhook) => Promise<import("./webhook.js").Webhook>;
                            editWebhookMessage: (webhookId: bigint, webhookToken: string, options: import("../mod.js").EditWebhookMessage & {
                                messageId?: bigint | undefined;
                                threadId?: bigint | undefined;
                            }) => Promise<Message>;
                            editWebhookWithToken: (webhookId: bigint, webhookToken: string, options: Omit<import("../mod.js").ModifyWebhook, "channelId">) => Promise<import("./webhook.js").Webhook>;
                            getWebhook: (webhookId: bigint) => Promise<import("./webhook.js").Webhook | undefined>;
                            getWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").GetWebhookMessageOptions | undefined) => Promise<Message>;
                            getWebhooks: (guildId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                            getWebhookWithToken: (webhookId: bigint, token: string) => Promise<import("./webhook.js").Webhook>;
                            sendWebhook: (webhookId: bigint, webhookToken: string, options: import("../mod.js").ExecuteWebhook) => Promise<Message | undefined>;
                        };
                        rest: {
                            version: number;
                            token: string;
                            debug: (text: string) => unknown;
                            customUrl: string;
                            maxRetryCount: number;
                            secretKey: string;
                            checkRateLimits: typeof import("../mod.js").checkRateLimits;
                            cleanupQueues: typeof import("../mod.js").cleanupQueues;
                            processQueue: typeof import("../mod.js").processQueue;
                            processRateLimitedPaths: typeof import("../mod.js").processRateLimitedPaths;
                            processRequestHeaders: typeof import("../mod.js").processRequestHeaders;
                            processRequest: typeof import("../mod.js").processRequest;
                            createRequestBody: typeof import("../mod.js").createRequestBody;
                            runMethod: typeof import("../mod.js").runMethod;
                            simplifyUrl: typeof import("../mod.js").simplifyUrl;
                            processGlobalQueue: typeof import("../mod.js").processGlobalQueue;
                            convertRestError: typeof import("../mod.js").convertRestError;
                            sendRequest: typeof import("../mod.js").sendRequest;
                            invalidRequests: number;
                            maxInvalidRequests: number;
                            invalidRequestsInterval: number;
                            invalidRequestsTimeoutId: number;
                            invalidRequestsSafetyAmount: number;
                            invalidRequestFrozenAt: number;
                            invalidRequestErrorStatuses: number[];
                            pathQueues: Map<string, {
                                isWaiting: boolean;
                                requests: {
                                    request: import("../mod.js").RestRequest;
                                    payload: import("../mod.js").RestPayload;
                                }[];
                            }>;
                            processingQueue: boolean;
                            processingRateLimitedPaths: boolean;
                            globallyRateLimited: boolean;
                            globalQueue: {
                                request: import("../mod.js").RestRequest;
                                payload: import("../mod.js").RestPayload;
                                basicURL: string;
                                urlToUse: string;
                            }[];
                            globalQueueProcessing: boolean;
                            rateLimitedPaths: Map<string, import("../mod.js").RestRateLimitedPath>;
                        };
                        gateway: {
                            stop: (code: number, reason: string) => Promise<void>;
                            gatewayBot: {
                                url: string;
                                shards: number;
                                sessionStartLimit: {
                                    total: number;
                                    remaining: number;
                                    resetAfter: number;
                                    maxConcurrency: number;
                                };
                            };
                            spawnShardDelay: number;
                            shardsPerWorker: number;
                            totalWorkers: number;
                            firstShardId: number;
                            lastShardId: number;
                            buckets: Collection<number, {
                                workers: {
                                    id: number;
                                    queue: number[];
                                }[];
                                leak: import("../util/bucket.js").LeakyBucket;
                            }>;
                            prepareBuckets: () => void;
                            spawnShards: () => void;
                            tellWorkerToIdentify: (workerId: number, shardId: number, bucketId: number) => Promise<void>;
                            debug: (text: import("../mod.js").GatewayDebugEvents, ...args: any[]) => unknown;
                            calculateTotalShards: () => number;
                            calculateWorkerId: (shardId: number) => number;
                            manager: {
                                shards: Collection<number, {
                                    gatewayConfig: import("../mod.js").ShardGatewayConfig;
                                    heart: import("../mod.js").ShardHeart;
                                    id: number;
                                    maxRequestsPerRateLimitTick: number;
                                    previousSequenceNumber: number | null;
                                    rateLimitResetInterval: number;
                                    sessionId: string | undefined;
                                    socket: import("ws") | undefined;
                                    state: import("../mod.js").ShardState;
                                    totalShards: number;
                                    events: import("../mod.js").ShardEvents;
                                    calculateSafeRequests: () => number;
                                    close: (code: number, reason: string) => void;
                                    connect: () => Promise<void>;
                                    identify: () => Promise<void>;
                                    isOpen: () => boolean;
                                    makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                                    resume: () => Promise<void>;
                                    send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                                    shutdown: () => Promise<void>;
                                    bucket: import("../util/bucket.js").LeakyBucket;
                                    handleClose: (close: CloseEvent) => Promise<void>;
                                    handleMessage: (message: MessageEvent<any>) => Promise<void>;
                                    requestIdentify: () => Promise<void>;
                                    offlineSendQueue: ((_?: unknown) => void)[];
                                    resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                    startHeartbeating: (interval: number) => void;
                                    stopHeartbeating: () => void;
                                }>;
                                gatewayConfig: {
                                    url?: string | undefined;
                                    version?: number | undefined;
                                    compress?: boolean | undefined;
                                    intents?: number | undefined;
                                    properties?: {
                                        browser: string;
                                        os: string;
                                        device: string;
                                    } | undefined;
                                    token: string;
                                };
                                totalShards: number;
                                createShardOptions: {
                                    state?: import("../mod.js").ShardState | undefined;
                                    close?: {} | undefined;
                                    resume?: {} | undefined;
                                    connect?: {} | undefined;
                                    calculateSafeRequests?: {} | undefined;
                                    handleClose?: {} | undefined;
                                    handleMessage?: {} | undefined;
                                    identify?: {} | undefined;
                                    isOpen?: {} | undefined;
                                    makePresence?: {} | undefined;
                                    maxRequestsPerRateLimitTick?: number | undefined;
                                    previousSequenceNumber?: number | undefined;
                                    rateLimitResetInterval?: number | undefined;
                                    send?: {} | undefined;
                                    shutdown?: {} | undefined;
                                    startHeartbeating?: {} | undefined;
                                    stopHeartbeating?: {} | undefined;
                                    heart?: {
                                        intervalId?: number | undefined;
                                        lastAck?: number | undefined;
                                        lastBeat?: number | undefined;
                                        rtt?: number | undefined;
                                        timeoutId?: number | undefined;
                                        interval: number;
                                        acknowledged: boolean;
                                    } | undefined;
                                    bucket?: {
                                        max: number;
                                        waiting: ((_?: unknown) => void)[];
                                        refillInterval: number;
                                        refillAmount: number;
                                        tokens: () => number;
                                        acquire: (amount: number, highPriority?: boolean | undefined) => Promise<void>;
                                        nextRefill: () => number;
                                        lastRefill: number;
                                        allowAcquire: boolean;
                                        tokensState: number;
                                    } | undefined;
                                    offlineSendQueue?: {
                                        d?: unknown;
                                        op: import("../types/shared.js").GatewayOpcodes;
                                    }[] | undefined;
                                    resolves?: {
                                        [Symbol.toStringTag]: string;
                                        [Symbol.iterator]: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                        forEach: (callbackfn: (value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void, key: "READY" | "RESUMED" | "INVALID_SESSION", map: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>) => void, thisArg?: any) => void;
                                        entries: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                        keys: () => IterableIterator<"READY" | "RESUMED" | "INVALID_SESSION">;
                                        values: () => IterableIterator<(payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                        set: (key: "READY" | "RESUMED" | "INVALID_SESSION", value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void) => Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                        clear: () => void;
                                        size: number;
                                        get: (key: "READY" | "RESUMED" | "INVALID_SESSION") => ((payload: import("../types/discord.js").DiscordGatewayPayload) => void) | undefined;
                                        delete: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                                        has: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                                    } | undefined;
                                    events: {
                                        connected?: {} | undefined;
                                        connecting?: {} | undefined;
                                        disconnected?: {} | undefined;
                                        heartbeat?: {} | undefined;
                                        heartbeatAck?: {} | undefined;
                                        hello?: {} | undefined;
                                        invalidSession?: {} | undefined;
                                        resuming?: {} | undefined;
                                        resumed?: {} | undefined;
                                        requestedReconnect?: {} | undefined;
                                        identifying?: {} | undefined;
                                        identified?: {} | undefined;
                                        message: (shard: {
                                            gatewayConfig: import("../mod.js").ShardGatewayConfig;
                                            heart: import("../mod.js").ShardHeart;
                                            id: number;
                                            maxRequestsPerRateLimitTick: number;
                                            previousSequenceNumber: number | null;
                                            rateLimitResetInterval: number;
                                            sessionId: string | undefined;
                                            socket: import("ws") | undefined;
                                            state: import("../mod.js").ShardState;
                                            totalShards: number;
                                            events: import("../mod.js").ShardEvents;
                                            calculateSafeRequests: () => number;
                                            close: (code: number, reason: string) => void;
                                            connect: () => Promise<void>;
                                            identify: () => Promise<void>;
                                            isOpen: () => boolean;
                                            makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                                            resume: () => Promise<void>;
                                            send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                                            shutdown: () => Promise<void>;
                                            bucket: import("../util/bucket.js").LeakyBucket;
                                            handleClose: (close: CloseEvent) => Promise<void>;
                                            handleMessage: (message: MessageEvent<any>) => Promise<void>;
                                            requestIdentify: () => Promise<void>;
                                            offlineSendQueue: ((_?: unknown) => void)[];
                                            resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                            startHeartbeating: (interval: number) => void;
                                            stopHeartbeating: () => void;
                                        }, payload: import("../types/discord.js").DiscordGatewayPayload) => unknown;
                                    };
                                };
                                requestIdentify: (shardId: number) => Promise<void>;
                                identify: (shardId: number) => Promise<void>;
                                kill: (shardId: number) => Promise<void>;
                            };
                        };
                        handlers: {
                            READY: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_PINS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_BAN_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_BAN_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_EMOJIS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_INTEGRATIONS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBERS_CHUNK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_ROLE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_ROLE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_ROLE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_USER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_USER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTERACTION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INVITE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INVITE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_DELETE_BULK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_REMOVE_ALL: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_REMOVE_EMOJI: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            PRESENCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            TYPING_START: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            USER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            VOICE_SERVER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            VOICE_STATE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            WEBHOOKS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTEGRATION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTEGRATION_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTEGRATION_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            STAGE_INSTANCE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            STAGE_INSTANCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            STAGE_INSTANCE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_LIST_SYNC: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_MEMBERS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_LOADED_DD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                        };
                        activeGuildIds: Set<bigint>;
                        cache: {
                            unrepliedInteractions: Set<bigint>;
                            fetchAllMembersProcessingRequests: Map<string, Function>;
                        };
                        enabledPlugins: Set<string>;
                    } | undefined;
                    intervalId?: number | undefined;
                    filter: (value: Role, key: bigint, ...args: any[]) => boolean;
                    interval: number;
                } | undefined;
                [Symbol.toStringTag]: string;
                [Symbol.iterator]: () => IterableIterator<[bigint, Role]>;
                every: (callback: (value: Role, key: bigint) => boolean) => boolean;
                some: (callback: (value: Role, key: bigint) => boolean) => boolean;
                forEach: (callbackfn: (value: Role, key: bigint, map: Map<bigint, Role>) => void, thisArg?: any) => void;
                map: <T>(callback: (value: Role, key: bigint) => T) => T[];
                filter: (callback: (value: Role, key: bigint) => boolean) => Collection<bigint, Role>;
                reduce: <T_1>(callback: (accumulator: T_1, value: Role, key: bigint) => T_1, initialValue?: T_1 | undefined) => T_1;
                find: (callback: (value: Role, key: bigint) => boolean) => Role | undefined;
                entries: () => IterableIterator<[bigint, Role]>;
                keys: () => IterableIterator<bigint>;
                values: () => IterableIterator<Role>;
                set: (key: bigint, value: Role) => Collection<bigint, Role>;
                clear: () => void;
                size: number;
                get: (key: bigint) => Role | undefined;
                startSweeper: (options: import("../util/collection.js").CollectionSweeper<bigint, Role>) => number;
                stopSweeper: () => void;
                changeSweeperInterval: (newInterval: number) => void;
                changeSweeperFilter: (newFilter: (value: Role, key: bigint, bot: Bot) => boolean) => void;
                forceSet: (key: bigint, value: Role) => Collection<bigint, Role>;
                array: () => Role[];
                first: () => Role | undefined;
                last: () => Role | undefined;
                random: () => Role | undefined;
                delete: (key: bigint) => boolean;
                has: (key: bigint) => boolean;
            } | undefined;
            members?: {
                maxSize?: number | undefined;
                sweeper?: {
                    bot?: {
                        handleDiscordPayload?: {} | undefined;
                        botGatewayData?: {
                            url: string;
                            shards: number;
                            sessionStartLimit: {
                                total: number;
                                remaining: number;
                                resetAfter: number;
                                maxConcurrency: number;
                            };
                        } | undefined;
                        id: bigint;
                        constants: {
                            DISCORDENO_VERSION: string;
                            USER_AGENT: string;
                            BASE_URL: string;
                            CDN_URL: string;
                            routes: {
                                GATEWAY_BOT: () => string;
                                AUTOMOD_RULES: (guildId: bigint) => string;
                                AUTOMOD_RULE: (guildId: bigint, ruleId: bigint) => string;
                                CHANNEL: (channelId: bigint) => string;
                                CHANNEL_MESSAGE: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_MESSAGES: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => string;
                                CHANNEL_PIN: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_PINS: (channelId: bigint) => string;
                                CHANNEL_BULK_DELETE: (channelId: bigint) => string;
                                CHANNEL_INVITES: (channelId: bigint) => string;
                                CHANNEL_WEBHOOKS: (channelId: bigint) => string;
                                CHANNEL_MESSAGE_REACTION_ME: (channelId: bigint, messageId: bigint, emoji: string) => string;
                                CHANNEL_MESSAGE_REACTION_USER: (channelId: bigint, messageId: bigint, emoji: string, userId: bigint) => string;
                                CHANNEL_MESSAGE_REACTIONS: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_MESSAGE_REACTION: (channelId: bigint, messageId: bigint, emoji: string, options?: import("../mod.js").GetReactions | undefined) => string;
                                CHANNEL_FOLLOW: (channelId: bigint) => string;
                                CHANNEL_MESSAGE_CROSSPOST: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_OVERWRITE: (channelId: bigint, overwriteId: bigint) => string;
                                CHANNEL_TYPING: (channelId: bigint) => string;
                                THREAD_START_PUBLIC: (channelId: bigint, messageId: bigint) => string;
                                THREAD_START_PRIVATE: (channelId: bigint) => string;
                                THREAD_ACTIVE: (guildId: bigint) => string;
                                THREAD_MEMBERS: (channelId: bigint) => string;
                                THREAD_ME: (channelId: bigint) => string;
                                THREAD_USER: (channelId: bigint, userId: bigint) => string;
                                THREAD_ARCHIVED: (channelId: bigint) => string;
                                THREAD_ARCHIVED_PUBLIC: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                                THREAD_ARCHIVED_PRIVATE: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                                THREAD_ARCHIVED_PRIVATE_JOINED: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                                FORUM_START: (channelId: bigint) => string;
                                GUILD: (guildId: bigint, withCounts?: boolean | undefined) => string;
                                GUILDS: () => string;
                                GUILD_AUDIT_LOGS: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => string;
                                GUILD_BAN: (guildId: bigint, userId: bigint) => string;
                                GUILD_BANS: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => string;
                                GUILD_BANNER: (guildId: bigint, icon: string) => string;
                                GUILD_CHANNELS: (guildId: bigint) => string;
                                GUILD_WIDGET: (guildId: bigint) => string;
                                GUILD_WIDGET_JSON: (guildId: bigint) => string;
                                GUILD_WIDGET_IMAGE: (guildId: bigint, style?: "shield" | "banner1" | "banner2" | "banner3" | "banner4" | undefined) => string;
                                GUILD_EMOJI: (guildId: bigint, emojiId: bigint) => string;
                                GUILD_EMOJIS: (guildId: bigint) => string;
                                GUILD_ICON: (guildId: bigint, icon: string) => string;
                                GUILD_INTEGRATION: (guildId: bigint, integrationId: bigint) => string;
                                GUILD_INTEGRATION_SYNC: (guildId: bigint, integrationId: bigint) => string;
                                GUILD_INTEGRATIONS: (guildId: bigint) => string;
                                GUILD_INVITES: (guildId: bigint) => string;
                                GUILD_LEAVE: (guildId: bigint) => string;
                                GUILD_MEMBER: (guildId: bigint, userId: bigint) => string;
                                GUILD_MEMBERS: (guildId: bigint, options?: import("../mod.js").ListGuildMembers | undefined) => string;
                                GUILD_MEMBER_ROLE: (guildId: bigint, memberId: bigint, roleId: bigint) => string;
                                GUILD_MEMBERS_SEARCH: (guildId: bigint, query: string, options?: {
                                    limit?: number | undefined;
                                } | undefined) => string;
                                GUILD_PRUNE: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => string;
                                GUILD_REGIONS: (guildId: bigint) => string;
                                GUILD_ROLE: (guildId: bigint, roleId: bigint) => string;
                                GUILD_ROLES: (guildId: bigint) => string;
                                GUILD_SPLASH: (guildId: bigint, icon: string) => string;
                                GUILD_VANITY_URL: (guildId: bigint) => string;
                                GUILD_WEBHOOKS: (guildId: bigint) => string;
                                TEMPLATE: (code: string) => string;
                                GUILD_TEMPLATE: (guildId: bigint, code: string) => string;
                                GUILD_TEMPLATES: (guildId: bigint) => string;
                                GUILD_PREVIEW: (guildId: bigint) => string;
                                UPDATE_VOICE_STATE: (guildId: bigint, userId?: bigint | undefined) => string;
                                GUILD_WELCOME_SCREEN: (guildId: bigint) => string;
                                GUILD_SCHEDULED_EVENTS: (guildId: bigint, withUserCount?: boolean | undefined) => string;
                                GUILD_SCHEDULED_EVENT: (guildId: bigint, eventId: bigint, withUserCount?: boolean | undefined) => string;
                                GUILD_SCHEDULED_EVENT_USERS: (guildId: bigint, eventId: bigint, options?: import("../mod.js").GetScheduledEventUsers | undefined) => string;
                                VOICE_REGIONS: () => string;
                                INVITE: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => string;
                                WEBHOOK: (webhookId: bigint, token: string, options?: {
                                    wait?: boolean | undefined;
                                    threadId?: bigint | undefined;
                                } | undefined) => string;
                                WEBHOOK_ID: (webhookId: bigint) => string;
                                WEBHOOK_MESSAGE: (webhookId: bigint, token: string, messageId: bigint, options?: {
                                    threadId?: bigint | undefined;
                                } | undefined) => string;
                                WEBHOOK_MESSAGE_ORIGINAL: (webhookId: bigint, token: string, options?: {
                                    threadId?: bigint | undefined;
                                } | undefined) => string;
                                WEBHOOK_SLACK: (webhookId: bigint, token: string) => string;
                                WEBHOOK_GITHUB: (webhookId: bigint, token: string) => string;
                                COMMANDS: (applicationId: bigint) => string;
                                COMMANDS_GUILD: (applicationId: bigint, guildId: bigint) => string;
                                COMMANDS_PERMISSIONS: (applicationId: bigint, guildId: bigint) => string;
                                COMMANDS_PERMISSION: (applicationId: bigint, guildId: bigint, commandId: bigint) => string;
                                COMMANDS_ID: (applicationId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                                COMMANDS_GUILD_ID: (applicationId: bigint, guildId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                                INTERACTION_ID_TOKEN: (interactionId: bigint, token: string) => string;
                                INTERACTION_ORIGINAL_ID_TOKEN: (interactionId: bigint, token: string) => string;
                                INTERACTION_ID_TOKEN_MESSAGE_ID: (applicationId: bigint, token: string, messageId: bigint) => string;
                                USER: (userId: bigint) => string;
                                USER_BOT: () => string;
                                USER_GUILDS: () => string;
                                USER_AVATAR: (userId: bigint, icon: string) => string;
                                USER_DEFAULT_AVATAR: (icon: number) => string;
                                USER_DM: () => string;
                                USER_CONNECTIONS: () => string;
                                USER_NICK: (guildId: bigint) => string;
                                DISCOVERY_CATEGORIES: () => string;
                                DISCOVERY_VALID_TERM: (term: string) => string;
                                DISCOVERY_METADATA: (guildId: bigint) => string;
                                DISCOVERY_SUBCATEGORY: (guildId: bigint, categoryId: number) => string;
                                OAUTH2_APPLICATION: () => string;
                                STAGE_INSTANCES: () => string;
                                STAGE_INSTANCE: (channelId: bigint) => string;
                                NITRO_STICKER_PACKS: () => string;
                            };
                            regexes: {
                                SLASH_COMMANDS_NAME_REGEX: RegExp;
                                CONTEXT_MENU_COMMANDS_NAME_REGEX: RegExp;
                                CHANNEL_MENTION_REGEX: RegExp;
                                DISCORD_SNOWFLAKE_REGEX: RegExp;
                            };
                            Errors: {
                                REQUEST_UNKNOWN_ERROR: import("../types/shared.js").Errors.REQUEST_UNKNOWN_ERROR;
                                GUILD_NOT_FOUND: import("../types/shared.js").Errors.GUILD_NOT_FOUND;
                                RULES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.RULES_CHANNEL_CANNOT_BE_DELETED;
                                UPDATES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.UPDATES_CHANNEL_CANNOT_BE_DELETED;
                                NICKNAMES_MAX_LENGTH: import("../types/shared.js").Errors.NICKNAMES_MAX_LENGTH;
                                MEMBER_NOT_IN_VOICE_CHANNEL: import("../types/shared.js").Errors.MEMBER_NOT_IN_VOICE_CHANNEL;
                                MESSAGE_MAX_LENGTH: import("../types/shared.js").Errors.MESSAGE_MAX_LENGTH;
                                BOTS_HIGHEST_ROLE_TOO_LOW: import("../types/shared.js").Errors.BOTS_HIGHEST_ROLE_TOO_LOW;
                                CHANNEL_NOT_FOUND: import("../types/shared.js").Errors.CHANNEL_NOT_FOUND;
                                CHANNEL_NOT_IN_GUILD: import("../types/shared.js").Errors.CHANNEL_NOT_IN_GUILD;
                                CHANNEL_NOT_TEXT_BASED: import("../types/shared.js").Errors.CHANNEL_NOT_TEXT_BASED;
                                CHANNEL_NOT_STAGE_VOICE: import("../types/shared.js").Errors.CHANNEL_NOT_STAGE_VOICE;
                                INVALID_TOPIC_LENGTH: import("../types/shared.js").Errors.INVALID_TOPIC_LENGTH;
                                GUILD_NOT_DISCOVERABLE: import("../types/shared.js").Errors.GUILD_NOT_DISCOVERABLE;
                                GUILD_WIDGET_NOT_ENABLED: import("../types/shared.js").Errors.GUILD_WIDGET_NOT_ENABLED;
                                MEMBER_NOT_FOUND: import("../types/shared.js").Errors.MEMBER_NOT_FOUND;
                                MEMBER_SEARCH_LIMIT_TOO_HIGH: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_HIGH;
                                MEMBER_SEARCH_LIMIT_TOO_LOW: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_LOW;
                                PRUNE_MAX_DAYS: import("../types/shared.js").Errors.PRUNE_MAX_DAYS;
                                ROLE_NOT_FOUND: import("../types/shared.js").Errors.ROLE_NOT_FOUND;
                                INVALID_THREAD_PARENT_CHANNEL_TYPE: import("../types/shared.js").Errors.INVALID_THREAD_PARENT_CHANNEL_TYPE;
                                GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS: import("../types/shared.js").Errors.GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS;
                                NOT_A_THREAD_CHANNEL: import("../types/shared.js").Errors.NOT_A_THREAD_CHANNEL;
                                MISSING_MANAGE_THREADS_AND_NOT_MEMBER: import("../types/shared.js").Errors.MISSING_MANAGE_THREADS_AND_NOT_MEMBER;
                                CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD: import("../types/shared.js").Errors.CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD;
                                HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS: import("../types/shared.js").Errors.HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS;
                                INVALID_GET_MESSAGES_LIMIT: import("../types/shared.js").Errors.INVALID_GET_MESSAGES_LIMIT;
                                DELETE_MESSAGES_MIN: import("../types/shared.js").Errors.DELETE_MESSAGES_MIN;
                                PRUNE_MIN_DAYS: import("../types/shared.js").Errors.PRUNE_MIN_DAYS;
                                INVALID_SLASH_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_DESCRIPTION;
                                INVALID_SLASH_NAME: import("../types/shared.js").Errors.INVALID_SLASH_NAME;
                                INVALID_SLASH_OPTIONS: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS;
                                INVALID_SLASH_OPTIONS_CHOICES: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICES;
                                TOO_MANY_SLASH_OPTIONS: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTIONS;
                                INVALID_SLASH_OPTION_CHOICE_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_CHOICE_NAME;
                                INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE;
                                TOO_MANY_SLASH_OPTION_CHOICES: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTION_CHOICES;
                                ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES: import("../types/shared.js").Errors.ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES;
                                INVALID_SLASH_OPTION_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_NAME;
                                INVALID_SLASH_OPTION_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_DESCRIPTION;
                                INVALID_CONTEXT_MENU_COMMAND_NAME: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_NAME;
                                INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION;
                                INVALID_WEBHOOK_NAME: import("../types/shared.js").Errors.INVALID_WEBHOOK_NAME;
                                INVALID_WEBHOOK_OPTIONS: import("../types/shared.js").Errors.INVALID_WEBHOOK_OPTIONS;
                                MISSING_ADD_REACTIONS: import("../types/shared.js").Errors.MISSING_ADD_REACTIONS;
                                MISSING_ADMINISTRATOR: import("../types/shared.js").Errors.MISSING_ADMINISTRATOR;
                                MISSING_ATTACH_FILES: import("../types/shared.js").Errors.MISSING_ATTACH_FILES;
                                MISSING_BAN_MEMBERS: import("../types/shared.js").Errors.MISSING_BAN_MEMBERS;
                                MISSING_CHANGE_NICKNAME: import("../types/shared.js").Errors.MISSING_CHANGE_NICKNAME;
                                MISSING_CONNECT: import("../types/shared.js").Errors.MISSING_CONNECT;
                                MISSING_CREATE_INSTANT_INVITE: import("../types/shared.js").Errors.MISSING_CREATE_INSTANT_INVITE;
                                MISSING_DEAFEN_MEMBERS: import("../types/shared.js").Errors.MISSING_DEAFEN_MEMBERS;
                                MISSING_EMBED_LINKS: import("../types/shared.js").Errors.MISSING_EMBED_LINKS;
                                MISSING_INTENT_GUILD_MEMBERS: import("../types/shared.js").Errors.MISSING_INTENT_GUILD_MEMBERS;
                                MISSING_KICK_MEMBERS: import("../types/shared.js").Errors.MISSING_KICK_MEMBERS;
                                MISSING_MANAGE_CHANNELS: import("../types/shared.js").Errors.MISSING_MANAGE_CHANNELS;
                                MISSING_MANAGE_EMOJIS: import("../types/shared.js").Errors.MISSING_MANAGE_EMOJIS;
                                MISSING_MANAGE_GUILD: import("../types/shared.js").Errors.MISSING_MANAGE_GUILD;
                                MISSING_MANAGE_MESSAGES: import("../types/shared.js").Errors.MISSING_MANAGE_MESSAGES;
                                MISSING_MANAGE_NICKNAMES: import("../types/shared.js").Errors.MISSING_MANAGE_NICKNAMES;
                                MISSING_MANAGE_ROLES: import("../types/shared.js").Errors.MISSING_MANAGE_ROLES;
                                MISSING_MANAGE_WEBHOOKS: import("../types/shared.js").Errors.MISSING_MANAGE_WEBHOOKS;
                                MISSING_MENTION_EVERYONE: import("../types/shared.js").Errors.MISSING_MENTION_EVERYONE;
                                MISSING_MOVE_MEMBERS: import("../types/shared.js").Errors.MISSING_MOVE_MEMBERS;
                                MISSING_MUTE_MEMBERS: import("../types/shared.js").Errors.MISSING_MUTE_MEMBERS;
                                MISSING_PRIORITY_SPEAKER: import("../types/shared.js").Errors.MISSING_PRIORITY_SPEAKER;
                                MISSING_READ_MESSAGE_HISTORY: import("../types/shared.js").Errors.MISSING_READ_MESSAGE_HISTORY;
                                MISSING_SEND_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_MESSAGES;
                                MISSING_SEND_TTS_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_TTS_MESSAGES;
                                MISSING_SPEAK: import("../types/shared.js").Errors.MISSING_SPEAK;
                                MISSING_STREAM: import("../types/shared.js").Errors.MISSING_STREAM;
                                MISSING_USE_VAD: import("../types/shared.js").Errors.MISSING_USE_VAD;
                                MISSING_USE_EXTERNAL_EMOJIS: import("../types/shared.js").Errors.MISSING_USE_EXTERNAL_EMOJIS;
                                MISSING_VIEW_AUDIT_LOG: import("../types/shared.js").Errors.MISSING_VIEW_AUDIT_LOG;
                                MISSING_VIEW_CHANNEL: import("../types/shared.js").Errors.MISSING_VIEW_CHANNEL;
                                MISSING_VIEW_GUILD_INSIGHTS: import("../types/shared.js").Errors.MISSING_VIEW_GUILD_INSIGHTS;
                                USERNAME_INVALID_CHARACTER: import("../types/shared.js").Errors.USERNAME_INVALID_CHARACTER;
                                USERNAME_INVALID_USERNAME: import("../types/shared.js").Errors.USERNAME_INVALID_USERNAME;
                                USERNAME_MAX_LENGTH: import("../types/shared.js").Errors.USERNAME_MAX_LENGTH;
                                USERNAME_MIN_LENGTH: import("../types/shared.js").Errors.USERNAME_MIN_LENGTH;
                                NONCE_TOO_LONG: import("../types/shared.js").Errors.NONCE_TOO_LONG;
                                INVITE_MAX_AGE_INVALID: import("../types/shared.js").Errors.INVITE_MAX_AGE_INVALID;
                                INVITE_MAX_USES_INVALID: import("../types/shared.js").Errors.INVITE_MAX_USES_INVALID;
                                RATE_LIMIT_RETRY_MAXED: import("../types/shared.js").Errors.RATE_LIMIT_RETRY_MAXED;
                                REQUEST_CLIENT_ERROR: import("../types/shared.js").Errors.REQUEST_CLIENT_ERROR;
                                REQUEST_SERVER_ERROR: import("../types/shared.js").Errors.REQUEST_SERVER_ERROR;
                                TOO_MANY_COMPONENTS: import("../types/shared.js").Errors.TOO_MANY_COMPONENTS;
                                TOO_MANY_ACTION_ROWS: import("../types/shared.js").Errors.TOO_MANY_ACTION_ROWS;
                                LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID: import("../types/shared.js").Errors.LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID;
                                COMPONENT_LABEL_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_LABEL_TOO_BIG;
                                COMPONENT_CUSTOM_ID_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_CUSTOM_ID_TOO_BIG;
                                BUTTON_REQUIRES_CUSTOM_ID: import("../types/shared.js").Errors.BUTTON_REQUIRES_CUSTOM_ID;
                                COMPONENT_SELECT_MUST_BE_ALONE: import("../types/shared.js").Errors.COMPONENT_SELECT_MUST_BE_ALONE;
                                COMPONENT_PLACEHOLDER_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_PLACEHOLDER_TOO_BIG;
                                COMPONENT_SELECT_MIN_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_LOW;
                                COMPONENT_SELECT_MIN_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_MANY;
                                COMPONENT_SELECT_MAX_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_LOW;
                                COMPONENT_SELECT_MAX_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_MANY;
                                COMPONENT_SELECT_OPTIONS_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_LOW;
                                COMPONENT_SELECT_OPTIONS_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_MANY;
                                SELECT_OPTION_LABEL_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_LABEL_TOO_BIG;
                                SELECT_OPTION_VALUE_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_VALUE_TOO_BIG;
                                SELECT_OPTION_TOO_MANY_DEFAULTS: import("../types/shared.js").Errors.SELECT_OPTION_TOO_MANY_DEFAULTS;
                                COMPONENT_SELECT_MIN_HIGHER_THAN_MAX: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_HIGHER_THAN_MAX;
                                CANNOT_ADD_USER_TO_ARCHIVED_THREADS: import("../types/shared.js").Errors.CANNOT_ADD_USER_TO_ARCHIVED_THREADS;
                                CANNOT_LEAVE_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_LEAVE_ARCHIVED_THREAD;
                                CANNOT_REMOVE_FROM_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_REMOVE_FROM_ARCHIVED_THREAD;
                                YOU_CAN_NOT_DM_THE_BOT_ITSELF: import("../types/shared.js").Errors.YOU_CAN_NOT_DM_THE_BOT_ITSELF;
                            };
                        };
                        events: import("../bot.js").EventHandlers;
                        applicationId: bigint;
                        token: string;
                        intents: import("../types/shared.js").GatewayIntents;
                        urlWSS: string;
                        utils: {
                            snowflakeToBigint: typeof import("../mod.js").snowflakeToBigint;
                            bigintToSnowflake: typeof import("../mod.js").bigintToSnowflake;
                            calculateShardId: typeof import("../mod.js").calculateShardId;
                            delay: typeof import("../mod.js").delay;
                            iconHashToBigInt: typeof import("../mod.js").iconHashToBigInt;
                            iconBigintToHash: typeof import("../mod.js").iconBigintToHash;
                            validateLength: typeof import("../mod.js").validateLength;
                            urlToBase64: typeof import("../util/urlToBase64.js").urlToBase64;
                            formatImageURL: typeof import("../mod.js").formatImageURL;
                            calculateBits: typeof import("../util/permissions.js").calculateBits;
                            calculatePermissions: typeof import("../util/permissions.js").calculatePermissions;
                        };
                        transformers: import("../bot.js").Transformers;
                        helpers: {
                            addToThread: (threadId: bigint, userId: bigint) => Promise<void>;
                            getActiveThreads: (guildId: bigint) => Promise<{
                                threads: Collection<bigint, import("./channel.js").Channel>;
                                members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                            }>;
                            getArchivedThreads: (channelId: bigint, options?: (import("../mod.js").ListArchivedThreads & {
                                type?: "private" | "public" | "privateJoinedThreads" | undefined;
                            }) | undefined) => Promise<{
                                threads: Collection<bigint, import("./channel.js").Channel>;
                                members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                                hasMore: boolean;
                            }>;
                            getThreadMember: (threadId: bigint, userId: bigint) => Promise<{
                                id: bigint | undefined;
                                userId: bigint | undefined;
                                joinTimestamp: number;
                                flags: number;
                            }>;
                            getThreadMembers: (threadId: bigint) => Promise<Collection<bigint | undefined, import("./threadMember.js").ThreadMember>>;
                            joinThread: (threadId: bigint) => Promise<void>;
                            leaveThread: (threadId: bigint) => Promise<void>;
                            removeThreadMember: (threadId: bigint, userId: bigint) => Promise<void>;
                            startThreadWithMessage: (channelId: bigint, messageId: bigint, options: import("../mod.js").StartThreadWithMessage) => Promise<import("./channel.js").Channel>;
                            startThreadWithoutMessage: (channelId: bigint, options: import("../mod.js").StartThreadWithoutMessage) => Promise<import("./channel.js").Channel>;
                            createForumPost: (channelId: bigint, options: import("../mod.js").CreateForumPostWithMessage) => Promise<import("./channel.js").Channel>;
                            createChannel: (guildId: bigint, options?: import("../mod.js").CreateGuildChannel | undefined, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                            createStageInstance: (options: import("../mod.js").CreateStageInstance) => Promise<import("./stageInstance.js").StageInstance>;
                            deleteChannel: (channelId: bigint, reason?: string | undefined) => Promise<void>;
                            deleteChannelOverwrite: (channelId: bigint, overwriteId: bigint) => Promise<void>;
                            deleteStageInstance: (channelId: bigint) => Promise<void>;
                            editChannel: (channelId: bigint, options: import("../mod.js").ModifyChannel, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                            editChannelOverwrite: (channelId: bigint, overwrite: import("../mod.js").OverwriteReadable) => Promise<void>;
                            followChannel: (sourceChannelId: bigint, targetChannelId: bigint) => Promise<bigint>;
                            getChannel: (channelId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                            getChannels: (guildId: bigint) => Promise<Collection<bigint, import("./channel.js").Channel>>;
                            getChannelWebhooks: (channelId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                            getPins: (channelId: bigint) => Promise<Message[]>;
                            getStageInstance: (channelId: bigint) => Promise<import("./stageInstance.js").StageInstance>;
                            startTyping: (channelId: bigint) => Promise<void>;
                            swapChannels: (guildId: bigint, channelPositions: import("../mod.js").ModifyGuildChannelPositions[]) => Promise<void>;
                            updateStageInstance: (channelId: bigint, data: import("../types/shared.js").AtLeastOne<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, {
                                topic: Pick<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, "topic">;
                            }>) => Promise<import("./stageInstance.js").StageInstance>;
                            updateBotVoiceState: (guildId: bigint, options: import("../mod.js").UpdateSelfVoiceState) => Promise<void>;
                            updateUserVoiceState: (guildId: bigint, options: import("../mod.js").UpdateOthersVoiceState) => Promise<void>;
                            addDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                            editDiscovery: (guildId: bigint, data: import("../mod.js").ModifyGuildDiscoveryMetadata) => Promise<{
                                guildId: bigint;
                                primaryCategoryId: number;
                                keywords: string[] | undefined;
                                emojiDiscoverabilityEnabled: boolean;
                                partnerActionedTimestamp: number | undefined;
                                partnerApplicationTimestamp: number | undefined;
                                categoryIds: number[];
                            }>;
                            getDiscovery: (guildId: bigint) => Promise<{
                                guildId: bigint;
                                primaryCategoryId: number;
                                keywords: string[] | undefined;
                                emojiDiscoverabilityEnabled: boolean;
                                partnerActionedTimestamp: number | undefined;
                                partnerApplicationTimestamp: number | undefined;
                                categoryIds: number[];
                            }>;
                            getDiscoveryCategories: () => Promise<Collection<number, import("../types/discord.js").DiscordDiscoveryCategory>>;
                            removeDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                            validDiscoveryTerm: (term: string) => Promise<boolean>;
                            createEmoji: (guildId: bigint, options: import("../mod.js").CreateGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                            deleteEmoji: (guildId: bigint, id: bigint, reason?: string | undefined) => Promise<void>;
                            editEmoji: (guildId: bigint, id: bigint, options: import("../mod.js").ModifyGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                            emojiUrl: (id: bigint, animated?: boolean | undefined) => string;
                            getEmoji: (guildId: bigint, emojiId: bigint) => Promise<import("./emoji.js").Emoji>;
                            getEmojis: (guildId: bigint) => Promise<Collection<bigint, import("./emoji.js").Emoji>>;
                            createScheduledEvent: (guildId: bigint, options: import("../mod.js").CreateScheduledEvent) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                            deleteScheduledEvent: (guildId: bigint, eventId: bigint) => Promise<void>;
                            editScheduledEvent: (guildId: bigint, eventId: bigint, options: Partial<import("../mod.js").EditScheduledEvent>) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                            getScheduledEvent: (guildId: bigint, eventId: bigint, options?: {
                                withUserCount?: boolean | undefined;
                            } | undefined) => Promise<import("./scheduledEvent.js").ScheduledEvent | undefined>;
                            getScheduledEvents: (guildId: bigint, options?: import("../mod.js").GetScheduledEvents | undefined) => Promise<Collection<bigint, import("./scheduledEvent.js").ScheduledEvent>>;
                            getScheduledEventUsers: (guildId: bigint, eventId: bigint, options?: (import("../mod.js").GetScheduledEventUsers & {
                                withMember: true;
                            }) | undefined) => Promise<Collection<bigint, {
                                user: User;
                                member: Member;
                            }>>;
                            getAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<import("./automodRule.js").AutoModerationRule>;
                            getAutomodRules: (guildId: bigint) => Promise<Collection<bigint, import("./automodRule.js").AutoModerationRule>>;
                            createAutomodRule: (guildId: bigint, options: import("../mod.js").CreateAutoModerationRuleOptions) => Promise<import("./automodRule.js").AutoModerationRule>;
                            editAutomodRule: (guildId: bigint, options: Partial<import("../mod.js").EditAutoModerationRuleOptions>) => Promise<import("./automodRule.js").AutoModerationRule>;
                            deleteAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<void>;
                            createGuild: (options: import("../mod.js").CreateGuild) => Promise<import("./guild.js").Guild>;
                            deleteGuild: (guildId: bigint) => Promise<void>;
                            editGuild: (guildId: bigint, options: import("../mod.js").ModifyGuild, shardId: number) => Promise<import("./guild.js").Guild>;
                            editWelcomeScreen: (guildId: bigint, options: import("../mod.js").ModifyGuildWelcomeScreen) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                            editWidget: (guildId: bigint, enabled: boolean, channelId?: string | null | undefined) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                            getAuditLogs: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => Promise<{
                                users: User[];
                                webhook: import("./webhook.js").Webhook[];
                                auditLogEntries: import("./auditLogEntry.js").AuditLogEntry[];
                                integrations: {
                                    id: bigint | undefined;
                                    name: string | undefined;
                                    type: "twitch" | "youtube" | "discord" | undefined;
                                    enabled: boolean | undefined;
                                    syncing: boolean | undefined;
                                    roleId: bigint | undefined;
                                    enableEmoticons: boolean | undefined;
                                    expireBehavior: import("../types/shared.js").IntegrationExpireBehaviors | undefined;
                                    expireGracePeriod: number | undefined;
                                    user: User | undefined;
                                    account: {
                                        id: bigint | undefined;
                                        name: string | undefined;
                                    };
                                    syncedAt: number | undefined;
                                    subscriberCount: number | undefined;
                                    revoked: boolean | undefined;
                                    application: {
                                        id: bigint;
                                        name: string;
                                        icon: bigint | undefined;
                                        description: string;
                                        bot: User | undefined;
                                    } | undefined;
                                }[];
                                threads: import("./channel.js").Channel[];
                                scheduledEvents: import("./scheduledEvent.js").ScheduledEvent[] | undefined;
                            }>;
                            getAvailableVoiceRegions: () => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                            getBan: (guildId: bigint, memberId: bigint) => Promise<{
                                reason: string | null;
                                user: User;
                            } | undefined>;
                            getBans: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => Promise<Collection<bigint, {
                                reason?: string | undefined;
                                user: User;
                            }>>;
                            getGuild: (guildId: bigint, options?: {
                                counts?: boolean | undefined;
                            } | undefined) => Promise<import("./guild.js").Guild | undefined>;
                            getGuildPreview: (guildId: bigint) => Promise<{
                                id: bigint;
                                name: string;
                                icon: string | undefined;
                                splash: string | undefined;
                                discoverySplash: string | undefined;
                                emojis: import("./emoji.js").Emoji[];
                                features: import("../types/shared.js").GuildFeatures[];
                                approximateMemberCount: number;
                                approximatePresenceCount: number;
                                description: string | undefined;
                                stickers: import("./sticker.js").Sticker[];
                            }>;
                            getPruneCount: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => Promise<number>;
                            getVanityUrl: (guildId: bigint) => Promise<{
                                uses: number | undefined;
                                code: string | undefined;
                            }>;
                            getVoiceRegions: (guildId: bigint) => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                            getWelcomeScreen: (guildId: bigint) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                            getWidget: (guildId: bigint) => Promise<import("./widget.js").GuildWidget>;
                            getWidgetImageURL: (guildId: bigint, options?: import("../mod.js").GetGuildWidgetImageQuery | undefined) => Promise<string>;
                            getWidgetSettings: (guildId: bigint) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                            guildBannerURL: (id: bigint, options: {
                                banner?: string | bigint | undefined;
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            }) => string | undefined;
                            guildIconURL: (id: bigint, icon: bigint | undefined, options?: {
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            } | undefined) => string | undefined;
                            guildSplashURL: (id: bigint, splash: bigint | undefined, options?: {
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            } | undefined) => string | undefined;
                            leaveGuild: (guildId: bigint) => Promise<void>;
                            deleteIntegration: (guildId: bigint, id: bigint) => Promise<void>;
                            getIntegrations: (guildId: bigint) => Promise<Collection<bigint, import("./integration.js").Integration>>;
                            createApplicationCommand: (options: import("../mod.js").CreateApplicationCommand | import("../mod.js").CreateContextApplicationCommand, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                            makeOptionsForCommand: () => import("../types/discord.js").DiscordApplicationCommandOption[];
                            isContextApplicationCommand: () => boolean;
                            deleteApplicationCommand: (id: bigint, guildId?: bigint | undefined) => Promise<void>;
                            deleteInteractionResponse: (token: string, messageId?: bigint | undefined) => Promise<void>;
                            editApplicationCommandPermissions: (guildId: bigint, commandId: bigint, bearerToken: string, options: import("../mod.js").ApplicationCommandPermissions[]) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                            editInteractionResponse: (token: string, options: import("../mod.js").EditWebhookMessage & {
                                messageId?: bigint | undefined;
                            }) => Promise<Message | undefined>;
                            getApplicationCommand: (commandId: bigint, options?: import("../mod.js").GetApplicationCommand | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                            getApplicationCommandPermission: (guildId: bigint, commandId: bigint) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                            getApplicationCommandPermissions: (guildId: bigint) => Promise<Collection<bigint, import("./applicationCommandPermission.js").ApplicationCommandPermission>>;
                            getApplicationCommands: (guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                            upsertApplicationCommand: (commandId: bigint, options: import("../types/shared.js").AtLeastOne<import("../mod.js").CreateContextApplicationCommand, {
                                type: Pick<import("../mod.js").CreateContextApplicationCommand, "type">;
                                description: Pick<import("../mod.js").CreateContextApplicationCommand, "description">;
                                name: Pick<import("../mod.js").CreateContextApplicationCommand, "name">;
                                nameLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "nameLocalizations"> | undefined;
                                descriptionLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "descriptionLocalizations"> | undefined;
                                defaultMemberPermissions?: Pick<import("../mod.js").CreateContextApplicationCommand, "defaultMemberPermissions"> | undefined;
                                dmPermission?: Pick<import("../mod.js").CreateContextApplicationCommand, "dmPermission"> | undefined;
                            }> | import("../types/shared.js").AtLeastOne<import("../mod.js").CreateApplicationCommand, {
                                name: Pick<import("../mod.js").CreateApplicationCommand, "name">;
                                nameLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "nameLocalizations"> | undefined;
                                description: Pick<import("../mod.js").CreateApplicationCommand, "description">;
                                descriptionLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "descriptionLocalizations"> | undefined;
                                type?: Pick<import("../mod.js").CreateApplicationCommand, "type"> | undefined;
                                options?: Pick<import("../mod.js").CreateApplicationCommand, "options"> | undefined;
                                defaultMemberPermissions?: Pick<import("../mod.js").CreateApplicationCommand, "defaultMemberPermissions"> | undefined;
                                dmPermission?: Pick<import("../mod.js").CreateApplicationCommand, "dmPermission"> | undefined;
                            }>, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                            upsertApplicationCommands: (options: (import("../mod.js").CreateContextApplicationCommand | import("../mod.js").UpsertApplicationCommands)[], guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                            deleteFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<void>;
                            editFollowupMessage: (interactionToken: string, messageId: bigint, options: import("../mod.js").EditWebhookMessage) => Promise<Message>;
                            getFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<Message>;
                            getOriginalInteractionResponse: (token: string) => Promise<Message>;
                            sendInteractionResponse: (id: bigint, token: string, options: import("../mod.js").InteractionResponse) => Promise<Message | undefined>;
                            verifySignature: () => {
                                isValid: boolean;
                                body: string;
                            };
                            createInvite: (channelId: bigint, options?: import("../mod.js").CreateChannelInvite | undefined) => Promise<{
                                code: string;
                                guildId: bigint | undefined;
                                channelId: bigint | undefined;
                                inviter: User | undefined;
                                targetType: import("../types/shared.js").TargetTypes | undefined;
                                targetUser: User | undefined;
                                targetApplicationId: bigint | undefined;
                                approximatePresenceCount: number | undefined;
                                approximateMemberCount: number | undefined;
                                expiresAt: number | undefined;
                            }>;
                            deleteInvite: (inviteCode: string) => Promise<void>;
                            getChannelInvites: (channelId: bigint) => Promise<Collection<string, {
                                uses: number;
                                maxUses: number;
                                maxAge: number;
                                temporary: boolean;
                                createdAt: number;
                            }>>;
                            getInvite: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => Promise<{
                                code: string;
                                guildId: bigint | undefined;
                                channelId: bigint | undefined;
                                inviter: User | undefined;
                                targetType: import("../types/shared.js").TargetTypes | undefined;
                                targetUser: User | undefined;
                                targetApplicationId: bigint | undefined;
                                approximatePresenceCount: number | undefined;
                                approximateMemberCount: number | undefined;
                                expiresAt: number | undefined;
                            }>;
                            getInvites: (guildId: bigint) => Promise<Collection<string, {
                                uses: number;
                                maxUses: number;
                                maxAge: number;
                                temporary: boolean;
                                createdAt: number;
                            }>>;
                            avatarURL: (userId: bigint, discriminator: string, options?: {
                                avatar: bigint | undefined;
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            } | undefined) => string;
                            banMember: (guildId: bigint, id: bigint, options?: import("../mod.js").CreateGuildBan | undefined) => Promise<void>;
                            editBotNickname: (guildId: bigint, options: {
                                nick: string | null;
                                reason?: string | undefined;
                            }) => Promise<string | undefined>;
                            editMember: (guildId: bigint, memberId: bigint, options: import("../mod.js").ModifyGuildMember) => Promise<Member>;
                            fetchMembers: (guildId: bigint, options?: Omit<import("../mod.js").RequestGuildMembers, "guildId"> | undefined) => Promise<void>;
                            getDmChannel: (userId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                            getMember: (guildId: bigint, id: bigint) => Promise<Member | undefined>;
                            getMembers: (guildId: bigint, options: import("../mod.js").ListGuildMembers) => Promise<Collection<bigint, Member>>;
                            kickMember: (guildId: bigint, memberId: bigint, reason?: string | undefined) => Promise<void>;
                            pruneMembers: (guildId: bigint, options: import("../mod.js").BeginGuildPrune) => Promise<number>;
                            searchMembers: (guildId: bigint, query: string, options?: Omit<import("../mod.js").SearchMembers, "query"> | undefined) => Promise<Collection<bigint, Member>>;
                            unbanMember: (guildId: bigint, id: bigint) => Promise<void>;
                            addReaction: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                            addReactions: (channelId: bigint, messageId: bigint, reactions: string[], ordered?: boolean | undefined) => Promise<void>;
                            deleteMessage: (channelId: bigint, messageId: bigint, reason?: string | undefined, delayMilliseconds?: number | undefined) => Promise<void>;
                            deleteMessages: (channelId: bigint, ids: bigint[], reason?: string | undefined) => Promise<void>;
                            editMessage: (channelId: bigint, messageId: bigint, content: import("../mod.js").EditMessage) => Promise<Message>;
                            getMessage: (channelId: bigint, id: bigint) => Promise<Message | undefined>;
                            getMessages: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => Promise<Collection<bigint, Message>>;
                            isGetMessagesAfter: () => boolean;
                            isGetMessagesBefore: () => boolean;
                            isGetMessagesAround: () => boolean;
                            isGetMessagesLimit: () => boolean;
                            getReactions: (channelId: bigint, messageId: bigint, reaction: string, options?: import("../mod.js").GetReactions | undefined) => Promise<Collection<bigint, User>>;
                            pinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                            publishMessage: (channelId: bigint, messageId: bigint) => Promise<Message>;
                            removeAllReactions: (channelId: bigint, messageId: bigint) => Promise<void>;
                            removeReaction: (channelId: bigint, messageId: bigint, reaction: string, options?: {
                                userId?: bigint | undefined;
                            } | undefined) => Promise<void>;
                            removeReactionEmoji: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                            sendMessage: (channelId: bigint, content: import("../mod.js").CreateMessage) => Promise<Message>;
                            unpinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                            editBotProfile: (options: {
                                username?: string | undefined;
                                botAvatarURL?: string | null | undefined;
                            }) => Promise<User>;
                            editBotStatus: (data: import("../mod.js").StatusUpdate) => Promise<void>;
                            editShardStatus: (shardId: number, data: import("../mod.js").StatusUpdate) => void;
                            getGatewayBot: () => Promise<import("./gatewayBot.js").GetGatewayBot>;
                            getUser: (userId: bigint) => Promise<User | undefined>;
                            nitroStickerPacks: () => Promise<import("./sticker.js").StickerPack[]>;
                            getApplicationInfo: () => Promise<import("./application.js").Application>;
                            addRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                            createRole: (guildId: bigint, options: import("../mod.js").CreateGuildRole, reason?: string | undefined) => Promise<Role>;
                            deleteRole: (guildId: bigint, id: bigint) => Promise<void>;
                            editRole: (guildId: bigint, id: bigint, options: import("../mod.js").EditGuildRole) => Promise<Role>;
                            getRoles: (guildId: bigint) => Promise<Collection<bigint, Role>>;
                            modifyRolePositions: (guildId: bigint, options: import("../mod.js").ModifyRolePositions[]) => Promise<Collection<bigint, Role>>;
                            removeRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                            createGuildFromTemplate: (templateCode: string, data: import("../mod.js").CreateGuildFromTemplate) => Promise<import("./guild.js").Guild>;
                            createGuildTemplate: (guildId: bigint, data: import("../mod.js").CreateTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                            deleteGuildTemplate: (guildId: bigint, templateCode: string) => Promise<void>;
                            editGuildTemplate: (guildId: bigint, templateCode: string, data: import("../mod.js").ModifyGuildTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                            getGuildTemplates: (guildId: bigint) => Promise<Collection<string, import("./template.js").Template>>;
                            getTemplate: (templateCode: string) => Promise<import("./template.js").Template>;
                            syncGuildTemplate: (guildId: bigint, templateCode: string) => Promise<import("../types/discord.js").DiscordTemplate>;
                            connectToVoiceChannel: (guildId: bigint, channelId: bigint, options?: import("../types/shared.js").AtLeastOne<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, {
                                selfDeaf: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfDeaf">;
                                selfMute: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfMute">;
                            }> | undefined) => Promise<void>;
                            createWebhook: (channelId: bigint, options: import("../mod.js").CreateWebhook) => Promise<import("./webhook.js").Webhook>;
                            deleteWebhook: (webhookId: bigint, reason?: string | undefined) => Promise<void>;
                            deleteWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").DeleteWebhookMessageOptions | undefined) => Promise<void>;
                            deleteWebhookWithToken: (webhookId: bigint, webhookToken: string) => Promise<void>;
                            editWebhook: (webhookId: bigint, options: import("../mod.js").ModifyWebhook) => Promise<import("./webhook.js").Webhook>;
                            editWebhookMessage: (webhookId: bigint, webhookToken: string, options: import("../mod.js").EditWebhookMessage & {
                                messageId?: bigint | undefined;
                                threadId?: bigint | undefined;
                            }) => Promise<Message>;
                            editWebhookWithToken: (webhookId: bigint, webhookToken: string, options: Omit<import("../mod.js").ModifyWebhook, "channelId">) => Promise<import("./webhook.js").Webhook>;
                            getWebhook: (webhookId: bigint) => Promise<import("./webhook.js").Webhook | undefined>;
                            getWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").GetWebhookMessageOptions | undefined) => Promise<Message>;
                            getWebhooks: (guildId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                            getWebhookWithToken: (webhookId: bigint, token: string) => Promise<import("./webhook.js").Webhook>;
                            sendWebhook: (webhookId: bigint, webhookToken: string, options: import("../mod.js").ExecuteWebhook) => Promise<Message | undefined>;
                        };
                        rest: {
                            version: number;
                            token: string;
                            debug: (text: string) => unknown;
                            customUrl: string;
                            maxRetryCount: number;
                            secretKey: string;
                            checkRateLimits: typeof import("../mod.js").checkRateLimits;
                            cleanupQueues: typeof import("../mod.js").cleanupQueues;
                            processQueue: typeof import("../mod.js").processQueue;
                            processRateLimitedPaths: typeof import("../mod.js").processRateLimitedPaths;
                            processRequestHeaders: typeof import("../mod.js").processRequestHeaders;
                            processRequest: typeof import("../mod.js").processRequest;
                            createRequestBody: typeof import("../mod.js").createRequestBody;
                            runMethod: typeof import("../mod.js").runMethod;
                            simplifyUrl: typeof import("../mod.js").simplifyUrl;
                            processGlobalQueue: typeof import("../mod.js").processGlobalQueue;
                            convertRestError: typeof import("../mod.js").convertRestError;
                            sendRequest: typeof import("../mod.js").sendRequest;
                            invalidRequests: number;
                            maxInvalidRequests: number;
                            invalidRequestsInterval: number;
                            invalidRequestsTimeoutId: number;
                            invalidRequestsSafetyAmount: number;
                            invalidRequestFrozenAt: number;
                            invalidRequestErrorStatuses: number[];
                            pathQueues: Map<string, {
                                isWaiting: boolean;
                                requests: {
                                    request: import("../mod.js").RestRequest;
                                    payload: import("../mod.js").RestPayload;
                                }[];
                            }>;
                            processingQueue: boolean;
                            processingRateLimitedPaths: boolean;
                            globallyRateLimited: boolean;
                            globalQueue: {
                                request: import("../mod.js").RestRequest;
                                payload: import("../mod.js").RestPayload;
                                basicURL: string;
                                urlToUse: string;
                            }[];
                            globalQueueProcessing: boolean;
                            rateLimitedPaths: Map<string, import("../mod.js").RestRateLimitedPath>;
                        };
                        gateway: {
                            stop: (code: number, reason: string) => Promise<void>;
                            gatewayBot: {
                                url: string;
                                shards: number;
                                sessionStartLimit: {
                                    total: number;
                                    remaining: number;
                                    resetAfter: number;
                                    maxConcurrency: number;
                                };
                            };
                            spawnShardDelay: number;
                            shardsPerWorker: number;
                            totalWorkers: number;
                            firstShardId: number;
                            lastShardId: number;
                            buckets: Collection<number, {
                                workers: {
                                    id: number;
                                    queue: number[];
                                }[];
                                leak: import("../util/bucket.js").LeakyBucket;
                            }>;
                            prepareBuckets: () => void;
                            spawnShards: () => void;
                            tellWorkerToIdentify: (workerId: number, shardId: number, bucketId: number) => Promise<void>;
                            debug: (text: import("../mod.js").GatewayDebugEvents, ...args: any[]) => unknown;
                            calculateTotalShards: () => number;
                            calculateWorkerId: (shardId: number) => number;
                            manager: {
                                shards: Collection<number, {
                                    gatewayConfig: import("../mod.js").ShardGatewayConfig;
                                    heart: import("../mod.js").ShardHeart;
                                    id: number;
                                    maxRequestsPerRateLimitTick: number;
                                    previousSequenceNumber: number | null;
                                    rateLimitResetInterval: number;
                                    sessionId: string | undefined;
                                    socket: import("ws") | undefined;
                                    state: import("../mod.js").ShardState;
                                    totalShards: number;
                                    events: import("../mod.js").ShardEvents;
                                    calculateSafeRequests: () => number;
                                    close: (code: number, reason: string) => void;
                                    connect: () => Promise<void>;
                                    identify: () => Promise<void>;
                                    isOpen: () => boolean;
                                    makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                                    resume: () => Promise<void>;
                                    send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                                    shutdown: () => Promise<void>;
                                    bucket: import("../util/bucket.js").LeakyBucket;
                                    handleClose: (close: CloseEvent) => Promise<void>;
                                    handleMessage: (message: MessageEvent<any>) => Promise<void>;
                                    requestIdentify: () => Promise<void>;
                                    offlineSendQueue: ((_?: unknown) => void)[];
                                    resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                    startHeartbeating: (interval: number) => void;
                                    stopHeartbeating: () => void;
                                }>;
                                gatewayConfig: {
                                    url?: string | undefined;
                                    version?: number | undefined;
                                    compress?: boolean | undefined;
                                    intents?: number | undefined;
                                    properties?: {
                                        browser: string;
                                        os: string;
                                        device: string;
                                    } | undefined;
                                    token: string;
                                };
                                totalShards: number;
                                createShardOptions: {
                                    state?: import("../mod.js").ShardState | undefined;
                                    close?: {} | undefined;
                                    resume?: {} | undefined;
                                    connect?: {} | undefined;
                                    calculateSafeRequests?: {} | undefined;
                                    handleClose?: {} | undefined;
                                    handleMessage?: {} | undefined;
                                    identify?: {} | undefined;
                                    isOpen?: {} | undefined;
                                    makePresence?: {} | undefined;
                                    maxRequestsPerRateLimitTick?: number | undefined;
                                    previousSequenceNumber?: number | undefined;
                                    rateLimitResetInterval?: number | undefined;
                                    send?: {} | undefined;
                                    shutdown?: {} | undefined;
                                    startHeartbeating?: {} | undefined;
                                    stopHeartbeating?: {} | undefined;
                                    heart?: {
                                        intervalId?: number | undefined;
                                        lastAck?: number | undefined;
                                        lastBeat?: number | undefined;
                                        rtt?: number | undefined;
                                        timeoutId?: number | undefined;
                                        interval: number;
                                        acknowledged: boolean;
                                    } | undefined;
                                    bucket?: {
                                        max: number;
                                        waiting: ((_?: unknown) => void)[];
                                        refillInterval: number;
                                        refillAmount: number;
                                        tokens: () => number;
                                        acquire: (amount: number, highPriority?: boolean | undefined) => Promise<void>;
                                        nextRefill: () => number;
                                        lastRefill: number;
                                        allowAcquire: boolean;
                                        tokensState: number;
                                    } | undefined;
                                    offlineSendQueue?: {
                                        d?: unknown;
                                        op: import("../types/shared.js").GatewayOpcodes;
                                    }[] | undefined;
                                    resolves?: {
                                        [Symbol.toStringTag]: string;
                                        [Symbol.iterator]: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                        forEach: (callbackfn: (value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void, key: "READY" | "RESUMED" | "INVALID_SESSION", map: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>) => void, thisArg?: any) => void;
                                        entries: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                        keys: () => IterableIterator<"READY" | "RESUMED" | "INVALID_SESSION">;
                                        values: () => IterableIterator<(payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                        set: (key: "READY" | "RESUMED" | "INVALID_SESSION", value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void) => Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                        clear: () => void;
                                        size: number;
                                        get: (key: "READY" | "RESUMED" | "INVALID_SESSION") => ((payload: import("../types/discord.js").DiscordGatewayPayload) => void) | undefined;
                                        delete: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                                        has: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                                    } | undefined;
                                    events: {
                                        connected?: {} | undefined;
                                        connecting?: {} | undefined;
                                        disconnected?: {} | undefined;
                                        heartbeat?: {} | undefined;
                                        heartbeatAck?: {} | undefined;
                                        hello?: {} | undefined;
                                        invalidSession?: {} | undefined;
                                        resuming?: {} | undefined;
                                        resumed?: {} | undefined;
                                        requestedReconnect?: {} | undefined;
                                        identifying?: {} | undefined;
                                        identified?: {} | undefined;
                                        message: (shard: {
                                            gatewayConfig: import("../mod.js").ShardGatewayConfig;
                                            heart: import("../mod.js").ShardHeart;
                                            id: number;
                                            maxRequestsPerRateLimitTick: number;
                                            previousSequenceNumber: number | null;
                                            rateLimitResetInterval: number;
                                            sessionId: string | undefined;
                                            socket: import("ws") | undefined;
                                            state: import("../mod.js").ShardState;
                                            totalShards: number;
                                            events: import("../mod.js").ShardEvents;
                                            calculateSafeRequests: () => number;
                                            close: (code: number, reason: string) => void;
                                            connect: () => Promise<void>;
                                            identify: () => Promise<void>;
                                            isOpen: () => boolean;
                                            makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                                            resume: () => Promise<void>;
                                            send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                                            shutdown: () => Promise<void>;
                                            bucket: import("../util/bucket.js").LeakyBucket;
                                            handleClose: (close: CloseEvent) => Promise<void>;
                                            handleMessage: (message: MessageEvent<any>) => Promise<void>;
                                            requestIdentify: () => Promise<void>;
                                            offlineSendQueue: ((_?: unknown) => void)[];
                                            resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                            startHeartbeating: (interval: number) => void;
                                            stopHeartbeating: () => void;
                                        }, payload: import("../types/discord.js").DiscordGatewayPayload) => unknown;
                                    };
                                };
                                requestIdentify: (shardId: number) => Promise<void>;
                                identify: (shardId: number) => Promise<void>;
                                kill: (shardId: number) => Promise<void>;
                            };
                        };
                        handlers: {
                            READY: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_PINS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_BAN_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_BAN_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_EMOJIS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_INTEGRATIONS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBERS_CHUNK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_ROLE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_ROLE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_ROLE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_USER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_USER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTERACTION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INVITE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INVITE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_DELETE_BULK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_REMOVE_ALL: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_REMOVE_EMOJI: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            PRESENCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            TYPING_START: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            USER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            VOICE_SERVER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            VOICE_STATE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            WEBHOOKS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTEGRATION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTEGRATION_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTEGRATION_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            STAGE_INSTANCE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            STAGE_INSTANCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            STAGE_INSTANCE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_LIST_SYNC: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_MEMBERS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_LOADED_DD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                        };
                        activeGuildIds: Set<bigint>;
                        cache: {
                            unrepliedInteractions: Set<bigint>;
                            fetchAllMembersProcessingRequests: Map<string, Function>;
                        };
                        enabledPlugins: Set<string>;
                    } | undefined;
                    intervalId?: number | undefined;
                    filter: (value: Member, key: bigint, ...args: any[]) => boolean;
                    interval: number;
                } | undefined;
                [Symbol.toStringTag]: string;
                [Symbol.iterator]: () => IterableIterator<[bigint, Member]>;
                every: (callback: (value: Member, key: bigint) => boolean) => boolean;
                some: (callback: (value: Member, key: bigint) => boolean) => boolean;
                forEach: (callbackfn: (value: Member, key: bigint, map: Map<bigint, Member>) => void, thisArg?: any) => void;
                map: <T_2>(callback: (value: Member, key: bigint) => T_2) => T_2[];
                filter: (callback: (value: Member, key: bigint) => boolean) => Collection<bigint, Member>;
                reduce: <T_3>(callback: (accumulator: T_3, value: Member, key: bigint) => T_3, initialValue?: T_3 | undefined) => T_3;
                find: (callback: (value: Member, key: bigint) => boolean) => Member | undefined;
                entries: () => IterableIterator<[bigint, Member]>;
                keys: () => IterableIterator<bigint>;
                values: () => IterableIterator<Member>;
                set: (key: bigint, value: Member) => Collection<bigint, Member>;
                clear: () => void;
                size: number;
                get: (key: bigint) => Member | undefined;
                startSweeper: (options: import("../util/collection.js").CollectionSweeper<bigint, Member>) => number;
                stopSweeper: () => void;
                changeSweeperInterval: (newInterval: number) => void;
                changeSweeperFilter: (newFilter: (value: Member, key: bigint, bot: Bot) => boolean) => void;
                forceSet: (key: bigint, value: Member) => Collection<bigint, Member>;
                array: () => Member[];
                first: () => Member | undefined;
                last: () => Member | undefined;
                random: () => Member | undefined;
                delete: (key: bigint) => boolean;
                has: (key: bigint) => boolean;
            } | undefined;
            channels?: {
                maxSize?: number | undefined;
                sweeper?: {
                    bot?: {
                        handleDiscordPayload?: {} | undefined;
                        botGatewayData?: {
                            url: string;
                            shards: number;
                            sessionStartLimit: {
                                total: number;
                                remaining: number;
                                resetAfter: number;
                                maxConcurrency: number;
                            };
                        } | undefined;
                        id: bigint;
                        constants: {
                            DISCORDENO_VERSION: string;
                            USER_AGENT: string;
                            BASE_URL: string;
                            CDN_URL: string;
                            routes: {
                                GATEWAY_BOT: () => string;
                                AUTOMOD_RULES: (guildId: bigint) => string;
                                AUTOMOD_RULE: (guildId: bigint, ruleId: bigint) => string;
                                CHANNEL: (channelId: bigint) => string;
                                CHANNEL_MESSAGE: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_MESSAGES: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => string;
                                CHANNEL_PIN: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_PINS: (channelId: bigint) => string;
                                CHANNEL_BULK_DELETE: (channelId: bigint) => string;
                                CHANNEL_INVITES: (channelId: bigint) => string;
                                CHANNEL_WEBHOOKS: (channelId: bigint) => string;
                                CHANNEL_MESSAGE_REACTION_ME: (channelId: bigint, messageId: bigint, emoji: string) => string;
                                CHANNEL_MESSAGE_REACTION_USER: (channelId: bigint, messageId: bigint, emoji: string, userId: bigint) => string;
                                CHANNEL_MESSAGE_REACTIONS: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_MESSAGE_REACTION: (channelId: bigint, messageId: bigint, emoji: string, options?: import("../mod.js").GetReactions | undefined) => string;
                                CHANNEL_FOLLOW: (channelId: bigint) => string;
                                CHANNEL_MESSAGE_CROSSPOST: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_OVERWRITE: (channelId: bigint, overwriteId: bigint) => string;
                                CHANNEL_TYPING: (channelId: bigint) => string;
                                THREAD_START_PUBLIC: (channelId: bigint, messageId: bigint) => string;
                                THREAD_START_PRIVATE: (channelId: bigint) => string;
                                THREAD_ACTIVE: (guildId: bigint) => string;
                                THREAD_MEMBERS: (channelId: bigint) => string;
                                THREAD_ME: (channelId: bigint) => string;
                                THREAD_USER: (channelId: bigint, userId: bigint) => string;
                                THREAD_ARCHIVED: (channelId: bigint) => string;
                                THREAD_ARCHIVED_PUBLIC: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                                THREAD_ARCHIVED_PRIVATE: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                                THREAD_ARCHIVED_PRIVATE_JOINED: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                                FORUM_START: (channelId: bigint) => string;
                                GUILD: (guildId: bigint, withCounts?: boolean | undefined) => string;
                                GUILDS: () => string;
                                GUILD_AUDIT_LOGS: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => string;
                                GUILD_BAN: (guildId: bigint, userId: bigint) => string;
                                GUILD_BANS: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => string;
                                GUILD_BANNER: (guildId: bigint, icon: string) => string;
                                GUILD_CHANNELS: (guildId: bigint) => string;
                                GUILD_WIDGET: (guildId: bigint) => string;
                                GUILD_WIDGET_JSON: (guildId: bigint) => string;
                                GUILD_WIDGET_IMAGE: (guildId: bigint, style?: "shield" | "banner1" | "banner2" | "banner3" | "banner4" | undefined) => string;
                                GUILD_EMOJI: (guildId: bigint, emojiId: bigint) => string;
                                GUILD_EMOJIS: (guildId: bigint) => string;
                                GUILD_ICON: (guildId: bigint, icon: string) => string;
                                GUILD_INTEGRATION: (guildId: bigint, integrationId: bigint) => string;
                                GUILD_INTEGRATION_SYNC: (guildId: bigint, integrationId: bigint) => string;
                                GUILD_INTEGRATIONS: (guildId: bigint) => string;
                                GUILD_INVITES: (guildId: bigint) => string;
                                GUILD_LEAVE: (guildId: bigint) => string;
                                GUILD_MEMBER: (guildId: bigint, userId: bigint) => string;
                                GUILD_MEMBERS: (guildId: bigint, options?: import("../mod.js").ListGuildMembers | undefined) => string;
                                GUILD_MEMBER_ROLE: (guildId: bigint, memberId: bigint, roleId: bigint) => string;
                                GUILD_MEMBERS_SEARCH: (guildId: bigint, query: string, options?: {
                                    limit?: number | undefined;
                                } | undefined) => string;
                                GUILD_PRUNE: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => string;
                                GUILD_REGIONS: (guildId: bigint) => string;
                                GUILD_ROLE: (guildId: bigint, roleId: bigint) => string;
                                GUILD_ROLES: (guildId: bigint) => string;
                                GUILD_SPLASH: (guildId: bigint, icon: string) => string;
                                GUILD_VANITY_URL: (guildId: bigint) => string;
                                GUILD_WEBHOOKS: (guildId: bigint) => string;
                                TEMPLATE: (code: string) => string;
                                GUILD_TEMPLATE: (guildId: bigint, code: string) => string;
                                GUILD_TEMPLATES: (guildId: bigint) => string;
                                GUILD_PREVIEW: (guildId: bigint) => string;
                                UPDATE_VOICE_STATE: (guildId: bigint, userId?: bigint | undefined) => string;
                                GUILD_WELCOME_SCREEN: (guildId: bigint) => string;
                                GUILD_SCHEDULED_EVENTS: (guildId: bigint, withUserCount?: boolean | undefined) => string;
                                GUILD_SCHEDULED_EVENT: (guildId: bigint, eventId: bigint, withUserCount?: boolean | undefined) => string;
                                GUILD_SCHEDULED_EVENT_USERS: (guildId: bigint, eventId: bigint, options?: import("../mod.js").GetScheduledEventUsers | undefined) => string;
                                VOICE_REGIONS: () => string;
                                INVITE: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => string;
                                WEBHOOK: (webhookId: bigint, token: string, options?: {
                                    wait?: boolean | undefined;
                                    threadId?: bigint | undefined;
                                } | undefined) => string;
                                WEBHOOK_ID: (webhookId: bigint) => string;
                                WEBHOOK_MESSAGE: (webhookId: bigint, token: string, messageId: bigint, options?: {
                                    threadId?: bigint | undefined;
                                } | undefined) => string;
                                WEBHOOK_MESSAGE_ORIGINAL: (webhookId: bigint, token: string, options?: {
                                    threadId?: bigint | undefined;
                                } | undefined) => string;
                                WEBHOOK_SLACK: (webhookId: bigint, token: string) => string;
                                WEBHOOK_GITHUB: (webhookId: bigint, token: string) => string;
                                COMMANDS: (applicationId: bigint) => string;
                                COMMANDS_GUILD: (applicationId: bigint, guildId: bigint) => string;
                                COMMANDS_PERMISSIONS: (applicationId: bigint, guildId: bigint) => string;
                                COMMANDS_PERMISSION: (applicationId: bigint, guildId: bigint, commandId: bigint) => string;
                                COMMANDS_ID: (applicationId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                                COMMANDS_GUILD_ID: (applicationId: bigint, guildId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                                INTERACTION_ID_TOKEN: (interactionId: bigint, token: string) => string;
                                INTERACTION_ORIGINAL_ID_TOKEN: (interactionId: bigint, token: string) => string;
                                INTERACTION_ID_TOKEN_MESSAGE_ID: (applicationId: bigint, token: string, messageId: bigint) => string;
                                USER: (userId: bigint) => string;
                                USER_BOT: () => string;
                                USER_GUILDS: () => string;
                                USER_AVATAR: (userId: bigint, icon: string) => string;
                                USER_DEFAULT_AVATAR: (icon: number) => string;
                                USER_DM: () => string;
                                USER_CONNECTIONS: () => string;
                                USER_NICK: (guildId: bigint) => string;
                                DISCOVERY_CATEGORIES: () => string;
                                DISCOVERY_VALID_TERM: (term: string) => string;
                                DISCOVERY_METADATA: (guildId: bigint) => string;
                                DISCOVERY_SUBCATEGORY: (guildId: bigint, categoryId: number) => string;
                                OAUTH2_APPLICATION: () => string;
                                STAGE_INSTANCES: () => string;
                                STAGE_INSTANCE: (channelId: bigint) => string;
                                NITRO_STICKER_PACKS: () => string;
                            };
                            regexes: {
                                SLASH_COMMANDS_NAME_REGEX: RegExp;
                                CONTEXT_MENU_COMMANDS_NAME_REGEX: RegExp;
                                CHANNEL_MENTION_REGEX: RegExp;
                                DISCORD_SNOWFLAKE_REGEX: RegExp;
                            };
                            Errors: {
                                REQUEST_UNKNOWN_ERROR: import("../types/shared.js").Errors.REQUEST_UNKNOWN_ERROR;
                                GUILD_NOT_FOUND: import("../types/shared.js").Errors.GUILD_NOT_FOUND;
                                RULES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.RULES_CHANNEL_CANNOT_BE_DELETED;
                                UPDATES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.UPDATES_CHANNEL_CANNOT_BE_DELETED;
                                NICKNAMES_MAX_LENGTH: import("../types/shared.js").Errors.NICKNAMES_MAX_LENGTH;
                                MEMBER_NOT_IN_VOICE_CHANNEL: import("../types/shared.js").Errors.MEMBER_NOT_IN_VOICE_CHANNEL;
                                MESSAGE_MAX_LENGTH: import("../types/shared.js").Errors.MESSAGE_MAX_LENGTH;
                                BOTS_HIGHEST_ROLE_TOO_LOW: import("../types/shared.js").Errors.BOTS_HIGHEST_ROLE_TOO_LOW;
                                CHANNEL_NOT_FOUND: import("../types/shared.js").Errors.CHANNEL_NOT_FOUND;
                                CHANNEL_NOT_IN_GUILD: import("../types/shared.js").Errors.CHANNEL_NOT_IN_GUILD;
                                CHANNEL_NOT_TEXT_BASED: import("../types/shared.js").Errors.CHANNEL_NOT_TEXT_BASED;
                                CHANNEL_NOT_STAGE_VOICE: import("../types/shared.js").Errors.CHANNEL_NOT_STAGE_VOICE;
                                INVALID_TOPIC_LENGTH: import("../types/shared.js").Errors.INVALID_TOPIC_LENGTH;
                                GUILD_NOT_DISCOVERABLE: import("../types/shared.js").Errors.GUILD_NOT_DISCOVERABLE;
                                GUILD_WIDGET_NOT_ENABLED: import("../types/shared.js").Errors.GUILD_WIDGET_NOT_ENABLED;
                                MEMBER_NOT_FOUND: import("../types/shared.js").Errors.MEMBER_NOT_FOUND;
                                MEMBER_SEARCH_LIMIT_TOO_HIGH: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_HIGH;
                                MEMBER_SEARCH_LIMIT_TOO_LOW: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_LOW;
                                PRUNE_MAX_DAYS: import("../types/shared.js").Errors.PRUNE_MAX_DAYS;
                                ROLE_NOT_FOUND: import("../types/shared.js").Errors.ROLE_NOT_FOUND;
                                INVALID_THREAD_PARENT_CHANNEL_TYPE: import("../types/shared.js").Errors.INVALID_THREAD_PARENT_CHANNEL_TYPE;
                                GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS: import("../types/shared.js").Errors.GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS;
                                NOT_A_THREAD_CHANNEL: import("../types/shared.js").Errors.NOT_A_THREAD_CHANNEL;
                                MISSING_MANAGE_THREADS_AND_NOT_MEMBER: import("../types/shared.js").Errors.MISSING_MANAGE_THREADS_AND_NOT_MEMBER;
                                CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD: import("../types/shared.js").Errors.CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD;
                                HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS: import("../types/shared.js").Errors.HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS;
                                INVALID_GET_MESSAGES_LIMIT: import("../types/shared.js").Errors.INVALID_GET_MESSAGES_LIMIT;
                                DELETE_MESSAGES_MIN: import("../types/shared.js").Errors.DELETE_MESSAGES_MIN;
                                PRUNE_MIN_DAYS: import("../types/shared.js").Errors.PRUNE_MIN_DAYS;
                                INVALID_SLASH_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_DESCRIPTION;
                                INVALID_SLASH_NAME: import("../types/shared.js").Errors.INVALID_SLASH_NAME;
                                INVALID_SLASH_OPTIONS: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS;
                                INVALID_SLASH_OPTIONS_CHOICES: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICES;
                                TOO_MANY_SLASH_OPTIONS: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTIONS;
                                INVALID_SLASH_OPTION_CHOICE_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_CHOICE_NAME;
                                INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE;
                                TOO_MANY_SLASH_OPTION_CHOICES: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTION_CHOICES;
                                ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES: import("../types/shared.js").Errors.ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES;
                                INVALID_SLASH_OPTION_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_NAME;
                                INVALID_SLASH_OPTION_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_DESCRIPTION;
                                INVALID_CONTEXT_MENU_COMMAND_NAME: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_NAME;
                                INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION;
                                INVALID_WEBHOOK_NAME: import("../types/shared.js").Errors.INVALID_WEBHOOK_NAME;
                                INVALID_WEBHOOK_OPTIONS: import("../types/shared.js").Errors.INVALID_WEBHOOK_OPTIONS;
                                MISSING_ADD_REACTIONS: import("../types/shared.js").Errors.MISSING_ADD_REACTIONS;
                                MISSING_ADMINISTRATOR: import("../types/shared.js").Errors.MISSING_ADMINISTRATOR;
                                MISSING_ATTACH_FILES: import("../types/shared.js").Errors.MISSING_ATTACH_FILES;
                                MISSING_BAN_MEMBERS: import("../types/shared.js").Errors.MISSING_BAN_MEMBERS;
                                MISSING_CHANGE_NICKNAME: import("../types/shared.js").Errors.MISSING_CHANGE_NICKNAME;
                                MISSING_CONNECT: import("../types/shared.js").Errors.MISSING_CONNECT;
                                MISSING_CREATE_INSTANT_INVITE: import("../types/shared.js").Errors.MISSING_CREATE_INSTANT_INVITE;
                                MISSING_DEAFEN_MEMBERS: import("../types/shared.js").Errors.MISSING_DEAFEN_MEMBERS;
                                MISSING_EMBED_LINKS: import("../types/shared.js").Errors.MISSING_EMBED_LINKS;
                                MISSING_INTENT_GUILD_MEMBERS: import("../types/shared.js").Errors.MISSING_INTENT_GUILD_MEMBERS;
                                MISSING_KICK_MEMBERS: import("../types/shared.js").Errors.MISSING_KICK_MEMBERS;
                                MISSING_MANAGE_CHANNELS: import("../types/shared.js").Errors.MISSING_MANAGE_CHANNELS;
                                MISSING_MANAGE_EMOJIS: import("../types/shared.js").Errors.MISSING_MANAGE_EMOJIS;
                                MISSING_MANAGE_GUILD: import("../types/shared.js").Errors.MISSING_MANAGE_GUILD;
                                MISSING_MANAGE_MESSAGES: import("../types/shared.js").Errors.MISSING_MANAGE_MESSAGES;
                                MISSING_MANAGE_NICKNAMES: import("../types/shared.js").Errors.MISSING_MANAGE_NICKNAMES;
                                MISSING_MANAGE_ROLES: import("../types/shared.js").Errors.MISSING_MANAGE_ROLES;
                                MISSING_MANAGE_WEBHOOKS: import("../types/shared.js").Errors.MISSING_MANAGE_WEBHOOKS;
                                MISSING_MENTION_EVERYONE: import("../types/shared.js").Errors.MISSING_MENTION_EVERYONE;
                                MISSING_MOVE_MEMBERS: import("../types/shared.js").Errors.MISSING_MOVE_MEMBERS;
                                MISSING_MUTE_MEMBERS: import("../types/shared.js").Errors.MISSING_MUTE_MEMBERS;
                                MISSING_PRIORITY_SPEAKER: import("../types/shared.js").Errors.MISSING_PRIORITY_SPEAKER;
                                MISSING_READ_MESSAGE_HISTORY: import("../types/shared.js").Errors.MISSING_READ_MESSAGE_HISTORY;
                                MISSING_SEND_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_MESSAGES;
                                MISSING_SEND_TTS_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_TTS_MESSAGES;
                                MISSING_SPEAK: import("../types/shared.js").Errors.MISSING_SPEAK;
                                MISSING_STREAM: import("../types/shared.js").Errors.MISSING_STREAM;
                                MISSING_USE_VAD: import("../types/shared.js").Errors.MISSING_USE_VAD;
                                MISSING_USE_EXTERNAL_EMOJIS: import("../types/shared.js").Errors.MISSING_USE_EXTERNAL_EMOJIS;
                                MISSING_VIEW_AUDIT_LOG: import("../types/shared.js").Errors.MISSING_VIEW_AUDIT_LOG;
                                MISSING_VIEW_CHANNEL: import("../types/shared.js").Errors.MISSING_VIEW_CHANNEL;
                                MISSING_VIEW_GUILD_INSIGHTS: import("../types/shared.js").Errors.MISSING_VIEW_GUILD_INSIGHTS;
                                USERNAME_INVALID_CHARACTER: import("../types/shared.js").Errors.USERNAME_INVALID_CHARACTER;
                                USERNAME_INVALID_USERNAME: import("../types/shared.js").Errors.USERNAME_INVALID_USERNAME;
                                USERNAME_MAX_LENGTH: import("../types/shared.js").Errors.USERNAME_MAX_LENGTH;
                                USERNAME_MIN_LENGTH: import("../types/shared.js").Errors.USERNAME_MIN_LENGTH;
                                NONCE_TOO_LONG: import("../types/shared.js").Errors.NONCE_TOO_LONG;
                                INVITE_MAX_AGE_INVALID: import("../types/shared.js").Errors.INVITE_MAX_AGE_INVALID;
                                INVITE_MAX_USES_INVALID: import("../types/shared.js").Errors.INVITE_MAX_USES_INVALID;
                                RATE_LIMIT_RETRY_MAXED: import("../types/shared.js").Errors.RATE_LIMIT_RETRY_MAXED;
                                REQUEST_CLIENT_ERROR: import("../types/shared.js").Errors.REQUEST_CLIENT_ERROR;
                                REQUEST_SERVER_ERROR: import("../types/shared.js").Errors.REQUEST_SERVER_ERROR;
                                TOO_MANY_COMPONENTS: import("../types/shared.js").Errors.TOO_MANY_COMPONENTS;
                                TOO_MANY_ACTION_ROWS: import("../types/shared.js").Errors.TOO_MANY_ACTION_ROWS;
                                LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID: import("../types/shared.js").Errors.LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID;
                                COMPONENT_LABEL_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_LABEL_TOO_BIG;
                                COMPONENT_CUSTOM_ID_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_CUSTOM_ID_TOO_BIG;
                                BUTTON_REQUIRES_CUSTOM_ID: import("../types/shared.js").Errors.BUTTON_REQUIRES_CUSTOM_ID;
                                COMPONENT_SELECT_MUST_BE_ALONE: import("../types/shared.js").Errors.COMPONENT_SELECT_MUST_BE_ALONE;
                                COMPONENT_PLACEHOLDER_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_PLACEHOLDER_TOO_BIG;
                                COMPONENT_SELECT_MIN_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_LOW;
                                COMPONENT_SELECT_MIN_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_MANY;
                                COMPONENT_SELECT_MAX_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_LOW;
                                COMPONENT_SELECT_MAX_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_MANY;
                                COMPONENT_SELECT_OPTIONS_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_LOW;
                                COMPONENT_SELECT_OPTIONS_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_MANY;
                                SELECT_OPTION_LABEL_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_LABEL_TOO_BIG;
                                SELECT_OPTION_VALUE_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_VALUE_TOO_BIG;
                                SELECT_OPTION_TOO_MANY_DEFAULTS: import("../types/shared.js").Errors.SELECT_OPTION_TOO_MANY_DEFAULTS;
                                COMPONENT_SELECT_MIN_HIGHER_THAN_MAX: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_HIGHER_THAN_MAX;
                                CANNOT_ADD_USER_TO_ARCHIVED_THREADS: import("../types/shared.js").Errors.CANNOT_ADD_USER_TO_ARCHIVED_THREADS;
                                CANNOT_LEAVE_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_LEAVE_ARCHIVED_THREAD;
                                CANNOT_REMOVE_FROM_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_REMOVE_FROM_ARCHIVED_THREAD;
                                YOU_CAN_NOT_DM_THE_BOT_ITSELF: import("../types/shared.js").Errors.YOU_CAN_NOT_DM_THE_BOT_ITSELF;
                            };
                        };
                        events: import("../bot.js").EventHandlers;
                        applicationId: bigint;
                        token: string;
                        intents: import("../types/shared.js").GatewayIntents;
                        urlWSS: string;
                        utils: {
                            snowflakeToBigint: typeof import("../mod.js").snowflakeToBigint;
                            bigintToSnowflake: typeof import("../mod.js").bigintToSnowflake;
                            calculateShardId: typeof import("../mod.js").calculateShardId;
                            delay: typeof import("../mod.js").delay;
                            iconHashToBigInt: typeof import("../mod.js").iconHashToBigInt;
                            iconBigintToHash: typeof import("../mod.js").iconBigintToHash;
                            validateLength: typeof import("../mod.js").validateLength;
                            urlToBase64: typeof import("../util/urlToBase64.js").urlToBase64;
                            formatImageURL: typeof import("../mod.js").formatImageURL;
                            calculateBits: typeof import("../util/permissions.js").calculateBits;
                            calculatePermissions: typeof import("../util/permissions.js").calculatePermissions;
                        };
                        transformers: import("../bot.js").Transformers;
                        helpers: {
                            addToThread: (threadId: bigint, userId: bigint) => Promise<void>;
                            getActiveThreads: (guildId: bigint) => Promise<{
                                threads: Collection<bigint, import("./channel.js").Channel>;
                                members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                            }>;
                            getArchivedThreads: (channelId: bigint, options?: (import("../mod.js").ListArchivedThreads & {
                                type?: "private" | "public" | "privateJoinedThreads" | undefined;
                            }) | undefined) => Promise<{
                                threads: Collection<bigint, import("./channel.js").Channel>;
                                members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                                hasMore: boolean;
                            }>;
                            getThreadMember: (threadId: bigint, userId: bigint) => Promise<{
                                id: bigint | undefined;
                                userId: bigint | undefined;
                                joinTimestamp: number;
                                flags: number;
                            }>;
                            getThreadMembers: (threadId: bigint) => Promise<Collection<bigint | undefined, import("./threadMember.js").ThreadMember>>;
                            joinThread: (threadId: bigint) => Promise<void>;
                            leaveThread: (threadId: bigint) => Promise<void>;
                            removeThreadMember: (threadId: bigint, userId: bigint) => Promise<void>;
                            startThreadWithMessage: (channelId: bigint, messageId: bigint, options: import("../mod.js").StartThreadWithMessage) => Promise<import("./channel.js").Channel>;
                            startThreadWithoutMessage: (channelId: bigint, options: import("../mod.js").StartThreadWithoutMessage) => Promise<import("./channel.js").Channel>;
                            createForumPost: (channelId: bigint, options: import("../mod.js").CreateForumPostWithMessage) => Promise<import("./channel.js").Channel>;
                            createChannel: (guildId: bigint, options?: import("../mod.js").CreateGuildChannel | undefined, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                            createStageInstance: (options: import("../mod.js").CreateStageInstance) => Promise<import("./stageInstance.js").StageInstance>;
                            deleteChannel: (channelId: bigint, reason?: string | undefined) => Promise<void>;
                            deleteChannelOverwrite: (channelId: bigint, overwriteId: bigint) => Promise<void>;
                            deleteStageInstance: (channelId: bigint) => Promise<void>;
                            editChannel: (channelId: bigint, options: import("../mod.js").ModifyChannel, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                            editChannelOverwrite: (channelId: bigint, overwrite: import("../mod.js").OverwriteReadable) => Promise<void>;
                            followChannel: (sourceChannelId: bigint, targetChannelId: bigint) => Promise<bigint>;
                            getChannel: (channelId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                            getChannels: (guildId: bigint) => Promise<Collection<bigint, import("./channel.js").Channel>>;
                            getChannelWebhooks: (channelId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                            getPins: (channelId: bigint) => Promise<Message[]>;
                            getStageInstance: (channelId: bigint) => Promise<import("./stageInstance.js").StageInstance>;
                            startTyping: (channelId: bigint) => Promise<void>;
                            swapChannels: (guildId: bigint, channelPositions: import("../mod.js").ModifyGuildChannelPositions[]) => Promise<void>;
                            updateStageInstance: (channelId: bigint, data: import("../types/shared.js").AtLeastOne<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, {
                                topic: Pick<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, "topic">;
                            }>) => Promise<import("./stageInstance.js").StageInstance>;
                            updateBotVoiceState: (guildId: bigint, options: import("../mod.js").UpdateSelfVoiceState) => Promise<void>;
                            updateUserVoiceState: (guildId: bigint, options: import("../mod.js").UpdateOthersVoiceState) => Promise<void>;
                            addDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                            editDiscovery: (guildId: bigint, data: import("../mod.js").ModifyGuildDiscoveryMetadata) => Promise<{
                                guildId: bigint;
                                primaryCategoryId: number;
                                keywords: string[] | undefined;
                                emojiDiscoverabilityEnabled: boolean;
                                partnerActionedTimestamp: number | undefined;
                                partnerApplicationTimestamp: number | undefined;
                                categoryIds: number[];
                            }>;
                            getDiscovery: (guildId: bigint) => Promise<{
                                guildId: bigint;
                                primaryCategoryId: number;
                                keywords: string[] | undefined;
                                emojiDiscoverabilityEnabled: boolean;
                                partnerActionedTimestamp: number | undefined;
                                partnerApplicationTimestamp: number | undefined;
                                categoryIds: number[];
                            }>;
                            getDiscoveryCategories: () => Promise<Collection<number, import("../types/discord.js").DiscordDiscoveryCategory>>;
                            removeDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                            validDiscoveryTerm: (term: string) => Promise<boolean>;
                            createEmoji: (guildId: bigint, options: import("../mod.js").CreateGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                            deleteEmoji: (guildId: bigint, id: bigint, reason?: string | undefined) => Promise<void>;
                            editEmoji: (guildId: bigint, id: bigint, options: import("../mod.js").ModifyGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                            emojiUrl: (id: bigint, animated?: boolean | undefined) => string;
                            getEmoji: (guildId: bigint, emojiId: bigint) => Promise<import("./emoji.js").Emoji>;
                            getEmojis: (guildId: bigint) => Promise<Collection<bigint, import("./emoji.js").Emoji>>;
                            createScheduledEvent: (guildId: bigint, options: import("../mod.js").CreateScheduledEvent) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                            deleteScheduledEvent: (guildId: bigint, eventId: bigint) => Promise<void>;
                            editScheduledEvent: (guildId: bigint, eventId: bigint, options: Partial<import("../mod.js").EditScheduledEvent>) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                            getScheduledEvent: (guildId: bigint, eventId: bigint, options?: {
                                withUserCount?: boolean | undefined;
                            } | undefined) => Promise<import("./scheduledEvent.js").ScheduledEvent | undefined>;
                            getScheduledEvents: (guildId: bigint, options?: import("../mod.js").GetScheduledEvents | undefined) => Promise<Collection<bigint, import("./scheduledEvent.js").ScheduledEvent>>;
                            getScheduledEventUsers: (guildId: bigint, eventId: bigint, options?: (import("../mod.js").GetScheduledEventUsers & {
                                withMember: true;
                            }) | undefined) => Promise<Collection<bigint, {
                                user: User;
                                member: Member;
                            }>>;
                            getAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<import("./automodRule.js").AutoModerationRule>;
                            getAutomodRules: (guildId: bigint) => Promise<Collection<bigint, import("./automodRule.js").AutoModerationRule>>;
                            createAutomodRule: (guildId: bigint, options: import("../mod.js").CreateAutoModerationRuleOptions) => Promise<import("./automodRule.js").AutoModerationRule>;
                            editAutomodRule: (guildId: bigint, options: Partial<import("../mod.js").EditAutoModerationRuleOptions>) => Promise<import("./automodRule.js").AutoModerationRule>;
                            deleteAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<void>;
                            createGuild: (options: import("../mod.js").CreateGuild) => Promise<import("./guild.js").Guild>;
                            deleteGuild: (guildId: bigint) => Promise<void>;
                            editGuild: (guildId: bigint, options: import("../mod.js").ModifyGuild, shardId: number) => Promise<import("./guild.js").Guild>;
                            editWelcomeScreen: (guildId: bigint, options: import("../mod.js").ModifyGuildWelcomeScreen) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                            editWidget: (guildId: bigint, enabled: boolean, channelId?: string | null | undefined) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                            getAuditLogs: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => Promise<{
                                users: User[];
                                webhook: import("./webhook.js").Webhook[];
                                auditLogEntries: import("./auditLogEntry.js").AuditLogEntry[];
                                integrations: {
                                    id: bigint | undefined;
                                    name: string | undefined;
                                    type: "twitch" | "youtube" | "discord" | undefined;
                                    enabled: boolean | undefined;
                                    syncing: boolean | undefined;
                                    roleId: bigint | undefined;
                                    enableEmoticons: boolean | undefined;
                                    expireBehavior: import("../types/shared.js").IntegrationExpireBehaviors | undefined;
                                    expireGracePeriod: number | undefined;
                                    user: User | undefined;
                                    account: {
                                        id: bigint | undefined;
                                        name: string | undefined;
                                    };
                                    syncedAt: number | undefined;
                                    subscriberCount: number | undefined;
                                    revoked: boolean | undefined;
                                    application: {
                                        id: bigint;
                                        name: string;
                                        icon: bigint | undefined;
                                        description: string;
                                        bot: User | undefined;
                                    } | undefined;
                                }[];
                                threads: import("./channel.js").Channel[];
                                scheduledEvents: import("./scheduledEvent.js").ScheduledEvent[] | undefined;
                            }>;
                            getAvailableVoiceRegions: () => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                            getBan: (guildId: bigint, memberId: bigint) => Promise<{
                                reason: string | null;
                                user: User;
                            } | undefined>;
                            getBans: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => Promise<Collection<bigint, {
                                reason?: string | undefined;
                                user: User;
                            }>>;
                            getGuild: (guildId: bigint, options?: {
                                counts?: boolean | undefined;
                            } | undefined) => Promise<import("./guild.js").Guild | undefined>;
                            getGuildPreview: (guildId: bigint) => Promise<{
                                id: bigint;
                                name: string;
                                icon: string | undefined;
                                splash: string | undefined;
                                discoverySplash: string | undefined;
                                emojis: import("./emoji.js").Emoji[];
                                features: import("../types/shared.js").GuildFeatures[];
                                approximateMemberCount: number;
                                approximatePresenceCount: number;
                                description: string | undefined;
                                stickers: import("./sticker.js").Sticker[];
                            }>;
                            getPruneCount: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => Promise<number>;
                            getVanityUrl: (guildId: bigint) => Promise<{
                                uses: number | undefined;
                                code: string | undefined;
                            }>;
                            getVoiceRegions: (guildId: bigint) => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                            getWelcomeScreen: (guildId: bigint) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                            getWidget: (guildId: bigint) => Promise<import("./widget.js").GuildWidget>;
                            getWidgetImageURL: (guildId: bigint, options?: import("../mod.js").GetGuildWidgetImageQuery | undefined) => Promise<string>;
                            getWidgetSettings: (guildId: bigint) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                            guildBannerURL: (id: bigint, options: {
                                banner?: string | bigint | undefined;
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            }) => string | undefined;
                            guildIconURL: (id: bigint, icon: bigint | undefined, options?: {
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            } | undefined) => string | undefined;
                            guildSplashURL: (id: bigint, splash: bigint | undefined, options?: {
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            } | undefined) => string | undefined;
                            leaveGuild: (guildId: bigint) => Promise<void>;
                            deleteIntegration: (guildId: bigint, id: bigint) => Promise<void>;
                            getIntegrations: (guildId: bigint) => Promise<Collection<bigint, import("./integration.js").Integration>>;
                            createApplicationCommand: (options: import("../mod.js").CreateApplicationCommand | import("../mod.js").CreateContextApplicationCommand, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                            makeOptionsForCommand: () => import("../types/discord.js").DiscordApplicationCommandOption[];
                            isContextApplicationCommand: () => boolean;
                            deleteApplicationCommand: (id: bigint, guildId?: bigint | undefined) => Promise<void>;
                            deleteInteractionResponse: (token: string, messageId?: bigint | undefined) => Promise<void>;
                            editApplicationCommandPermissions: (guildId: bigint, commandId: bigint, bearerToken: string, options: import("../mod.js").ApplicationCommandPermissions[]) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                            editInteractionResponse: (token: string, options: import("../mod.js").EditWebhookMessage & {
                                messageId?: bigint | undefined;
                            }) => Promise<Message | undefined>;
                            getApplicationCommand: (commandId: bigint, options?: import("../mod.js").GetApplicationCommand | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                            getApplicationCommandPermission: (guildId: bigint, commandId: bigint) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                            getApplicationCommandPermissions: (guildId: bigint) => Promise<Collection<bigint, import("./applicationCommandPermission.js").ApplicationCommandPermission>>;
                            getApplicationCommands: (guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                            upsertApplicationCommand: (commandId: bigint, options: import("../types/shared.js").AtLeastOne<import("../mod.js").CreateContextApplicationCommand, {
                                type: Pick<import("../mod.js").CreateContextApplicationCommand, "type">;
                                description: Pick<import("../mod.js").CreateContextApplicationCommand, "description">;
                                name: Pick<import("../mod.js").CreateContextApplicationCommand, "name">;
                                nameLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "nameLocalizations"> | undefined;
                                descriptionLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "descriptionLocalizations"> | undefined;
                                defaultMemberPermissions?: Pick<import("../mod.js").CreateContextApplicationCommand, "defaultMemberPermissions"> | undefined;
                                dmPermission?: Pick<import("../mod.js").CreateContextApplicationCommand, "dmPermission"> | undefined;
                            }> | import("../types/shared.js").AtLeastOne<import("../mod.js").CreateApplicationCommand, {
                                name: Pick<import("../mod.js").CreateApplicationCommand, "name">;
                                nameLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "nameLocalizations"> | undefined;
                                description: Pick<import("../mod.js").CreateApplicationCommand, "description">;
                                descriptionLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "descriptionLocalizations"> | undefined;
                                type?: Pick<import("../mod.js").CreateApplicationCommand, "type"> | undefined;
                                options?: Pick<import("../mod.js").CreateApplicationCommand, "options"> | undefined;
                                defaultMemberPermissions?: Pick<import("../mod.js").CreateApplicationCommand, "defaultMemberPermissions"> | undefined;
                                dmPermission?: Pick<import("../mod.js").CreateApplicationCommand, "dmPermission"> | undefined;
                            }>, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                            upsertApplicationCommands: (options: (import("../mod.js").CreateContextApplicationCommand | import("../mod.js").UpsertApplicationCommands)[], guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                            deleteFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<void>;
                            editFollowupMessage: (interactionToken: string, messageId: bigint, options: import("../mod.js").EditWebhookMessage) => Promise<Message>;
                            getFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<Message>;
                            getOriginalInteractionResponse: (token: string) => Promise<Message>;
                            sendInteractionResponse: (id: bigint, token: string, options: import("../mod.js").InteractionResponse) => Promise<Message | undefined>;
                            verifySignature: () => {
                                isValid: boolean;
                                body: string;
                            };
                            createInvite: (channelId: bigint, options?: import("../mod.js").CreateChannelInvite | undefined) => Promise<{
                                code: string;
                                guildId: bigint | undefined;
                                channelId: bigint | undefined;
                                inviter: User | undefined;
                                targetType: import("../types/shared.js").TargetTypes | undefined;
                                targetUser: User | undefined;
                                targetApplicationId: bigint | undefined;
                                approximatePresenceCount: number | undefined;
                                approximateMemberCount: number | undefined;
                                expiresAt: number | undefined;
                            }>;
                            deleteInvite: (inviteCode: string) => Promise<void>;
                            getChannelInvites: (channelId: bigint) => Promise<Collection<string, {
                                uses: number;
                                maxUses: number;
                                maxAge: number;
                                temporary: boolean;
                                createdAt: number;
                            }>>;
                            getInvite: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => Promise<{
                                code: string;
                                guildId: bigint | undefined;
                                channelId: bigint | undefined;
                                inviter: User | undefined;
                                targetType: import("../types/shared.js").TargetTypes | undefined;
                                targetUser: User | undefined;
                                targetApplicationId: bigint | undefined;
                                approximatePresenceCount: number | undefined;
                                approximateMemberCount: number | undefined;
                                expiresAt: number | undefined;
                            }>;
                            getInvites: (guildId: bigint) => Promise<Collection<string, {
                                uses: number;
                                maxUses: number;
                                maxAge: number;
                                temporary: boolean;
                                createdAt: number;
                            }>>;
                            avatarURL: (userId: bigint, discriminator: string, options?: {
                                avatar: bigint | undefined;
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            } | undefined) => string;
                            banMember: (guildId: bigint, id: bigint, options?: import("../mod.js").CreateGuildBan | undefined) => Promise<void>;
                            editBotNickname: (guildId: bigint, options: {
                                nick: string | null;
                                reason?: string | undefined;
                            }) => Promise<string | undefined>;
                            editMember: (guildId: bigint, memberId: bigint, options: import("../mod.js").ModifyGuildMember) => Promise<Member>;
                            fetchMembers: (guildId: bigint, options?: Omit<import("../mod.js").RequestGuildMembers, "guildId"> | undefined) => Promise<void>;
                            getDmChannel: (userId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                            getMember: (guildId: bigint, id: bigint) => Promise<Member | undefined>;
                            getMembers: (guildId: bigint, options: import("../mod.js").ListGuildMembers) => Promise<Collection<bigint, Member>>;
                            kickMember: (guildId: bigint, memberId: bigint, reason?: string | undefined) => Promise<void>;
                            pruneMembers: (guildId: bigint, options: import("../mod.js").BeginGuildPrune) => Promise<number>;
                            searchMembers: (guildId: bigint, query: string, options?: Omit<import("../mod.js").SearchMembers, "query"> | undefined) => Promise<Collection<bigint, Member>>;
                            unbanMember: (guildId: bigint, id: bigint) => Promise<void>;
                            addReaction: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                            addReactions: (channelId: bigint, messageId: bigint, reactions: string[], ordered?: boolean | undefined) => Promise<void>;
                            deleteMessage: (channelId: bigint, messageId: bigint, reason?: string | undefined, delayMilliseconds?: number | undefined) => Promise<void>;
                            deleteMessages: (channelId: bigint, ids: bigint[], reason?: string | undefined) => Promise<void>;
                            editMessage: (channelId: bigint, messageId: bigint, content: import("../mod.js").EditMessage) => Promise<Message>;
                            getMessage: (channelId: bigint, id: bigint) => Promise<Message | undefined>;
                            getMessages: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => Promise<Collection<bigint, Message>>;
                            isGetMessagesAfter: () => boolean;
                            isGetMessagesBefore: () => boolean;
                            isGetMessagesAround: () => boolean;
                            isGetMessagesLimit: () => boolean;
                            getReactions: (channelId: bigint, messageId: bigint, reaction: string, options?: import("../mod.js").GetReactions | undefined) => Promise<Collection<bigint, User>>;
                            pinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                            publishMessage: (channelId: bigint, messageId: bigint) => Promise<Message>;
                            removeAllReactions: (channelId: bigint, messageId: bigint) => Promise<void>;
                            removeReaction: (channelId: bigint, messageId: bigint, reaction: string, options?: {
                                userId?: bigint | undefined;
                            } | undefined) => Promise<void>;
                            removeReactionEmoji: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                            sendMessage: (channelId: bigint, content: import("../mod.js").CreateMessage) => Promise<Message>;
                            unpinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                            editBotProfile: (options: {
                                username?: string | undefined;
                                botAvatarURL?: string | null | undefined;
                            }) => Promise<User>;
                            editBotStatus: (data: import("../mod.js").StatusUpdate) => Promise<void>;
                            editShardStatus: (shardId: number, data: import("../mod.js").StatusUpdate) => void;
                            getGatewayBot: () => Promise<import("./gatewayBot.js").GetGatewayBot>;
                            getUser: (userId: bigint) => Promise<User | undefined>;
                            nitroStickerPacks: () => Promise<import("./sticker.js").StickerPack[]>;
                            getApplicationInfo: () => Promise<import("./application.js").Application>;
                            addRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                            createRole: (guildId: bigint, options: import("../mod.js").CreateGuildRole, reason?: string | undefined) => Promise<Role>;
                            deleteRole: (guildId: bigint, id: bigint) => Promise<void>;
                            editRole: (guildId: bigint, id: bigint, options: import("../mod.js").EditGuildRole) => Promise<Role>;
                            getRoles: (guildId: bigint) => Promise<Collection<bigint, Role>>;
                            modifyRolePositions: (guildId: bigint, options: import("../mod.js").ModifyRolePositions[]) => Promise<Collection<bigint, Role>>;
                            removeRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                            createGuildFromTemplate: (templateCode: string, data: import("../mod.js").CreateGuildFromTemplate) => Promise<import("./guild.js").Guild>;
                            createGuildTemplate: (guildId: bigint, data: import("../mod.js").CreateTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                            deleteGuildTemplate: (guildId: bigint, templateCode: string) => Promise<void>;
                            editGuildTemplate: (guildId: bigint, templateCode: string, data: import("../mod.js").ModifyGuildTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                            getGuildTemplates: (guildId: bigint) => Promise<Collection<string, import("./template.js").Template>>;
                            getTemplate: (templateCode: string) => Promise<import("./template.js").Template>;
                            syncGuildTemplate: (guildId: bigint, templateCode: string) => Promise<import("../types/discord.js").DiscordTemplate>;
                            connectToVoiceChannel: (guildId: bigint, channelId: bigint, options?: import("../types/shared.js").AtLeastOne<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, {
                                selfDeaf: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfDeaf">;
                                selfMute: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfMute">;
                            }> | undefined) => Promise<void>;
                            createWebhook: (channelId: bigint, options: import("../mod.js").CreateWebhook) => Promise<import("./webhook.js").Webhook>;
                            deleteWebhook: (webhookId: bigint, reason?: string | undefined) => Promise<void>;
                            deleteWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").DeleteWebhookMessageOptions | undefined) => Promise<void>;
                            deleteWebhookWithToken: (webhookId: bigint, webhookToken: string) => Promise<void>;
                            editWebhook: (webhookId: bigint, options: import("../mod.js").ModifyWebhook) => Promise<import("./webhook.js").Webhook>;
                            editWebhookMessage: (webhookId: bigint, webhookToken: string, options: import("../mod.js").EditWebhookMessage & {
                                messageId?: bigint | undefined;
                                threadId?: bigint | undefined;
                            }) => Promise<Message>;
                            editWebhookWithToken: (webhookId: bigint, webhookToken: string, options: Omit<import("../mod.js").ModifyWebhook, "channelId">) => Promise<import("./webhook.js").Webhook>;
                            getWebhook: (webhookId: bigint) => Promise<import("./webhook.js").Webhook | undefined>;
                            getWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").GetWebhookMessageOptions | undefined) => Promise<Message>;
                            getWebhooks: (guildId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                            getWebhookWithToken: (webhookId: bigint, token: string) => Promise<import("./webhook.js").Webhook>;
                            sendWebhook: (webhookId: bigint, webhookToken: string, options: import("../mod.js").ExecuteWebhook) => Promise<Message | undefined>;
                        };
                        rest: {
                            version: number;
                            token: string;
                            debug: (text: string) => unknown;
                            customUrl: string;
                            maxRetryCount: number;
                            secretKey: string;
                            checkRateLimits: typeof import("../mod.js").checkRateLimits;
                            cleanupQueues: typeof import("../mod.js").cleanupQueues;
                            processQueue: typeof import("../mod.js").processQueue;
                            processRateLimitedPaths: typeof import("../mod.js").processRateLimitedPaths;
                            processRequestHeaders: typeof import("../mod.js").processRequestHeaders;
                            processRequest: typeof import("../mod.js").processRequest;
                            createRequestBody: typeof import("../mod.js").createRequestBody;
                            runMethod: typeof import("../mod.js").runMethod;
                            simplifyUrl: typeof import("../mod.js").simplifyUrl;
                            processGlobalQueue: typeof import("../mod.js").processGlobalQueue;
                            convertRestError: typeof import("../mod.js").convertRestError;
                            sendRequest: typeof import("../mod.js").sendRequest;
                            invalidRequests: number;
                            maxInvalidRequests: number;
                            invalidRequestsInterval: number;
                            invalidRequestsTimeoutId: number;
                            invalidRequestsSafetyAmount: number;
                            invalidRequestFrozenAt: number;
                            invalidRequestErrorStatuses: number[];
                            pathQueues: Map<string, {
                                isWaiting: boolean;
                                requests: {
                                    request: import("../mod.js").RestRequest;
                                    payload: import("../mod.js").RestPayload;
                                }[];
                            }>;
                            processingQueue: boolean;
                            processingRateLimitedPaths: boolean;
                            globallyRateLimited: boolean;
                            globalQueue: {
                                request: import("../mod.js").RestRequest;
                                payload: import("../mod.js").RestPayload;
                                basicURL: string;
                                urlToUse: string;
                            }[];
                            globalQueueProcessing: boolean;
                            rateLimitedPaths: Map<string, import("../mod.js").RestRateLimitedPath>;
                        };
                        gateway: {
                            stop: (code: number, reason: string) => Promise<void>;
                            gatewayBot: {
                                url: string;
                                shards: number;
                                sessionStartLimit: {
                                    total: number;
                                    remaining: number;
                                    resetAfter: number;
                                    maxConcurrency: number;
                                };
                            };
                            spawnShardDelay: number;
                            shardsPerWorker: number;
                            totalWorkers: number;
                            firstShardId: number;
                            lastShardId: number;
                            buckets: Collection<number, {
                                workers: {
                                    id: number;
                                    queue: number[];
                                }[];
                                leak: import("../util/bucket.js").LeakyBucket;
                            }>;
                            prepareBuckets: () => void;
                            spawnShards: () => void;
                            tellWorkerToIdentify: (workerId: number, shardId: number, bucketId: number) => Promise<void>;
                            debug: (text: import("../mod.js").GatewayDebugEvents, ...args: any[]) => unknown;
                            calculateTotalShards: () => number;
                            calculateWorkerId: (shardId: number) => number;
                            manager: {
                                shards: Collection<number, {
                                    gatewayConfig: import("../mod.js").ShardGatewayConfig;
                                    heart: import("../mod.js").ShardHeart;
                                    id: number;
                                    maxRequestsPerRateLimitTick: number;
                                    previousSequenceNumber: number | null;
                                    rateLimitResetInterval: number;
                                    sessionId: string | undefined;
                                    socket: import("ws") | undefined;
                                    state: import("../mod.js").ShardState;
                                    totalShards: number;
                                    events: import("../mod.js").ShardEvents;
                                    calculateSafeRequests: () => number;
                                    close: (code: number, reason: string) => void;
                                    connect: () => Promise<void>;
                                    identify: () => Promise<void>;
                                    isOpen: () => boolean;
                                    makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                                    resume: () => Promise<void>;
                                    send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                                    shutdown: () => Promise<void>;
                                    bucket: import("../util/bucket.js").LeakyBucket;
                                    handleClose: (close: CloseEvent) => Promise<void>;
                                    handleMessage: (message: MessageEvent<any>) => Promise<void>;
                                    requestIdentify: () => Promise<void>;
                                    offlineSendQueue: ((_?: unknown) => void)[];
                                    resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                    startHeartbeating: (interval: number) => void;
                                    stopHeartbeating: () => void;
                                }>;
                                gatewayConfig: {
                                    url?: string | undefined;
                                    version?: number | undefined;
                                    compress?: boolean | undefined;
                                    intents?: number | undefined;
                                    properties?: {
                                        browser: string;
                                        os: string;
                                        device: string;
                                    } | undefined;
                                    token: string;
                                };
                                totalShards: number;
                                createShardOptions: {
                                    state?: import("../mod.js").ShardState | undefined;
                                    close?: {} | undefined;
                                    resume?: {} | undefined;
                                    connect?: {} | undefined;
                                    calculateSafeRequests?: {} | undefined;
                                    handleClose?: {} | undefined;
                                    handleMessage?: {} | undefined;
                                    identify?: {} | undefined;
                                    isOpen?: {} | undefined;
                                    makePresence?: {} | undefined;
                                    maxRequestsPerRateLimitTick?: number | undefined;
                                    previousSequenceNumber?: number | undefined;
                                    rateLimitResetInterval?: number | undefined;
                                    send?: {} | undefined;
                                    shutdown?: {} | undefined;
                                    startHeartbeating?: {} | undefined;
                                    stopHeartbeating?: {} | undefined;
                                    heart?: {
                                        intervalId?: number | undefined;
                                        lastAck?: number | undefined;
                                        lastBeat?: number | undefined;
                                        rtt?: number | undefined;
                                        timeoutId?: number | undefined;
                                        interval: number;
                                        acknowledged: boolean;
                                    } | undefined;
                                    bucket?: {
                                        max: number;
                                        waiting: ((_?: unknown) => void)[];
                                        refillInterval: number;
                                        refillAmount: number;
                                        tokens: () => number;
                                        acquire: (amount: number, highPriority?: boolean | undefined) => Promise<void>;
                                        nextRefill: () => number;
                                        lastRefill: number;
                                        allowAcquire: boolean;
                                        tokensState: number;
                                    } | undefined;
                                    offlineSendQueue?: {
                                        d?: unknown;
                                        op: import("../types/shared.js").GatewayOpcodes;
                                    }[] | undefined;
                                    resolves?: {
                                        [Symbol.toStringTag]: string;
                                        [Symbol.iterator]: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                        forEach: (callbackfn: (value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void, key: "READY" | "RESUMED" | "INVALID_SESSION", map: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>) => void, thisArg?: any) => void;
                                        entries: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                        keys: () => IterableIterator<"READY" | "RESUMED" | "INVALID_SESSION">;
                                        values: () => IterableIterator<(payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                        set: (key: "READY" | "RESUMED" | "INVALID_SESSION", value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void) => Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                        clear: () => void;
                                        size: number;
                                        get: (key: "READY" | "RESUMED" | "INVALID_SESSION") => ((payload: import("../types/discord.js").DiscordGatewayPayload) => void) | undefined;
                                        delete: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                                        has: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                                    } | undefined;
                                    events: {
                                        connected?: {} | undefined;
                                        connecting?: {} | undefined;
                                        disconnected?: {} | undefined;
                                        heartbeat?: {} | undefined;
                                        heartbeatAck?: {} | undefined;
                                        hello?: {} | undefined;
                                        invalidSession?: {} | undefined;
                                        resuming?: {} | undefined;
                                        resumed?: {} | undefined;
                                        requestedReconnect?: {} | undefined;
                                        identifying?: {} | undefined;
                                        identified?: {} | undefined;
                                        message: (shard: {
                                            gatewayConfig: import("../mod.js").ShardGatewayConfig;
                                            heart: import("../mod.js").ShardHeart;
                                            id: number;
                                            maxRequestsPerRateLimitTick: number;
                                            previousSequenceNumber: number | null;
                                            rateLimitResetInterval: number;
                                            sessionId: string | undefined;
                                            socket: import("ws") | undefined;
                                            state: import("../mod.js").ShardState;
                                            totalShards: number;
                                            events: import("../mod.js").ShardEvents;
                                            calculateSafeRequests: () => number;
                                            close: (code: number, reason: string) => void;
                                            connect: () => Promise<void>;
                                            identify: () => Promise<void>;
                                            isOpen: () => boolean;
                                            makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                                            resume: () => Promise<void>;
                                            send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                                            shutdown: () => Promise<void>;
                                            bucket: import("../util/bucket.js").LeakyBucket;
                                            handleClose: (close: CloseEvent) => Promise<void>;
                                            handleMessage: (message: MessageEvent<any>) => Promise<void>;
                                            requestIdentify: () => Promise<void>;
                                            offlineSendQueue: ((_?: unknown) => void)[];
                                            resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                            startHeartbeating: (interval: number) => void;
                                            stopHeartbeating: () => void;
                                        }, payload: import("../types/discord.js").DiscordGatewayPayload) => unknown;
                                    };
                                };
                                requestIdentify: (shardId: number) => Promise<void>;
                                identify: (shardId: number) => Promise<void>;
                                kill: (shardId: number) => Promise<void>;
                            };
                        };
                        handlers: {
                            READY: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_PINS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_BAN_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_BAN_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_EMOJIS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_INTEGRATIONS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBERS_CHUNK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_ROLE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_ROLE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_ROLE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_USER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_USER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTERACTION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INVITE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INVITE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_DELETE_BULK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_REMOVE_ALL: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_REMOVE_EMOJI: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            PRESENCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            TYPING_START: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            USER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            VOICE_SERVER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            VOICE_STATE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            WEBHOOKS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTEGRATION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTEGRATION_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTEGRATION_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            STAGE_INSTANCE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            STAGE_INSTANCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            STAGE_INSTANCE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_LIST_SYNC: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_MEMBERS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_LOADED_DD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                        };
                        activeGuildIds: Set<bigint>;
                        cache: {
                            unrepliedInteractions: Set<bigint>;
                            fetchAllMembersProcessingRequests: Map<string, Function>;
                        };
                        enabledPlugins: Set<string>;
                    } | undefined;
                    intervalId?: number | undefined;
                    filter: (value: {
                        id: bigint;
                        name: string;
                        type: ChannelTypes;
                        permissions: bigint;
                    }, key: bigint, ...args: any[]) => boolean;
                    interval: number;
                } | undefined;
                [Symbol.toStringTag]: string;
                [Symbol.iterator]: () => IterableIterator<[bigint, {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                }]>;
                every: (callback: (value: {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                }, key: bigint) => boolean) => boolean;
                some: (callback: (value: {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                }, key: bigint) => boolean) => boolean;
                forEach: (callbackfn: (value: {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                }, key: bigint, map: Map<bigint, {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                }>) => void, thisArg?: any) => void;
                map: <T_4>(callback: (value: {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                }, key: bigint) => T_4) => T_4[];
                filter: (callback: (value: {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                }, key: bigint) => boolean) => Collection<bigint, {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                }>;
                reduce: <T_5>(callback: (accumulator: T_5, value: {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                }, key: bigint) => T_5, initialValue?: T_5 | undefined) => T_5;
                find: (callback: (value: {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                }, key: bigint) => boolean) => {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                } | undefined;
                entries: () => IterableIterator<[bigint, {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                }]>;
                keys: () => IterableIterator<bigint>;
                values: () => IterableIterator<{
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                }>;
                set: (key: bigint, value: {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                }) => Collection<bigint, {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                }>;
                clear: () => void;
                size: number;
                get: (key: bigint) => {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                } | undefined;
                startSweeper: (options: import("../util/collection.js").CollectionSweeper<bigint, {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                }>) => number;
                stopSweeper: () => void;
                changeSweeperInterval: (newInterval: number) => void;
                changeSweeperFilter: (newFilter: (value: {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                }, key: bigint, bot: Bot) => boolean) => void;
                forceSet: (key: bigint, value: {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                }) => Collection<bigint, {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                }>;
                array: () => {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                }[];
                first: () => {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                } | undefined;
                last: () => {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                } | undefined;
                random: () => {
                    id: bigint;
                    name: string;
                    type: ChannelTypes;
                    permissions: bigint;
                } | undefined;
                delete: (key: bigint) => boolean;
                has: (key: bigint) => boolean;
            } | undefined;
            attachments?: {
                maxSize?: number | undefined;
                sweeper?: {
                    bot?: {
                        handleDiscordPayload?: {} | undefined;
                        botGatewayData?: {
                            url: string;
                            shards: number;
                            sessionStartLimit: {
                                total: number;
                                remaining: number;
                                resetAfter: number;
                                maxConcurrency: number;
                            };
                        } | undefined;
                        id: bigint;
                        constants: {
                            DISCORDENO_VERSION: string;
                            USER_AGENT: string;
                            BASE_URL: string;
                            CDN_URL: string;
                            routes: {
                                GATEWAY_BOT: () => string;
                                AUTOMOD_RULES: (guildId: bigint) => string;
                                AUTOMOD_RULE: (guildId: bigint, ruleId: bigint) => string;
                                CHANNEL: (channelId: bigint) => string;
                                CHANNEL_MESSAGE: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_MESSAGES: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => string;
                                CHANNEL_PIN: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_PINS: (channelId: bigint) => string;
                                CHANNEL_BULK_DELETE: (channelId: bigint) => string;
                                CHANNEL_INVITES: (channelId: bigint) => string;
                                CHANNEL_WEBHOOKS: (channelId: bigint) => string;
                                CHANNEL_MESSAGE_REACTION_ME: (channelId: bigint, messageId: bigint, emoji: string) => string;
                                CHANNEL_MESSAGE_REACTION_USER: (channelId: bigint, messageId: bigint, emoji: string, userId: bigint) => string;
                                CHANNEL_MESSAGE_REACTIONS: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_MESSAGE_REACTION: (channelId: bigint, messageId: bigint, emoji: string, options?: import("../mod.js").GetReactions | undefined) => string;
                                CHANNEL_FOLLOW: (channelId: bigint) => string;
                                CHANNEL_MESSAGE_CROSSPOST: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_OVERWRITE: (channelId: bigint, overwriteId: bigint) => string;
                                CHANNEL_TYPING: (channelId: bigint) => string;
                                THREAD_START_PUBLIC: (channelId: bigint, messageId: bigint) => string;
                                THREAD_START_PRIVATE: (channelId: bigint) => string;
                                THREAD_ACTIVE: (guildId: bigint) => string;
                                THREAD_MEMBERS: (channelId: bigint) => string;
                                THREAD_ME: (channelId: bigint) => string;
                                THREAD_USER: (channelId: bigint, userId: bigint) => string;
                                THREAD_ARCHIVED: (channelId: bigint) => string;
                                THREAD_ARCHIVED_PUBLIC: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                                THREAD_ARCHIVED_PRIVATE: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                                THREAD_ARCHIVED_PRIVATE_JOINED: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                                FORUM_START: (channelId: bigint) => string;
                                GUILD: (guildId: bigint, withCounts?: boolean | undefined) => string;
                                GUILDS: () => string;
                                GUILD_AUDIT_LOGS: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => string;
                                GUILD_BAN: (guildId: bigint, userId: bigint) => string;
                                GUILD_BANS: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => string;
                                GUILD_BANNER: (guildId: bigint, icon: string) => string;
                                GUILD_CHANNELS: (guildId: bigint) => string;
                                GUILD_WIDGET: (guildId: bigint) => string;
                                GUILD_WIDGET_JSON: (guildId: bigint) => string;
                                GUILD_WIDGET_IMAGE: (guildId: bigint, style?: "shield" | "banner1" | "banner2" | "banner3" | "banner4" | undefined) => string;
                                GUILD_EMOJI: (guildId: bigint, emojiId: bigint) => string;
                                GUILD_EMOJIS: (guildId: bigint) => string;
                                GUILD_ICON: (guildId: bigint, icon: string) => string;
                                GUILD_INTEGRATION: (guildId: bigint, integrationId: bigint) => string;
                                GUILD_INTEGRATION_SYNC: (guildId: bigint, integrationId: bigint) => string;
                                GUILD_INTEGRATIONS: (guildId: bigint) => string;
                                GUILD_INVITES: (guildId: bigint) => string;
                                GUILD_LEAVE: (guildId: bigint) => string;
                                GUILD_MEMBER: (guildId: bigint, userId: bigint) => string;
                                GUILD_MEMBERS: (guildId: bigint, options?: import("../mod.js").ListGuildMembers | undefined) => string;
                                GUILD_MEMBER_ROLE: (guildId: bigint, memberId: bigint, roleId: bigint) => string;
                                GUILD_MEMBERS_SEARCH: (guildId: bigint, query: string, options?: {
                                    limit?: number | undefined;
                                } | undefined) => string;
                                GUILD_PRUNE: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => string;
                                GUILD_REGIONS: (guildId: bigint) => string;
                                GUILD_ROLE: (guildId: bigint, roleId: bigint) => string;
                                GUILD_ROLES: (guildId: bigint) => string;
                                GUILD_SPLASH: (guildId: bigint, icon: string) => string;
                                GUILD_VANITY_URL: (guildId: bigint) => string;
                                GUILD_WEBHOOKS: (guildId: bigint) => string;
                                TEMPLATE: (code: string) => string;
                                GUILD_TEMPLATE: (guildId: bigint, code: string) => string;
                                GUILD_TEMPLATES: (guildId: bigint) => string;
                                GUILD_PREVIEW: (guildId: bigint) => string;
                                UPDATE_VOICE_STATE: (guildId: bigint, userId?: bigint | undefined) => string;
                                GUILD_WELCOME_SCREEN: (guildId: bigint) => string;
                                GUILD_SCHEDULED_EVENTS: (guildId: bigint, withUserCount?: boolean | undefined) => string;
                                GUILD_SCHEDULED_EVENT: (guildId: bigint, eventId: bigint, withUserCount?: boolean | undefined) => string;
                                GUILD_SCHEDULED_EVENT_USERS: (guildId: bigint, eventId: bigint, options?: import("../mod.js").GetScheduledEventUsers | undefined) => string;
                                VOICE_REGIONS: () => string;
                                INVITE: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => string;
                                WEBHOOK: (webhookId: bigint, token: string, options?: {
                                    wait?: boolean | undefined;
                                    threadId?: bigint | undefined;
                                } | undefined) => string;
                                WEBHOOK_ID: (webhookId: bigint) => string;
                                WEBHOOK_MESSAGE: (webhookId: bigint, token: string, messageId: bigint, options?: {
                                    threadId?: bigint | undefined;
                                } | undefined) => string;
                                WEBHOOK_MESSAGE_ORIGINAL: (webhookId: bigint, token: string, options?: {
                                    threadId?: bigint | undefined;
                                } | undefined) => string;
                                WEBHOOK_SLACK: (webhookId: bigint, token: string) => string;
                                WEBHOOK_GITHUB: (webhookId: bigint, token: string) => string;
                                COMMANDS: (applicationId: bigint) => string;
                                COMMANDS_GUILD: (applicationId: bigint, guildId: bigint) => string;
                                COMMANDS_PERMISSIONS: (applicationId: bigint, guildId: bigint) => string;
                                COMMANDS_PERMISSION: (applicationId: bigint, guildId: bigint, commandId: bigint) => string;
                                COMMANDS_ID: (applicationId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                                COMMANDS_GUILD_ID: (applicationId: bigint, guildId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                                INTERACTION_ID_TOKEN: (interactionId: bigint, token: string) => string;
                                INTERACTION_ORIGINAL_ID_TOKEN: (interactionId: bigint, token: string) => string;
                                INTERACTION_ID_TOKEN_MESSAGE_ID: (applicationId: bigint, token: string, messageId: bigint) => string;
                                USER: (userId: bigint) => string;
                                USER_BOT: () => string;
                                USER_GUILDS: () => string;
                                USER_AVATAR: (userId: bigint, icon: string) => string;
                                USER_DEFAULT_AVATAR: (icon: number) => string;
                                USER_DM: () => string;
                                USER_CONNECTIONS: () => string;
                                USER_NICK: (guildId: bigint) => string;
                                DISCOVERY_CATEGORIES: () => string;
                                DISCOVERY_VALID_TERM: (term: string) => string;
                                DISCOVERY_METADATA: (guildId: bigint) => string;
                                DISCOVERY_SUBCATEGORY: (guildId: bigint, categoryId: number) => string;
                                OAUTH2_APPLICATION: () => string;
                                STAGE_INSTANCES: () => string;
                                STAGE_INSTANCE: (channelId: bigint) => string;
                                NITRO_STICKER_PACKS: () => string;
                            };
                            regexes: {
                                SLASH_COMMANDS_NAME_REGEX: RegExp;
                                CONTEXT_MENU_COMMANDS_NAME_REGEX: RegExp;
                                CHANNEL_MENTION_REGEX: RegExp;
                                DISCORD_SNOWFLAKE_REGEX: RegExp;
                            };
                            Errors: {
                                REQUEST_UNKNOWN_ERROR: import("../types/shared.js").Errors.REQUEST_UNKNOWN_ERROR;
                                GUILD_NOT_FOUND: import("../types/shared.js").Errors.GUILD_NOT_FOUND;
                                RULES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.RULES_CHANNEL_CANNOT_BE_DELETED;
                                UPDATES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.UPDATES_CHANNEL_CANNOT_BE_DELETED;
                                NICKNAMES_MAX_LENGTH: import("../types/shared.js").Errors.NICKNAMES_MAX_LENGTH;
                                MEMBER_NOT_IN_VOICE_CHANNEL: import("../types/shared.js").Errors.MEMBER_NOT_IN_VOICE_CHANNEL;
                                MESSAGE_MAX_LENGTH: import("../types/shared.js").Errors.MESSAGE_MAX_LENGTH;
                                BOTS_HIGHEST_ROLE_TOO_LOW: import("../types/shared.js").Errors.BOTS_HIGHEST_ROLE_TOO_LOW;
                                CHANNEL_NOT_FOUND: import("../types/shared.js").Errors.CHANNEL_NOT_FOUND;
                                CHANNEL_NOT_IN_GUILD: import("../types/shared.js").Errors.CHANNEL_NOT_IN_GUILD;
                                CHANNEL_NOT_TEXT_BASED: import("../types/shared.js").Errors.CHANNEL_NOT_TEXT_BASED;
                                CHANNEL_NOT_STAGE_VOICE: import("../types/shared.js").Errors.CHANNEL_NOT_STAGE_VOICE;
                                INVALID_TOPIC_LENGTH: import("../types/shared.js").Errors.INVALID_TOPIC_LENGTH;
                                GUILD_NOT_DISCOVERABLE: import("../types/shared.js").Errors.GUILD_NOT_DISCOVERABLE;
                                GUILD_WIDGET_NOT_ENABLED: import("../types/shared.js").Errors.GUILD_WIDGET_NOT_ENABLED;
                                MEMBER_NOT_FOUND: import("../types/shared.js").Errors.MEMBER_NOT_FOUND;
                                MEMBER_SEARCH_LIMIT_TOO_HIGH: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_HIGH;
                                MEMBER_SEARCH_LIMIT_TOO_LOW: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_LOW;
                                PRUNE_MAX_DAYS: import("../types/shared.js").Errors.PRUNE_MAX_DAYS;
                                ROLE_NOT_FOUND: import("../types/shared.js").Errors.ROLE_NOT_FOUND;
                                INVALID_THREAD_PARENT_CHANNEL_TYPE: import("../types/shared.js").Errors.INVALID_THREAD_PARENT_CHANNEL_TYPE;
                                GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS: import("../types/shared.js").Errors.GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS;
                                NOT_A_THREAD_CHANNEL: import("../types/shared.js").Errors.NOT_A_THREAD_CHANNEL;
                                MISSING_MANAGE_THREADS_AND_NOT_MEMBER: import("../types/shared.js").Errors.MISSING_MANAGE_THREADS_AND_NOT_MEMBER;
                                CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD: import("../types/shared.js").Errors.CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD;
                                HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS: import("../types/shared.js").Errors.HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS;
                                INVALID_GET_MESSAGES_LIMIT: import("../types/shared.js").Errors.INVALID_GET_MESSAGES_LIMIT;
                                DELETE_MESSAGES_MIN: import("../types/shared.js").Errors.DELETE_MESSAGES_MIN;
                                PRUNE_MIN_DAYS: import("../types/shared.js").Errors.PRUNE_MIN_DAYS;
                                INVALID_SLASH_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_DESCRIPTION;
                                INVALID_SLASH_NAME: import("../types/shared.js").Errors.INVALID_SLASH_NAME;
                                INVALID_SLASH_OPTIONS: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS;
                                INVALID_SLASH_OPTIONS_CHOICES: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICES;
                                TOO_MANY_SLASH_OPTIONS: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTIONS;
                                INVALID_SLASH_OPTION_CHOICE_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_CHOICE_NAME;
                                INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE;
                                TOO_MANY_SLASH_OPTION_CHOICES: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTION_CHOICES;
                                ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES: import("../types/shared.js").Errors.ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES;
                                INVALID_SLASH_OPTION_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_NAME;
                                INVALID_SLASH_OPTION_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_DESCRIPTION;
                                INVALID_CONTEXT_MENU_COMMAND_NAME: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_NAME;
                                INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION;
                                INVALID_WEBHOOK_NAME: import("../types/shared.js").Errors.INVALID_WEBHOOK_NAME;
                                INVALID_WEBHOOK_OPTIONS: import("../types/shared.js").Errors.INVALID_WEBHOOK_OPTIONS;
                                MISSING_ADD_REACTIONS: import("../types/shared.js").Errors.MISSING_ADD_REACTIONS;
                                MISSING_ADMINISTRATOR: import("../types/shared.js").Errors.MISSING_ADMINISTRATOR;
                                MISSING_ATTACH_FILES: import("../types/shared.js").Errors.MISSING_ATTACH_FILES;
                                MISSING_BAN_MEMBERS: import("../types/shared.js").Errors.MISSING_BAN_MEMBERS;
                                MISSING_CHANGE_NICKNAME: import("../types/shared.js").Errors.MISSING_CHANGE_NICKNAME;
                                MISSING_CONNECT: import("../types/shared.js").Errors.MISSING_CONNECT;
                                MISSING_CREATE_INSTANT_INVITE: import("../types/shared.js").Errors.MISSING_CREATE_INSTANT_INVITE;
                                MISSING_DEAFEN_MEMBERS: import("../types/shared.js").Errors.MISSING_DEAFEN_MEMBERS;
                                MISSING_EMBED_LINKS: import("../types/shared.js").Errors.MISSING_EMBED_LINKS;
                                MISSING_INTENT_GUILD_MEMBERS: import("../types/shared.js").Errors.MISSING_INTENT_GUILD_MEMBERS;
                                MISSING_KICK_MEMBERS: import("../types/shared.js").Errors.MISSING_KICK_MEMBERS;
                                MISSING_MANAGE_CHANNELS: import("../types/shared.js").Errors.MISSING_MANAGE_CHANNELS;
                                MISSING_MANAGE_EMOJIS: import("../types/shared.js").Errors.MISSING_MANAGE_EMOJIS;
                                MISSING_MANAGE_GUILD: import("../types/shared.js").Errors.MISSING_MANAGE_GUILD;
                                MISSING_MANAGE_MESSAGES: import("../types/shared.js").Errors.MISSING_MANAGE_MESSAGES;
                                MISSING_MANAGE_NICKNAMES: import("../types/shared.js").Errors.MISSING_MANAGE_NICKNAMES;
                                MISSING_MANAGE_ROLES: import("../types/shared.js").Errors.MISSING_MANAGE_ROLES;
                                MISSING_MANAGE_WEBHOOKS: import("../types/shared.js").Errors.MISSING_MANAGE_WEBHOOKS;
                                MISSING_MENTION_EVERYONE: import("../types/shared.js").Errors.MISSING_MENTION_EVERYONE;
                                MISSING_MOVE_MEMBERS: import("../types/shared.js").Errors.MISSING_MOVE_MEMBERS;
                                MISSING_MUTE_MEMBERS: import("../types/shared.js").Errors.MISSING_MUTE_MEMBERS;
                                MISSING_PRIORITY_SPEAKER: import("../types/shared.js").Errors.MISSING_PRIORITY_SPEAKER;
                                MISSING_READ_MESSAGE_HISTORY: import("../types/shared.js").Errors.MISSING_READ_MESSAGE_HISTORY;
                                MISSING_SEND_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_MESSAGES;
                                MISSING_SEND_TTS_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_TTS_MESSAGES;
                                MISSING_SPEAK: import("../types/shared.js").Errors.MISSING_SPEAK;
                                MISSING_STREAM: import("../types/shared.js").Errors.MISSING_STREAM;
                                MISSING_USE_VAD: import("../types/shared.js").Errors.MISSING_USE_VAD;
                                MISSING_USE_EXTERNAL_EMOJIS: import("../types/shared.js").Errors.MISSING_USE_EXTERNAL_EMOJIS;
                                MISSING_VIEW_AUDIT_LOG: import("../types/shared.js").Errors.MISSING_VIEW_AUDIT_LOG;
                                MISSING_VIEW_CHANNEL: import("../types/shared.js").Errors.MISSING_VIEW_CHANNEL;
                                MISSING_VIEW_GUILD_INSIGHTS: import("../types/shared.js").Errors.MISSING_VIEW_GUILD_INSIGHTS;
                                USERNAME_INVALID_CHARACTER: import("../types/shared.js").Errors.USERNAME_INVALID_CHARACTER;
                                USERNAME_INVALID_USERNAME: import("../types/shared.js").Errors.USERNAME_INVALID_USERNAME;
                                USERNAME_MAX_LENGTH: import("../types/shared.js").Errors.USERNAME_MAX_LENGTH;
                                USERNAME_MIN_LENGTH: import("../types/shared.js").Errors.USERNAME_MIN_LENGTH;
                                NONCE_TOO_LONG: import("../types/shared.js").Errors.NONCE_TOO_LONG;
                                INVITE_MAX_AGE_INVALID: import("../types/shared.js").Errors.INVITE_MAX_AGE_INVALID;
                                INVITE_MAX_USES_INVALID: import("../types/shared.js").Errors.INVITE_MAX_USES_INVALID;
                                RATE_LIMIT_RETRY_MAXED: import("../types/shared.js").Errors.RATE_LIMIT_RETRY_MAXED;
                                REQUEST_CLIENT_ERROR: import("../types/shared.js").Errors.REQUEST_CLIENT_ERROR;
                                REQUEST_SERVER_ERROR: import("../types/shared.js").Errors.REQUEST_SERVER_ERROR;
                                TOO_MANY_COMPONENTS: import("../types/shared.js").Errors.TOO_MANY_COMPONENTS;
                                TOO_MANY_ACTION_ROWS: import("../types/shared.js").Errors.TOO_MANY_ACTION_ROWS;
                                LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID: import("../types/shared.js").Errors.LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID;
                                COMPONENT_LABEL_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_LABEL_TOO_BIG;
                                COMPONENT_CUSTOM_ID_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_CUSTOM_ID_TOO_BIG;
                                BUTTON_REQUIRES_CUSTOM_ID: import("../types/shared.js").Errors.BUTTON_REQUIRES_CUSTOM_ID;
                                COMPONENT_SELECT_MUST_BE_ALONE: import("../types/shared.js").Errors.COMPONENT_SELECT_MUST_BE_ALONE;
                                COMPONENT_PLACEHOLDER_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_PLACEHOLDER_TOO_BIG;
                                COMPONENT_SELECT_MIN_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_LOW;
                                COMPONENT_SELECT_MIN_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_MANY;
                                COMPONENT_SELECT_MAX_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_LOW;
                                COMPONENT_SELECT_MAX_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_MANY;
                                COMPONENT_SELECT_OPTIONS_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_LOW;
                                COMPONENT_SELECT_OPTIONS_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_MANY;
                                SELECT_OPTION_LABEL_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_LABEL_TOO_BIG;
                                SELECT_OPTION_VALUE_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_VALUE_TOO_BIG;
                                SELECT_OPTION_TOO_MANY_DEFAULTS: import("../types/shared.js").Errors.SELECT_OPTION_TOO_MANY_DEFAULTS;
                                COMPONENT_SELECT_MIN_HIGHER_THAN_MAX: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_HIGHER_THAN_MAX;
                                CANNOT_ADD_USER_TO_ARCHIVED_THREADS: import("../types/shared.js").Errors.CANNOT_ADD_USER_TO_ARCHIVED_THREADS;
                                CANNOT_LEAVE_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_LEAVE_ARCHIVED_THREAD;
                                CANNOT_REMOVE_FROM_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_REMOVE_FROM_ARCHIVED_THREAD;
                                YOU_CAN_NOT_DM_THE_BOT_ITSELF: import("../types/shared.js").Errors.YOU_CAN_NOT_DM_THE_BOT_ITSELF;
                            };
                        };
                        events: import("../bot.js").EventHandlers;
                        applicationId: bigint;
                        token: string;
                        intents: import("../types/shared.js").GatewayIntents;
                        urlWSS: string;
                        utils: {
                            snowflakeToBigint: typeof import("../mod.js").snowflakeToBigint;
                            bigintToSnowflake: typeof import("../mod.js").bigintToSnowflake;
                            calculateShardId: typeof import("../mod.js").calculateShardId;
                            delay: typeof import("../mod.js").delay;
                            iconHashToBigInt: typeof import("../mod.js").iconHashToBigInt;
                            iconBigintToHash: typeof import("../mod.js").iconBigintToHash;
                            validateLength: typeof import("../mod.js").validateLength;
                            urlToBase64: typeof import("../util/urlToBase64.js").urlToBase64;
                            formatImageURL: typeof import("../mod.js").formatImageURL;
                            calculateBits: typeof import("../util/permissions.js").calculateBits;
                            calculatePermissions: typeof import("../util/permissions.js").calculatePermissions;
                        };
                        transformers: import("../bot.js").Transformers;
                        helpers: {
                            addToThread: (threadId: bigint, userId: bigint) => Promise<void>;
                            getActiveThreads: (guildId: bigint) => Promise<{
                                threads: Collection<bigint, import("./channel.js").Channel>;
                                members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                            }>;
                            getArchivedThreads: (channelId: bigint, options?: (import("../mod.js").ListArchivedThreads & {
                                type?: "private" | "public" | "privateJoinedThreads" | undefined;
                            }) | undefined) => Promise<{
                                threads: Collection<bigint, import("./channel.js").Channel>;
                                members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                                hasMore: boolean;
                            }>;
                            getThreadMember: (threadId: bigint, userId: bigint) => Promise<{
                                id: bigint | undefined;
                                userId: bigint | undefined;
                                joinTimestamp: number;
                                flags: number;
                            }>;
                            getThreadMembers: (threadId: bigint) => Promise<Collection<bigint | undefined, import("./threadMember.js").ThreadMember>>;
                            joinThread: (threadId: bigint) => Promise<void>;
                            leaveThread: (threadId: bigint) => Promise<void>;
                            removeThreadMember: (threadId: bigint, userId: bigint) => Promise<void>;
                            startThreadWithMessage: (channelId: bigint, messageId: bigint, options: import("../mod.js").StartThreadWithMessage) => Promise<import("./channel.js").Channel>;
                            startThreadWithoutMessage: (channelId: bigint, options: import("../mod.js").StartThreadWithoutMessage) => Promise<import("./channel.js").Channel>;
                            createForumPost: (channelId: bigint, options: import("../mod.js").CreateForumPostWithMessage) => Promise<import("./channel.js").Channel>;
                            createChannel: (guildId: bigint, options?: import("../mod.js").CreateGuildChannel | undefined, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                            createStageInstance: (options: import("../mod.js").CreateStageInstance) => Promise<import("./stageInstance.js").StageInstance>;
                            deleteChannel: (channelId: bigint, reason?: string | undefined) => Promise<void>;
                            deleteChannelOverwrite: (channelId: bigint, overwriteId: bigint) => Promise<void>;
                            deleteStageInstance: (channelId: bigint) => Promise<void>;
                            editChannel: (channelId: bigint, options: import("../mod.js").ModifyChannel, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                            editChannelOverwrite: (channelId: bigint, overwrite: import("../mod.js").OverwriteReadable) => Promise<void>;
                            followChannel: (sourceChannelId: bigint, targetChannelId: bigint) => Promise<bigint>;
                            getChannel: (channelId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                            getChannels: (guildId: bigint) => Promise<Collection<bigint, import("./channel.js").Channel>>;
                            getChannelWebhooks: (channelId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                            getPins: (channelId: bigint) => Promise<Message[]>;
                            getStageInstance: (channelId: bigint) => Promise<import("./stageInstance.js").StageInstance>;
                            startTyping: (channelId: bigint) => Promise<void>;
                            swapChannels: (guildId: bigint, channelPositions: import("../mod.js").ModifyGuildChannelPositions[]) => Promise<void>;
                            updateStageInstance: (channelId: bigint, data: import("../types/shared.js").AtLeastOne<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, {
                                topic: Pick<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, "topic">;
                            }>) => Promise<import("./stageInstance.js").StageInstance>;
                            updateBotVoiceState: (guildId: bigint, options: import("../mod.js").UpdateSelfVoiceState) => Promise<void>;
                            updateUserVoiceState: (guildId: bigint, options: import("../mod.js").UpdateOthersVoiceState) => Promise<void>;
                            addDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                            editDiscovery: (guildId: bigint, data: import("../mod.js").ModifyGuildDiscoveryMetadata) => Promise<{
                                guildId: bigint;
                                primaryCategoryId: number;
                                keywords: string[] | undefined;
                                emojiDiscoverabilityEnabled: boolean;
                                partnerActionedTimestamp: number | undefined;
                                partnerApplicationTimestamp: number | undefined;
                                categoryIds: number[];
                            }>;
                            getDiscovery: (guildId: bigint) => Promise<{
                                guildId: bigint;
                                primaryCategoryId: number;
                                keywords: string[] | undefined;
                                emojiDiscoverabilityEnabled: boolean;
                                partnerActionedTimestamp: number | undefined;
                                partnerApplicationTimestamp: number | undefined;
                                categoryIds: number[];
                            }>;
                            getDiscoveryCategories: () => Promise<Collection<number, import("../types/discord.js").DiscordDiscoveryCategory>>;
                            removeDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                            validDiscoveryTerm: (term: string) => Promise<boolean>;
                            createEmoji: (guildId: bigint, options: import("../mod.js").CreateGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                            deleteEmoji: (guildId: bigint, id: bigint, reason?: string | undefined) => Promise<void>;
                            editEmoji: (guildId: bigint, id: bigint, options: import("../mod.js").ModifyGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                            emojiUrl: (id: bigint, animated?: boolean | undefined) => string;
                            getEmoji: (guildId: bigint, emojiId: bigint) => Promise<import("./emoji.js").Emoji>;
                            getEmojis: (guildId: bigint) => Promise<Collection<bigint, import("./emoji.js").Emoji>>;
                            createScheduledEvent: (guildId: bigint, options: import("../mod.js").CreateScheduledEvent) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                            deleteScheduledEvent: (guildId: bigint, eventId: bigint) => Promise<void>;
                            editScheduledEvent: (guildId: bigint, eventId: bigint, options: Partial<import("../mod.js").EditScheduledEvent>) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                            getScheduledEvent: (guildId: bigint, eventId: bigint, options?: {
                                withUserCount?: boolean | undefined;
                            } | undefined) => Promise<import("./scheduledEvent.js").ScheduledEvent | undefined>;
                            getScheduledEvents: (guildId: bigint, options?: import("../mod.js").GetScheduledEvents | undefined) => Promise<Collection<bigint, import("./scheduledEvent.js").ScheduledEvent>>;
                            getScheduledEventUsers: (guildId: bigint, eventId: bigint, options?: (import("../mod.js").GetScheduledEventUsers & {
                                withMember: true;
                            }) | undefined) => Promise<Collection<bigint, {
                                user: User;
                                member: Member;
                            }>>;
                            getAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<import("./automodRule.js").AutoModerationRule>;
                            getAutomodRules: (guildId: bigint) => Promise<Collection<bigint, import("./automodRule.js").AutoModerationRule>>;
                            createAutomodRule: (guildId: bigint, options: import("../mod.js").CreateAutoModerationRuleOptions) => Promise<import("./automodRule.js").AutoModerationRule>;
                            editAutomodRule: (guildId: bigint, options: Partial<import("../mod.js").EditAutoModerationRuleOptions>) => Promise<import("./automodRule.js").AutoModerationRule>;
                            deleteAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<void>;
                            createGuild: (options: import("../mod.js").CreateGuild) => Promise<import("./guild.js").Guild>;
                            deleteGuild: (guildId: bigint) => Promise<void>;
                            editGuild: (guildId: bigint, options: import("../mod.js").ModifyGuild, shardId: number) => Promise<import("./guild.js").Guild>;
                            editWelcomeScreen: (guildId: bigint, options: import("../mod.js").ModifyGuildWelcomeScreen) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                            editWidget: (guildId: bigint, enabled: boolean, channelId?: string | null | undefined) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                            getAuditLogs: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => Promise<{
                                users: User[];
                                webhook: import("./webhook.js").Webhook[];
                                auditLogEntries: import("./auditLogEntry.js").AuditLogEntry[];
                                integrations: {
                                    id: bigint | undefined;
                                    name: string | undefined;
                                    type: "twitch" | "youtube" | "discord" | undefined;
                                    enabled: boolean | undefined;
                                    syncing: boolean | undefined;
                                    roleId: bigint | undefined;
                                    enableEmoticons: boolean | undefined;
                                    expireBehavior: import("../types/shared.js").IntegrationExpireBehaviors | undefined;
                                    expireGracePeriod: number | undefined;
                                    user: User | undefined;
                                    account: {
                                        id: bigint | undefined;
                                        name: string | undefined;
                                    };
                                    syncedAt: number | undefined;
                                    subscriberCount: number | undefined;
                                    revoked: boolean | undefined;
                                    application: {
                                        id: bigint;
                                        name: string;
                                        icon: bigint | undefined;
                                        description: string;
                                        bot: User | undefined;
                                    } | undefined;
                                }[];
                                threads: import("./channel.js").Channel[];
                                scheduledEvents: import("./scheduledEvent.js").ScheduledEvent[] | undefined;
                            }>;
                            getAvailableVoiceRegions: () => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                            getBan: (guildId: bigint, memberId: bigint) => Promise<{
                                reason: string | null;
                                user: User;
                            } | undefined>;
                            getBans: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => Promise<Collection<bigint, {
                                reason?: string | undefined;
                                user: User;
                            }>>;
                            getGuild: (guildId: bigint, options?: {
                                counts?: boolean | undefined;
                            } | undefined) => Promise<import("./guild.js").Guild | undefined>;
                            getGuildPreview: (guildId: bigint) => Promise<{
                                id: bigint;
                                name: string;
                                icon: string | undefined;
                                splash: string | undefined;
                                discoverySplash: string | undefined;
                                emojis: import("./emoji.js").Emoji[];
                                features: import("../types/shared.js").GuildFeatures[];
                                approximateMemberCount: number;
                                approximatePresenceCount: number;
                                description: string | undefined;
                                stickers: import("./sticker.js").Sticker[];
                            }>;
                            getPruneCount: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => Promise<number>;
                            getVanityUrl: (guildId: bigint) => Promise<{
                                uses: number | undefined;
                                code: string | undefined;
                            }>;
                            getVoiceRegions: (guildId: bigint) => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                            getWelcomeScreen: (guildId: bigint) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                            getWidget: (guildId: bigint) => Promise<import("./widget.js").GuildWidget>;
                            getWidgetImageURL: (guildId: bigint, options?: import("../mod.js").GetGuildWidgetImageQuery | undefined) => Promise<string>;
                            getWidgetSettings: (guildId: bigint) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                            guildBannerURL: (id: bigint, options: {
                                banner?: string | bigint | undefined;
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            }) => string | undefined;
                            guildIconURL: (id: bigint, icon: bigint | undefined, options?: {
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            } | undefined) => string | undefined;
                            guildSplashURL: (id: bigint, splash: bigint | undefined, options?: {
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            } | undefined) => string | undefined;
                            leaveGuild: (guildId: bigint) => Promise<void>;
                            deleteIntegration: (guildId: bigint, id: bigint) => Promise<void>;
                            getIntegrations: (guildId: bigint) => Promise<Collection<bigint, import("./integration.js").Integration>>;
                            createApplicationCommand: (options: import("../mod.js").CreateApplicationCommand | import("../mod.js").CreateContextApplicationCommand, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                            makeOptionsForCommand: () => import("../types/discord.js").DiscordApplicationCommandOption[];
                            isContextApplicationCommand: () => boolean;
                            deleteApplicationCommand: (id: bigint, guildId?: bigint | undefined) => Promise<void>;
                            deleteInteractionResponse: (token: string, messageId?: bigint | undefined) => Promise<void>;
                            editApplicationCommandPermissions: (guildId: bigint, commandId: bigint, bearerToken: string, options: import("../mod.js").ApplicationCommandPermissions[]) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                            editInteractionResponse: (token: string, options: import("../mod.js").EditWebhookMessage & {
                                messageId?: bigint | undefined;
                            }) => Promise<Message | undefined>;
                            getApplicationCommand: (commandId: bigint, options?: import("../mod.js").GetApplicationCommand | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                            getApplicationCommandPermission: (guildId: bigint, commandId: bigint) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                            getApplicationCommandPermissions: (guildId: bigint) => Promise<Collection<bigint, import("./applicationCommandPermission.js").ApplicationCommandPermission>>;
                            getApplicationCommands: (guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                            upsertApplicationCommand: (commandId: bigint, options: import("../types/shared.js").AtLeastOne<import("../mod.js").CreateContextApplicationCommand, {
                                type: Pick<import("../mod.js").CreateContextApplicationCommand, "type">;
                                description: Pick<import("../mod.js").CreateContextApplicationCommand, "description">;
                                name: Pick<import("../mod.js").CreateContextApplicationCommand, "name">;
                                nameLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "nameLocalizations"> | undefined;
                                descriptionLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "descriptionLocalizations"> | undefined;
                                defaultMemberPermissions?: Pick<import("../mod.js").CreateContextApplicationCommand, "defaultMemberPermissions"> | undefined;
                                dmPermission?: Pick<import("../mod.js").CreateContextApplicationCommand, "dmPermission"> | undefined;
                            }> | import("../types/shared.js").AtLeastOne<import("../mod.js").CreateApplicationCommand, {
                                name: Pick<import("../mod.js").CreateApplicationCommand, "name">;
                                nameLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "nameLocalizations"> | undefined;
                                description: Pick<import("../mod.js").CreateApplicationCommand, "description">;
                                descriptionLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "descriptionLocalizations"> | undefined;
                                type?: Pick<import("../mod.js").CreateApplicationCommand, "type"> | undefined;
                                options?: Pick<import("../mod.js").CreateApplicationCommand, "options"> | undefined;
                                defaultMemberPermissions?: Pick<import("../mod.js").CreateApplicationCommand, "defaultMemberPermissions"> | undefined;
                                dmPermission?: Pick<import("../mod.js").CreateApplicationCommand, "dmPermission"> | undefined;
                            }>, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                            upsertApplicationCommands: (options: (import("../mod.js").CreateContextApplicationCommand | import("../mod.js").UpsertApplicationCommands)[], guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                            deleteFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<void>;
                            editFollowupMessage: (interactionToken: string, messageId: bigint, options: import("../mod.js").EditWebhookMessage) => Promise<Message>;
                            getFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<Message>;
                            getOriginalInteractionResponse: (token: string) => Promise<Message>;
                            sendInteractionResponse: (id: bigint, token: string, options: import("../mod.js").InteractionResponse) => Promise<Message | undefined>;
                            verifySignature: () => {
                                isValid: boolean;
                                body: string;
                            };
                            createInvite: (channelId: bigint, options?: import("../mod.js").CreateChannelInvite | undefined) => Promise<{
                                code: string;
                                guildId: bigint | undefined;
                                channelId: bigint | undefined;
                                inviter: User | undefined;
                                targetType: import("../types/shared.js").TargetTypes | undefined;
                                targetUser: User | undefined;
                                targetApplicationId: bigint | undefined;
                                approximatePresenceCount: number | undefined;
                                approximateMemberCount: number | undefined;
                                expiresAt: number | undefined;
                            }>;
                            deleteInvite: (inviteCode: string) => Promise<void>;
                            getChannelInvites: (channelId: bigint) => Promise<Collection<string, {
                                uses: number;
                                maxUses: number;
                                maxAge: number;
                                temporary: boolean;
                                createdAt: number;
                            }>>;
                            getInvite: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => Promise<{
                                code: string;
                                guildId: bigint | undefined;
                                channelId: bigint | undefined;
                                inviter: User | undefined;
                                targetType: import("../types/shared.js").TargetTypes | undefined;
                                targetUser: User | undefined;
                                targetApplicationId: bigint | undefined;
                                approximatePresenceCount: number | undefined;
                                approximateMemberCount: number | undefined;
                                expiresAt: number | undefined;
                            }>;
                            getInvites: (guildId: bigint) => Promise<Collection<string, {
                                uses: number;
                                maxUses: number;
                                maxAge: number;
                                temporary: boolean;
                                createdAt: number;
                            }>>;
                            avatarURL: (userId: bigint, discriminator: string, options?: {
                                avatar: bigint | undefined;
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            } | undefined) => string;
                            banMember: (guildId: bigint, id: bigint, options?: import("../mod.js").CreateGuildBan | undefined) => Promise<void>;
                            editBotNickname: (guildId: bigint, options: {
                                nick: string | null;
                                reason?: string | undefined;
                            }) => Promise<string | undefined>;
                            editMember: (guildId: bigint, memberId: bigint, options: import("../mod.js").ModifyGuildMember) => Promise<Member>;
                            fetchMembers: (guildId: bigint, options?: Omit<import("../mod.js").RequestGuildMembers, "guildId"> | undefined) => Promise<void>;
                            getDmChannel: (userId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                            getMember: (guildId: bigint, id: bigint) => Promise<Member | undefined>;
                            getMembers: (guildId: bigint, options: import("../mod.js").ListGuildMembers) => Promise<Collection<bigint, Member>>;
                            kickMember: (guildId: bigint, memberId: bigint, reason?: string | undefined) => Promise<void>;
                            pruneMembers: (guildId: bigint, options: import("../mod.js").BeginGuildPrune) => Promise<number>;
                            searchMembers: (guildId: bigint, query: string, options?: Omit<import("../mod.js").SearchMembers, "query"> | undefined) => Promise<Collection<bigint, Member>>;
                            unbanMember: (guildId: bigint, id: bigint) => Promise<void>;
                            addReaction: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                            addReactions: (channelId: bigint, messageId: bigint, reactions: string[], ordered?: boolean | undefined) => Promise<void>;
                            deleteMessage: (channelId: bigint, messageId: bigint, reason?: string | undefined, delayMilliseconds?: number | undefined) => Promise<void>;
                            deleteMessages: (channelId: bigint, ids: bigint[], reason?: string | undefined) => Promise<void>;
                            editMessage: (channelId: bigint, messageId: bigint, content: import("../mod.js").EditMessage) => Promise<Message>;
                            getMessage: (channelId: bigint, id: bigint) => Promise<Message | undefined>;
                            getMessages: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => Promise<Collection<bigint, Message>>;
                            isGetMessagesAfter: () => boolean;
                            isGetMessagesBefore: () => boolean;
                            isGetMessagesAround: () => boolean;
                            isGetMessagesLimit: () => boolean;
                            getReactions: (channelId: bigint, messageId: bigint, reaction: string, options?: import("../mod.js").GetReactions | undefined) => Promise<Collection<bigint, User>>;
                            pinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                            publishMessage: (channelId: bigint, messageId: bigint) => Promise<Message>;
                            removeAllReactions: (channelId: bigint, messageId: bigint) => Promise<void>;
                            removeReaction: (channelId: bigint, messageId: bigint, reaction: string, options?: {
                                userId?: bigint | undefined;
                            } | undefined) => Promise<void>;
                            removeReactionEmoji: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                            sendMessage: (channelId: bigint, content: import("../mod.js").CreateMessage) => Promise<Message>;
                            unpinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                            editBotProfile: (options: {
                                username?: string | undefined;
                                botAvatarURL?: string | null | undefined;
                            }) => Promise<User>;
                            editBotStatus: (data: import("../mod.js").StatusUpdate) => Promise<void>;
                            editShardStatus: (shardId: number, data: import("../mod.js").StatusUpdate) => void;
                            getGatewayBot: () => Promise<import("./gatewayBot.js").GetGatewayBot>;
                            getUser: (userId: bigint) => Promise<User | undefined>;
                            nitroStickerPacks: () => Promise<import("./sticker.js").StickerPack[]>;
                            getApplicationInfo: () => Promise<import("./application.js").Application>;
                            addRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                            createRole: (guildId: bigint, options: import("../mod.js").CreateGuildRole, reason?: string | undefined) => Promise<Role>;
                            deleteRole: (guildId: bigint, id: bigint) => Promise<void>;
                            editRole: (guildId: bigint, id: bigint, options: import("../mod.js").EditGuildRole) => Promise<Role>;
                            getRoles: (guildId: bigint) => Promise<Collection<bigint, Role>>;
                            modifyRolePositions: (guildId: bigint, options: import("../mod.js").ModifyRolePositions[]) => Promise<Collection<bigint, Role>>;
                            removeRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                            createGuildFromTemplate: (templateCode: string, data: import("../mod.js").CreateGuildFromTemplate) => Promise<import("./guild.js").Guild>;
                            createGuildTemplate: (guildId: bigint, data: import("../mod.js").CreateTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                            deleteGuildTemplate: (guildId: bigint, templateCode: string) => Promise<void>;
                            editGuildTemplate: (guildId: bigint, templateCode: string, data: import("../mod.js").ModifyGuildTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                            getGuildTemplates: (guildId: bigint) => Promise<Collection<string, import("./template.js").Template>>;
                            getTemplate: (templateCode: string) => Promise<import("./template.js").Template>;
                            syncGuildTemplate: (guildId: bigint, templateCode: string) => Promise<import("../types/discord.js").DiscordTemplate>;
                            connectToVoiceChannel: (guildId: bigint, channelId: bigint, options?: import("../types/shared.js").AtLeastOne<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, {
                                selfDeaf: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfDeaf">;
                                selfMute: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfMute">;
                            }> | undefined) => Promise<void>;
                            createWebhook: (channelId: bigint, options: import("../mod.js").CreateWebhook) => Promise<import("./webhook.js").Webhook>;
                            deleteWebhook: (webhookId: bigint, reason?: string | undefined) => Promise<void>;
                            deleteWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").DeleteWebhookMessageOptions | undefined) => Promise<void>;
                            deleteWebhookWithToken: (webhookId: bigint, webhookToken: string) => Promise<void>;
                            editWebhook: (webhookId: bigint, options: import("../mod.js").ModifyWebhook) => Promise<import("./webhook.js").Webhook>;
                            editWebhookMessage: (webhookId: bigint, webhookToken: string, options: import("../mod.js").EditWebhookMessage & {
                                messageId?: bigint | undefined;
                                threadId?: bigint | undefined;
                            }) => Promise<Message>;
                            editWebhookWithToken: (webhookId: bigint, webhookToken: string, options: Omit<import("../mod.js").ModifyWebhook, "channelId">) => Promise<import("./webhook.js").Webhook>;
                            getWebhook: (webhookId: bigint) => Promise<import("./webhook.js").Webhook | undefined>;
                            getWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").GetWebhookMessageOptions | undefined) => Promise<Message>;
                            getWebhooks: (guildId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                            getWebhookWithToken: (webhookId: bigint, token: string) => Promise<import("./webhook.js").Webhook>;
                            sendWebhook: (webhookId: bigint, webhookToken: string, options: import("../mod.js").ExecuteWebhook) => Promise<Message | undefined>;
                        };
                        rest: {
                            version: number;
                            token: string;
                            debug: (text: string) => unknown;
                            customUrl: string;
                            maxRetryCount: number;
                            secretKey: string;
                            checkRateLimits: typeof import("../mod.js").checkRateLimits;
                            cleanupQueues: typeof import("../mod.js").cleanupQueues;
                            processQueue: typeof import("../mod.js").processQueue;
                            processRateLimitedPaths: typeof import("../mod.js").processRateLimitedPaths;
                            processRequestHeaders: typeof import("../mod.js").processRequestHeaders;
                            processRequest: typeof import("../mod.js").processRequest;
                            createRequestBody: typeof import("../mod.js").createRequestBody;
                            runMethod: typeof import("../mod.js").runMethod;
                            simplifyUrl: typeof import("../mod.js").simplifyUrl;
                            processGlobalQueue: typeof import("../mod.js").processGlobalQueue;
                            convertRestError: typeof import("../mod.js").convertRestError;
                            sendRequest: typeof import("../mod.js").sendRequest;
                            invalidRequests: number;
                            maxInvalidRequests: number;
                            invalidRequestsInterval: number;
                            invalidRequestsTimeoutId: number;
                            invalidRequestsSafetyAmount: number;
                            invalidRequestFrozenAt: number;
                            invalidRequestErrorStatuses: number[];
                            pathQueues: Map<string, {
                                isWaiting: boolean;
                                requests: {
                                    request: import("../mod.js").RestRequest;
                                    payload: import("../mod.js").RestPayload;
                                }[];
                            }>;
                            processingQueue: boolean;
                            processingRateLimitedPaths: boolean;
                            globallyRateLimited: boolean;
                            globalQueue: {
                                request: import("../mod.js").RestRequest;
                                payload: import("../mod.js").RestPayload;
                                basicURL: string;
                                urlToUse: string;
                            }[];
                            globalQueueProcessing: boolean;
                            rateLimitedPaths: Map<string, import("../mod.js").RestRateLimitedPath>;
                        };
                        gateway: {
                            stop: (code: number, reason: string) => Promise<void>;
                            gatewayBot: {
                                url: string;
                                shards: number;
                                sessionStartLimit: {
                                    total: number;
                                    remaining: number;
                                    resetAfter: number;
                                    maxConcurrency: number;
                                };
                            };
                            spawnShardDelay: number;
                            shardsPerWorker: number;
                            totalWorkers: number;
                            firstShardId: number;
                            lastShardId: number;
                            buckets: Collection<number, {
                                workers: {
                                    id: number;
                                    queue: number[];
                                }[];
                                leak: import("../util/bucket.js").LeakyBucket;
                            }>;
                            prepareBuckets: () => void;
                            spawnShards: () => void;
                            tellWorkerToIdentify: (workerId: number, shardId: number, bucketId: number) => Promise<void>;
                            debug: (text: import("../mod.js").GatewayDebugEvents, ...args: any[]) => unknown;
                            calculateTotalShards: () => number;
                            calculateWorkerId: (shardId: number) => number;
                            manager: {
                                shards: Collection<number, {
                                    gatewayConfig: import("../mod.js").ShardGatewayConfig;
                                    heart: import("../mod.js").ShardHeart;
                                    id: number;
                                    maxRequestsPerRateLimitTick: number;
                                    previousSequenceNumber: number | null;
                                    rateLimitResetInterval: number;
                                    sessionId: string | undefined;
                                    socket: import("ws") | undefined;
                                    state: import("../mod.js").ShardState;
                                    totalShards: number;
                                    events: import("../mod.js").ShardEvents;
                                    calculateSafeRequests: () => number;
                                    close: (code: number, reason: string) => void;
                                    connect: () => Promise<void>;
                                    identify: () => Promise<void>;
                                    isOpen: () => boolean;
                                    makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                                    resume: () => Promise<void>;
                                    send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                                    shutdown: () => Promise<void>;
                                    bucket: import("../util/bucket.js").LeakyBucket;
                                    handleClose: (close: CloseEvent) => Promise<void>;
                                    handleMessage: (message: MessageEvent<any>) => Promise<void>;
                                    requestIdentify: () => Promise<void>;
                                    offlineSendQueue: ((_?: unknown) => void)[];
                                    resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                    startHeartbeating: (interval: number) => void;
                                    stopHeartbeating: () => void;
                                }>;
                                gatewayConfig: {
                                    url?: string | undefined;
                                    version?: number | undefined;
                                    compress?: boolean | undefined;
                                    intents?: number | undefined;
                                    properties?: {
                                        browser: string;
                                        os: string;
                                        device: string;
                                    } | undefined;
                                    token: string;
                                };
                                totalShards: number;
                                createShardOptions: {
                                    state?: import("../mod.js").ShardState | undefined;
                                    close?: {} | undefined;
                                    resume?: {} | undefined;
                                    connect?: {} | undefined;
                                    calculateSafeRequests?: {} | undefined;
                                    handleClose?: {} | undefined;
                                    handleMessage?: {} | undefined;
                                    identify?: {} | undefined;
                                    isOpen?: {} | undefined;
                                    makePresence?: {} | undefined;
                                    maxRequestsPerRateLimitTick?: number | undefined;
                                    previousSequenceNumber?: number | undefined;
                                    rateLimitResetInterval?: number | undefined;
                                    send?: {} | undefined;
                                    shutdown?: {} | undefined;
                                    startHeartbeating?: {} | undefined;
                                    stopHeartbeating?: {} | undefined;
                                    heart?: {
                                        intervalId?: number | undefined;
                                        lastAck?: number | undefined;
                                        lastBeat?: number | undefined;
                                        rtt?: number | undefined;
                                        timeoutId?: number | undefined;
                                        interval: number;
                                        acknowledged: boolean;
                                    } | undefined;
                                    bucket?: {
                                        max: number;
                                        waiting: ((_?: unknown) => void)[];
                                        refillInterval: number;
                                        refillAmount: number;
                                        tokens: () => number;
                                        acquire: (amount: number, highPriority?: boolean | undefined) => Promise<void>;
                                        nextRefill: () => number;
                                        lastRefill: number;
                                        allowAcquire: boolean;
                                        tokensState: number;
                                    } | undefined;
                                    offlineSendQueue?: {
                                        d?: unknown;
                                        op: import("../types/shared.js").GatewayOpcodes;
                                    }[] | undefined;
                                    resolves?: {
                                        [Symbol.toStringTag]: string;
                                        [Symbol.iterator]: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                        forEach: (callbackfn: (value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void, key: "READY" | "RESUMED" | "INVALID_SESSION", map: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>) => void, thisArg?: any) => void;
                                        entries: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                        keys: () => IterableIterator<"READY" | "RESUMED" | "INVALID_SESSION">;
                                        values: () => IterableIterator<(payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                        set: (key: "READY" | "RESUMED" | "INVALID_SESSION", value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void) => Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                        clear: () => void;
                                        size: number;
                                        get: (key: "READY" | "RESUMED" | "INVALID_SESSION") => ((payload: import("../types/discord.js").DiscordGatewayPayload) => void) | undefined;
                                        delete: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                                        has: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                                    } | undefined;
                                    events: {
                                        connected?: {} | undefined;
                                        connecting?: {} | undefined;
                                        disconnected?: {} | undefined;
                                        heartbeat?: {} | undefined;
                                        heartbeatAck?: {} | undefined;
                                        hello?: {} | undefined;
                                        invalidSession?: {} | undefined;
                                        resuming?: {} | undefined;
                                        resumed?: {} | undefined;
                                        requestedReconnect?: {} | undefined;
                                        identifying?: {} | undefined;
                                        identified?: {} | undefined;
                                        message: (shard: {
                                            gatewayConfig: import("../mod.js").ShardGatewayConfig;
                                            heart: import("../mod.js").ShardHeart;
                                            id: number;
                                            maxRequestsPerRateLimitTick: number;
                                            previousSequenceNumber: number | null;
                                            rateLimitResetInterval: number;
                                            sessionId: string | undefined;
                                            socket: import("ws") | undefined;
                                            state: import("../mod.js").ShardState;
                                            totalShards: number;
                                            events: import("../mod.js").ShardEvents;
                                            calculateSafeRequests: () => number;
                                            close: (code: number, reason: string) => void;
                                            connect: () => Promise<void>;
                                            identify: () => Promise<void>;
                                            isOpen: () => boolean;
                                            makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                                            resume: () => Promise<void>;
                                            send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                                            shutdown: () => Promise<void>;
                                            bucket: import("../util/bucket.js").LeakyBucket;
                                            handleClose: (close: CloseEvent) => Promise<void>;
                                            handleMessage: (message: MessageEvent<any>) => Promise<void>;
                                            requestIdentify: () => Promise<void>;
                                            offlineSendQueue: ((_?: unknown) => void)[];
                                            resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                            startHeartbeating: (interval: number) => void;
                                            stopHeartbeating: () => void;
                                        }, payload: import("../types/discord.js").DiscordGatewayPayload) => unknown;
                                    };
                                };
                                requestIdentify: (shardId: number) => Promise<void>;
                                identify: (shardId: number) => Promise<void>;
                                kill: (shardId: number) => Promise<void>;
                            };
                        };
                        handlers: {
                            READY: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_PINS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_BAN_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_BAN_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_EMOJIS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_INTEGRATIONS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBERS_CHUNK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_ROLE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_ROLE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_ROLE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_USER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_USER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTERACTION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INVITE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INVITE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_DELETE_BULK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_REMOVE_ALL: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_REMOVE_EMOJI: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            PRESENCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            TYPING_START: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            USER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            VOICE_SERVER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            VOICE_STATE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            WEBHOOKS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTEGRATION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTEGRATION_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTEGRATION_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            STAGE_INSTANCE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            STAGE_INSTANCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            STAGE_INSTANCE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_LIST_SYNC: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_MEMBERS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_LOADED_DD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                        };
                        activeGuildIds: Set<bigint>;
                        cache: {
                            unrepliedInteractions: Set<bigint>;
                            fetchAllMembersProcessingRequests: Map<string, Function>;
                        };
                        enabledPlugins: Set<string>;
                    } | undefined;
                    intervalId?: number | undefined;
                    filter: (value: Attachment, key: bigint, ...args: any[]) => boolean;
                    interval: number;
                } | undefined;
                [Symbol.toStringTag]: string;
                [Symbol.iterator]: () => IterableIterator<[bigint, Attachment]>;
                every: (callback: (value: Attachment, key: bigint) => boolean) => boolean;
                some: (callback: (value: Attachment, key: bigint) => boolean) => boolean;
                forEach: (callbackfn: (value: Attachment, key: bigint, map: Map<bigint, Attachment>) => void, thisArg?: any) => void;
                map: <T_6>(callback: (value: Attachment, key: bigint) => T_6) => T_6[];
                filter: (callback: (value: Attachment, key: bigint) => boolean) => Collection<bigint, Attachment>;
                reduce: <T_7>(callback: (accumulator: T_7, value: Attachment, key: bigint) => T_7, initialValue?: T_7 | undefined) => T_7;
                find: (callback: (value: Attachment, key: bigint) => boolean) => Attachment | undefined;
                entries: () => IterableIterator<[bigint, Attachment]>;
                keys: () => IterableIterator<bigint>;
                values: () => IterableIterator<Attachment>;
                set: (key: bigint, value: Attachment) => Collection<bigint, Attachment>;
                clear: () => void;
                size: number;
                get: (key: bigint) => Attachment | undefined;
                startSweeper: (options: import("../util/collection.js").CollectionSweeper<bigint, Attachment>) => number;
                stopSweeper: () => void;
                changeSweeperInterval: (newInterval: number) => void;
                changeSweeperFilter: (newFilter: (value: Attachment, key: bigint, bot: Bot) => boolean) => void;
                forceSet: (key: bigint, value: Attachment) => Collection<bigint, Attachment>;
                array: () => Attachment[];
                first: () => Attachment | undefined;
                last: () => Attachment | undefined;
                random: () => Attachment | undefined;
                delete: (key: bigint) => boolean;
                has: (key: bigint) => boolean;
            } | undefined;
            messages?: {
                maxSize?: number | undefined;
                sweeper?: {
                    bot?: {
                        handleDiscordPayload?: {} | undefined;
                        botGatewayData?: {
                            url: string;
                            shards: number;
                            sessionStartLimit: {
                                total: number;
                                remaining: number;
                                resetAfter: number;
                                maxConcurrency: number;
                            };
                        } | undefined;
                        id: bigint;
                        constants: {
                            DISCORDENO_VERSION: string;
                            USER_AGENT: string;
                            BASE_URL: string;
                            CDN_URL: string;
                            routes: {
                                GATEWAY_BOT: () => string;
                                AUTOMOD_RULES: (guildId: bigint) => string;
                                AUTOMOD_RULE: (guildId: bigint, ruleId: bigint) => string;
                                CHANNEL: (channelId: bigint) => string;
                                CHANNEL_MESSAGE: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_MESSAGES: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => string;
                                CHANNEL_PIN: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_PINS: (channelId: bigint) => string;
                                CHANNEL_BULK_DELETE: (channelId: bigint) => string;
                                CHANNEL_INVITES: (channelId: bigint) => string;
                                CHANNEL_WEBHOOKS: (channelId: bigint) => string;
                                CHANNEL_MESSAGE_REACTION_ME: (channelId: bigint, messageId: bigint, emoji: string) => string;
                                CHANNEL_MESSAGE_REACTION_USER: (channelId: bigint, messageId: bigint, emoji: string, userId: bigint) => string;
                                CHANNEL_MESSAGE_REACTIONS: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_MESSAGE_REACTION: (channelId: bigint, messageId: bigint, emoji: string, options?: import("../mod.js").GetReactions | undefined) => string;
                                CHANNEL_FOLLOW: (channelId: bigint) => string;
                                CHANNEL_MESSAGE_CROSSPOST: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_OVERWRITE: (channelId: bigint, overwriteId: bigint) => string;
                                CHANNEL_TYPING: (channelId: bigint) => string;
                                THREAD_START_PUBLIC: (channelId: bigint, messageId: bigint) => string;
                                THREAD_START_PRIVATE: (channelId: bigint) => string;
                                THREAD_ACTIVE: (guildId: bigint) => string;
                                THREAD_MEMBERS: (channelId: bigint) => string;
                                THREAD_ME: (channelId: bigint) => string;
                                THREAD_USER: (channelId: bigint, userId: bigint) => string;
                                THREAD_ARCHIVED: (channelId: bigint) => string;
                                THREAD_ARCHIVED_PUBLIC: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                                THREAD_ARCHIVED_PRIVATE: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                                THREAD_ARCHIVED_PRIVATE_JOINED: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                                FORUM_START: (channelId: bigint) => string;
                                GUILD: (guildId: bigint, withCounts?: boolean | undefined) => string;
                                GUILDS: () => string;
                                GUILD_AUDIT_LOGS: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => string;
                                GUILD_BAN: (guildId: bigint, userId: bigint) => string;
                                GUILD_BANS: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => string;
                                GUILD_BANNER: (guildId: bigint, icon: string) => string;
                                GUILD_CHANNELS: (guildId: bigint) => string;
                                GUILD_WIDGET: (guildId: bigint) => string;
                                GUILD_WIDGET_JSON: (guildId: bigint) => string;
                                GUILD_WIDGET_IMAGE: (guildId: bigint, style?: "shield" | "banner1" | "banner2" | "banner3" | "banner4" | undefined) => string;
                                GUILD_EMOJI: (guildId: bigint, emojiId: bigint) => string;
                                GUILD_EMOJIS: (guildId: bigint) => string;
                                GUILD_ICON: (guildId: bigint, icon: string) => string;
                                GUILD_INTEGRATION: (guildId: bigint, integrationId: bigint) => string;
                                GUILD_INTEGRATION_SYNC: (guildId: bigint, integrationId: bigint) => string;
                                GUILD_INTEGRATIONS: (guildId: bigint) => string;
                                GUILD_INVITES: (guildId: bigint) => string;
                                GUILD_LEAVE: (guildId: bigint) => string;
                                GUILD_MEMBER: (guildId: bigint, userId: bigint) => string;
                                GUILD_MEMBERS: (guildId: bigint, options?: import("../mod.js").ListGuildMembers | undefined) => string;
                                GUILD_MEMBER_ROLE: (guildId: bigint, memberId: bigint, roleId: bigint) => string;
                                GUILD_MEMBERS_SEARCH: (guildId: bigint, query: string, options?: {
                                    limit?: number | undefined;
                                } | undefined) => string;
                                GUILD_PRUNE: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => string;
                                GUILD_REGIONS: (guildId: bigint) => string;
                                GUILD_ROLE: (guildId: bigint, roleId: bigint) => string;
                                GUILD_ROLES: (guildId: bigint) => string;
                                GUILD_SPLASH: (guildId: bigint, icon: string) => string;
                                GUILD_VANITY_URL: (guildId: bigint) => string;
                                GUILD_WEBHOOKS: (guildId: bigint) => string;
                                TEMPLATE: (code: string) => string;
                                GUILD_TEMPLATE: (guildId: bigint, code: string) => string;
                                GUILD_TEMPLATES: (guildId: bigint) => string;
                                GUILD_PREVIEW: (guildId: bigint) => string;
                                UPDATE_VOICE_STATE: (guildId: bigint, userId?: bigint | undefined) => string;
                                GUILD_WELCOME_SCREEN: (guildId: bigint) => string;
                                GUILD_SCHEDULED_EVENTS: (guildId: bigint, withUserCount?: boolean | undefined) => string;
                                GUILD_SCHEDULED_EVENT: (guildId: bigint, eventId: bigint, withUserCount?: boolean | undefined) => string;
                                GUILD_SCHEDULED_EVENT_USERS: (guildId: bigint, eventId: bigint, options?: import("../mod.js").GetScheduledEventUsers | undefined) => string;
                                VOICE_REGIONS: () => string;
                                INVITE: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => string;
                                WEBHOOK: (webhookId: bigint, token: string, options?: {
                                    wait?: boolean | undefined;
                                    threadId?: bigint | undefined;
                                } | undefined) => string;
                                WEBHOOK_ID: (webhookId: bigint) => string;
                                WEBHOOK_MESSAGE: (webhookId: bigint, token: string, messageId: bigint, options?: {
                                    threadId?: bigint | undefined;
                                } | undefined) => string;
                                WEBHOOK_MESSAGE_ORIGINAL: (webhookId: bigint, token: string, options?: {
                                    threadId?: bigint | undefined;
                                } | undefined) => string;
                                WEBHOOK_SLACK: (webhookId: bigint, token: string) => string;
                                WEBHOOK_GITHUB: (webhookId: bigint, token: string) => string;
                                COMMANDS: (applicationId: bigint) => string;
                                COMMANDS_GUILD: (applicationId: bigint, guildId: bigint) => string;
                                COMMANDS_PERMISSIONS: (applicationId: bigint, guildId: bigint) => string;
                                COMMANDS_PERMISSION: (applicationId: bigint, guildId: bigint, commandId: bigint) => string;
                                COMMANDS_ID: (applicationId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                                COMMANDS_GUILD_ID: (applicationId: bigint, guildId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                                INTERACTION_ID_TOKEN: (interactionId: bigint, token: string) => string;
                                INTERACTION_ORIGINAL_ID_TOKEN: (interactionId: bigint, token: string) => string;
                                INTERACTION_ID_TOKEN_MESSAGE_ID: (applicationId: bigint, token: string, messageId: bigint) => string;
                                USER: (userId: bigint) => string;
                                USER_BOT: () => string;
                                USER_GUILDS: () => string;
                                USER_AVATAR: (userId: bigint, icon: string) => string;
                                USER_DEFAULT_AVATAR: (icon: number) => string;
                                USER_DM: () => string;
                                USER_CONNECTIONS: () => string;
                                USER_NICK: (guildId: bigint) => string;
                                DISCOVERY_CATEGORIES: () => string;
                                DISCOVERY_VALID_TERM: (term: string) => string;
                                DISCOVERY_METADATA: (guildId: bigint) => string;
                                DISCOVERY_SUBCATEGORY: (guildId: bigint, categoryId: number) => string;
                                OAUTH2_APPLICATION: () => string;
                                STAGE_INSTANCES: () => string;
                                STAGE_INSTANCE: (channelId: bigint) => string;
                                NITRO_STICKER_PACKS: () => string;
                            };
                            regexes: {
                                SLASH_COMMANDS_NAME_REGEX: RegExp;
                                CONTEXT_MENU_COMMANDS_NAME_REGEX: RegExp;
                                CHANNEL_MENTION_REGEX: RegExp;
                                DISCORD_SNOWFLAKE_REGEX: RegExp;
                            };
                            Errors: {
                                REQUEST_UNKNOWN_ERROR: import("../types/shared.js").Errors.REQUEST_UNKNOWN_ERROR;
                                GUILD_NOT_FOUND: import("../types/shared.js").Errors.GUILD_NOT_FOUND;
                                RULES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.RULES_CHANNEL_CANNOT_BE_DELETED;
                                UPDATES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.UPDATES_CHANNEL_CANNOT_BE_DELETED;
                                NICKNAMES_MAX_LENGTH: import("../types/shared.js").Errors.NICKNAMES_MAX_LENGTH;
                                MEMBER_NOT_IN_VOICE_CHANNEL: import("../types/shared.js").Errors.MEMBER_NOT_IN_VOICE_CHANNEL;
                                MESSAGE_MAX_LENGTH: import("../types/shared.js").Errors.MESSAGE_MAX_LENGTH;
                                BOTS_HIGHEST_ROLE_TOO_LOW: import("../types/shared.js").Errors.BOTS_HIGHEST_ROLE_TOO_LOW;
                                CHANNEL_NOT_FOUND: import("../types/shared.js").Errors.CHANNEL_NOT_FOUND;
                                CHANNEL_NOT_IN_GUILD: import("../types/shared.js").Errors.CHANNEL_NOT_IN_GUILD;
                                CHANNEL_NOT_TEXT_BASED: import("../types/shared.js").Errors.CHANNEL_NOT_TEXT_BASED;
                                CHANNEL_NOT_STAGE_VOICE: import("../types/shared.js").Errors.CHANNEL_NOT_STAGE_VOICE;
                                INVALID_TOPIC_LENGTH: import("../types/shared.js").Errors.INVALID_TOPIC_LENGTH;
                                GUILD_NOT_DISCOVERABLE: import("../types/shared.js").Errors.GUILD_NOT_DISCOVERABLE;
                                GUILD_WIDGET_NOT_ENABLED: import("../types/shared.js").Errors.GUILD_WIDGET_NOT_ENABLED;
                                MEMBER_NOT_FOUND: import("../types/shared.js").Errors.MEMBER_NOT_FOUND;
                                MEMBER_SEARCH_LIMIT_TOO_HIGH: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_HIGH;
                                MEMBER_SEARCH_LIMIT_TOO_LOW: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_LOW;
                                PRUNE_MAX_DAYS: import("../types/shared.js").Errors.PRUNE_MAX_DAYS;
                                ROLE_NOT_FOUND: import("../types/shared.js").Errors.ROLE_NOT_FOUND;
                                INVALID_THREAD_PARENT_CHANNEL_TYPE: import("../types/shared.js").Errors.INVALID_THREAD_PARENT_CHANNEL_TYPE;
                                GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS: import("../types/shared.js").Errors.GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS;
                                NOT_A_THREAD_CHANNEL: import("../types/shared.js").Errors.NOT_A_THREAD_CHANNEL;
                                MISSING_MANAGE_THREADS_AND_NOT_MEMBER: import("../types/shared.js").Errors.MISSING_MANAGE_THREADS_AND_NOT_MEMBER;
                                CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD: import("../types/shared.js").Errors.CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD;
                                HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS: import("../types/shared.js").Errors.HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS;
                                INVALID_GET_MESSAGES_LIMIT: import("../types/shared.js").Errors.INVALID_GET_MESSAGES_LIMIT;
                                DELETE_MESSAGES_MIN: import("../types/shared.js").Errors.DELETE_MESSAGES_MIN;
                                PRUNE_MIN_DAYS: import("../types/shared.js").Errors.PRUNE_MIN_DAYS;
                                INVALID_SLASH_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_DESCRIPTION;
                                INVALID_SLASH_NAME: import("../types/shared.js").Errors.INVALID_SLASH_NAME;
                                INVALID_SLASH_OPTIONS: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS;
                                INVALID_SLASH_OPTIONS_CHOICES: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICES;
                                TOO_MANY_SLASH_OPTIONS: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTIONS;
                                INVALID_SLASH_OPTION_CHOICE_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_CHOICE_NAME;
                                INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE;
                                TOO_MANY_SLASH_OPTION_CHOICES: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTION_CHOICES;
                                ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES: import("../types/shared.js").Errors.ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES;
                                INVALID_SLASH_OPTION_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_NAME;
                                INVALID_SLASH_OPTION_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_DESCRIPTION;
                                INVALID_CONTEXT_MENU_COMMAND_NAME: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_NAME;
                                INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION;
                                INVALID_WEBHOOK_NAME: import("../types/shared.js").Errors.INVALID_WEBHOOK_NAME;
                                INVALID_WEBHOOK_OPTIONS: import("../types/shared.js").Errors.INVALID_WEBHOOK_OPTIONS;
                                MISSING_ADD_REACTIONS: import("../types/shared.js").Errors.MISSING_ADD_REACTIONS;
                                MISSING_ADMINISTRATOR: import("../types/shared.js").Errors.MISSING_ADMINISTRATOR;
                                MISSING_ATTACH_FILES: import("../types/shared.js").Errors.MISSING_ATTACH_FILES;
                                MISSING_BAN_MEMBERS: import("../types/shared.js").Errors.MISSING_BAN_MEMBERS;
                                MISSING_CHANGE_NICKNAME: import("../types/shared.js").Errors.MISSING_CHANGE_NICKNAME;
                                MISSING_CONNECT: import("../types/shared.js").Errors.MISSING_CONNECT;
                                MISSING_CREATE_INSTANT_INVITE: import("../types/shared.js").Errors.MISSING_CREATE_INSTANT_INVITE;
                                MISSING_DEAFEN_MEMBERS: import("../types/shared.js").Errors.MISSING_DEAFEN_MEMBERS;
                                MISSING_EMBED_LINKS: import("../types/shared.js").Errors.MISSING_EMBED_LINKS;
                                MISSING_INTENT_GUILD_MEMBERS: import("../types/shared.js").Errors.MISSING_INTENT_GUILD_MEMBERS;
                                MISSING_KICK_MEMBERS: import("../types/shared.js").Errors.MISSING_KICK_MEMBERS;
                                MISSING_MANAGE_CHANNELS: import("../types/shared.js").Errors.MISSING_MANAGE_CHANNELS;
                                MISSING_MANAGE_EMOJIS: import("../types/shared.js").Errors.MISSING_MANAGE_EMOJIS;
                                MISSING_MANAGE_GUILD: import("../types/shared.js").Errors.MISSING_MANAGE_GUILD;
                                MISSING_MANAGE_MESSAGES: import("../types/shared.js").Errors.MISSING_MANAGE_MESSAGES;
                                MISSING_MANAGE_NICKNAMES: import("../types/shared.js").Errors.MISSING_MANAGE_NICKNAMES;
                                MISSING_MANAGE_ROLES: import("../types/shared.js").Errors.MISSING_MANAGE_ROLES;
                                MISSING_MANAGE_WEBHOOKS: import("../types/shared.js").Errors.MISSING_MANAGE_WEBHOOKS;
                                MISSING_MENTION_EVERYONE: import("../types/shared.js").Errors.MISSING_MENTION_EVERYONE;
                                MISSING_MOVE_MEMBERS: import("../types/shared.js").Errors.MISSING_MOVE_MEMBERS;
                                MISSING_MUTE_MEMBERS: import("../types/shared.js").Errors.MISSING_MUTE_MEMBERS;
                                MISSING_PRIORITY_SPEAKER: import("../types/shared.js").Errors.MISSING_PRIORITY_SPEAKER;
                                MISSING_READ_MESSAGE_HISTORY: import("../types/shared.js").Errors.MISSING_READ_MESSAGE_HISTORY;
                                MISSING_SEND_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_MESSAGES;
                                MISSING_SEND_TTS_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_TTS_MESSAGES;
                                MISSING_SPEAK: import("../types/shared.js").Errors.MISSING_SPEAK;
                                MISSING_STREAM: import("../types/shared.js").Errors.MISSING_STREAM;
                                MISSING_USE_VAD: import("../types/shared.js").Errors.MISSING_USE_VAD;
                                MISSING_USE_EXTERNAL_EMOJIS: import("../types/shared.js").Errors.MISSING_USE_EXTERNAL_EMOJIS;
                                MISSING_VIEW_AUDIT_LOG: import("../types/shared.js").Errors.MISSING_VIEW_AUDIT_LOG;
                                MISSING_VIEW_CHANNEL: import("../types/shared.js").Errors.MISSING_VIEW_CHANNEL;
                                MISSING_VIEW_GUILD_INSIGHTS: import("../types/shared.js").Errors.MISSING_VIEW_GUILD_INSIGHTS;
                                USERNAME_INVALID_CHARACTER: import("../types/shared.js").Errors.USERNAME_INVALID_CHARACTER;
                                USERNAME_INVALID_USERNAME: import("../types/shared.js").Errors.USERNAME_INVALID_USERNAME;
                                USERNAME_MAX_LENGTH: import("../types/shared.js").Errors.USERNAME_MAX_LENGTH;
                                USERNAME_MIN_LENGTH: import("../types/shared.js").Errors.USERNAME_MIN_LENGTH;
                                NONCE_TOO_LONG: import("../types/shared.js").Errors.NONCE_TOO_LONG;
                                INVITE_MAX_AGE_INVALID: import("../types/shared.js").Errors.INVITE_MAX_AGE_INVALID;
                                INVITE_MAX_USES_INVALID: import("../types/shared.js").Errors.INVITE_MAX_USES_INVALID;
                                RATE_LIMIT_RETRY_MAXED: import("../types/shared.js").Errors.RATE_LIMIT_RETRY_MAXED;
                                REQUEST_CLIENT_ERROR: import("../types/shared.js").Errors.REQUEST_CLIENT_ERROR;
                                REQUEST_SERVER_ERROR: import("../types/shared.js").Errors.REQUEST_SERVER_ERROR;
                                TOO_MANY_COMPONENTS: import("../types/shared.js").Errors.TOO_MANY_COMPONENTS;
                                TOO_MANY_ACTION_ROWS: import("../types/shared.js").Errors.TOO_MANY_ACTION_ROWS;
                                LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID: import("../types/shared.js").Errors.LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID;
                                COMPONENT_LABEL_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_LABEL_TOO_BIG;
                                COMPONENT_CUSTOM_ID_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_CUSTOM_ID_TOO_BIG;
                                BUTTON_REQUIRES_CUSTOM_ID: import("../types/shared.js").Errors.BUTTON_REQUIRES_CUSTOM_ID;
                                COMPONENT_SELECT_MUST_BE_ALONE: import("../types/shared.js").Errors.COMPONENT_SELECT_MUST_BE_ALONE;
                                COMPONENT_PLACEHOLDER_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_PLACEHOLDER_TOO_BIG;
                                COMPONENT_SELECT_MIN_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_LOW;
                                COMPONENT_SELECT_MIN_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_MANY;
                                COMPONENT_SELECT_MAX_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_LOW;
                                COMPONENT_SELECT_MAX_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_MANY;
                                COMPONENT_SELECT_OPTIONS_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_LOW;
                                COMPONENT_SELECT_OPTIONS_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_MANY;
                                SELECT_OPTION_LABEL_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_LABEL_TOO_BIG;
                                SELECT_OPTION_VALUE_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_VALUE_TOO_BIG;
                                SELECT_OPTION_TOO_MANY_DEFAULTS: import("../types/shared.js").Errors.SELECT_OPTION_TOO_MANY_DEFAULTS;
                                COMPONENT_SELECT_MIN_HIGHER_THAN_MAX: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_HIGHER_THAN_MAX;
                                CANNOT_ADD_USER_TO_ARCHIVED_THREADS: import("../types/shared.js").Errors.CANNOT_ADD_USER_TO_ARCHIVED_THREADS;
                                CANNOT_LEAVE_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_LEAVE_ARCHIVED_THREAD;
                                CANNOT_REMOVE_FROM_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_REMOVE_FROM_ARCHIVED_THREAD;
                                YOU_CAN_NOT_DM_THE_BOT_ITSELF: import("../types/shared.js").Errors.YOU_CAN_NOT_DM_THE_BOT_ITSELF;
                            };
                        };
                        events: import("../bot.js").EventHandlers;
                        applicationId: bigint;
                        token: string;
                        intents: import("../types/shared.js").GatewayIntents;
                        urlWSS: string;
                        utils: {
                            snowflakeToBigint: typeof import("../mod.js").snowflakeToBigint;
                            bigintToSnowflake: typeof import("../mod.js").bigintToSnowflake;
                            calculateShardId: typeof import("../mod.js").calculateShardId;
                            delay: typeof import("../mod.js").delay;
                            iconHashToBigInt: typeof import("../mod.js").iconHashToBigInt;
                            iconBigintToHash: typeof import("../mod.js").iconBigintToHash;
                            validateLength: typeof import("../mod.js").validateLength;
                            urlToBase64: typeof import("../util/urlToBase64.js").urlToBase64;
                            formatImageURL: typeof import("../mod.js").formatImageURL;
                            calculateBits: typeof import("../util/permissions.js").calculateBits;
                            calculatePermissions: typeof import("../util/permissions.js").calculatePermissions;
                        };
                        transformers: import("../bot.js").Transformers;
                        helpers: {
                            addToThread: (threadId: bigint, userId: bigint) => Promise<void>;
                            getActiveThreads: (guildId: bigint) => Promise<{
                                threads: Collection<bigint, import("./channel.js").Channel>;
                                members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                            }>;
                            getArchivedThreads: (channelId: bigint, options?: (import("../mod.js").ListArchivedThreads & {
                                type?: "private" | "public" | "privateJoinedThreads" | undefined;
                            }) | undefined) => Promise<{
                                threads: Collection<bigint, import("./channel.js").Channel>;
                                members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                                hasMore: boolean;
                            }>;
                            getThreadMember: (threadId: bigint, userId: bigint) => Promise<{
                                id: bigint | undefined;
                                userId: bigint | undefined;
                                joinTimestamp: number;
                                flags: number;
                            }>;
                            getThreadMembers: (threadId: bigint) => Promise<Collection<bigint | undefined, import("./threadMember.js").ThreadMember>>;
                            joinThread: (threadId: bigint) => Promise<void>;
                            leaveThread: (threadId: bigint) => Promise<void>;
                            removeThreadMember: (threadId: bigint, userId: bigint) => Promise<void>;
                            startThreadWithMessage: (channelId: bigint, messageId: bigint, options: import("../mod.js").StartThreadWithMessage) => Promise<import("./channel.js").Channel>;
                            startThreadWithoutMessage: (channelId: bigint, options: import("../mod.js").StartThreadWithoutMessage) => Promise<import("./channel.js").Channel>;
                            createForumPost: (channelId: bigint, options: import("../mod.js").CreateForumPostWithMessage) => Promise<import("./channel.js").Channel>;
                            createChannel: (guildId: bigint, options?: import("../mod.js").CreateGuildChannel | undefined, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                            createStageInstance: (options: import("../mod.js").CreateStageInstance) => Promise<import("./stageInstance.js").StageInstance>;
                            deleteChannel: (channelId: bigint, reason?: string | undefined) => Promise<void>;
                            deleteChannelOverwrite: (channelId: bigint, overwriteId: bigint) => Promise<void>;
                            deleteStageInstance: (channelId: bigint) => Promise<void>;
                            editChannel: (channelId: bigint, options: import("../mod.js").ModifyChannel, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                            editChannelOverwrite: (channelId: bigint, overwrite: import("../mod.js").OverwriteReadable) => Promise<void>;
                            followChannel: (sourceChannelId: bigint, targetChannelId: bigint) => Promise<bigint>;
                            getChannel: (channelId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                            getChannels: (guildId: bigint) => Promise<Collection<bigint, import("./channel.js").Channel>>;
                            getChannelWebhooks: (channelId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                            getPins: (channelId: bigint) => Promise<Message[]>;
                            getStageInstance: (channelId: bigint) => Promise<import("./stageInstance.js").StageInstance>;
                            startTyping: (channelId: bigint) => Promise<void>;
                            swapChannels: (guildId: bigint, channelPositions: import("../mod.js").ModifyGuildChannelPositions[]) => Promise<void>;
                            updateStageInstance: (channelId: bigint, data: import("../types/shared.js").AtLeastOne<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, {
                                topic: Pick<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, "topic">;
                            }>) => Promise<import("./stageInstance.js").StageInstance>;
                            updateBotVoiceState: (guildId: bigint, options: import("../mod.js").UpdateSelfVoiceState) => Promise<void>;
                            updateUserVoiceState: (guildId: bigint, options: import("../mod.js").UpdateOthersVoiceState) => Promise<void>;
                            addDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                            editDiscovery: (guildId: bigint, data: import("../mod.js").ModifyGuildDiscoveryMetadata) => Promise<{
                                guildId: bigint;
                                primaryCategoryId: number;
                                keywords: string[] | undefined;
                                emojiDiscoverabilityEnabled: boolean;
                                partnerActionedTimestamp: number | undefined;
                                partnerApplicationTimestamp: number | undefined;
                                categoryIds: number[];
                            }>;
                            getDiscovery: (guildId: bigint) => Promise<{
                                guildId: bigint;
                                primaryCategoryId: number;
                                keywords: string[] | undefined;
                                emojiDiscoverabilityEnabled: boolean;
                                partnerActionedTimestamp: number | undefined;
                                partnerApplicationTimestamp: number | undefined;
                                categoryIds: number[];
                            }>;
                            getDiscoveryCategories: () => Promise<Collection<number, import("../types/discord.js").DiscordDiscoveryCategory>>;
                            removeDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                            validDiscoveryTerm: (term: string) => Promise<boolean>;
                            createEmoji: (guildId: bigint, options: import("../mod.js").CreateGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                            deleteEmoji: (guildId: bigint, id: bigint, reason?: string | undefined) => Promise<void>;
                            editEmoji: (guildId: bigint, id: bigint, options: import("../mod.js").ModifyGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                            emojiUrl: (id: bigint, animated?: boolean | undefined) => string;
                            getEmoji: (guildId: bigint, emojiId: bigint) => Promise<import("./emoji.js").Emoji>;
                            getEmojis: (guildId: bigint) => Promise<Collection<bigint, import("./emoji.js").Emoji>>;
                            createScheduledEvent: (guildId: bigint, options: import("../mod.js").CreateScheduledEvent) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                            deleteScheduledEvent: (guildId: bigint, eventId: bigint) => Promise<void>;
                            editScheduledEvent: (guildId: bigint, eventId: bigint, options: Partial<import("../mod.js").EditScheduledEvent>) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                            getScheduledEvent: (guildId: bigint, eventId: bigint, options?: {
                                withUserCount?: boolean | undefined;
                            } | undefined) => Promise<import("./scheduledEvent.js").ScheduledEvent | undefined>;
                            getScheduledEvents: (guildId: bigint, options?: import("../mod.js").GetScheduledEvents | undefined) => Promise<Collection<bigint, import("./scheduledEvent.js").ScheduledEvent>>;
                            getScheduledEventUsers: (guildId: bigint, eventId: bigint, options?: (import("../mod.js").GetScheduledEventUsers & {
                                withMember: true;
                            }) | undefined) => Promise<Collection<bigint, {
                                user: User;
                                member: Member;
                            }>>;
                            getAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<import("./automodRule.js").AutoModerationRule>;
                            getAutomodRules: (guildId: bigint) => Promise<Collection<bigint, import("./automodRule.js").AutoModerationRule>>;
                            createAutomodRule: (guildId: bigint, options: import("../mod.js").CreateAutoModerationRuleOptions) => Promise<import("./automodRule.js").AutoModerationRule>;
                            editAutomodRule: (guildId: bigint, options: Partial<import("../mod.js").EditAutoModerationRuleOptions>) => Promise<import("./automodRule.js").AutoModerationRule>;
                            deleteAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<void>;
                            createGuild: (options: import("../mod.js").CreateGuild) => Promise<import("./guild.js").Guild>;
                            deleteGuild: (guildId: bigint) => Promise<void>;
                            editGuild: (guildId: bigint, options: import("../mod.js").ModifyGuild, shardId: number) => Promise<import("./guild.js").Guild>;
                            editWelcomeScreen: (guildId: bigint, options: import("../mod.js").ModifyGuildWelcomeScreen) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                            editWidget: (guildId: bigint, enabled: boolean, channelId?: string | null | undefined) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                            getAuditLogs: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => Promise<{
                                users: User[];
                                webhook: import("./webhook.js").Webhook[];
                                auditLogEntries: import("./auditLogEntry.js").AuditLogEntry[];
                                integrations: {
                                    id: bigint | undefined;
                                    name: string | undefined;
                                    type: "twitch" | "youtube" | "discord" | undefined;
                                    enabled: boolean | undefined;
                                    syncing: boolean | undefined;
                                    roleId: bigint | undefined;
                                    enableEmoticons: boolean | undefined;
                                    expireBehavior: import("../types/shared.js").IntegrationExpireBehaviors | undefined;
                                    expireGracePeriod: number | undefined;
                                    user: User | undefined;
                                    account: {
                                        id: bigint | undefined;
                                        name: string | undefined;
                                    };
                                    syncedAt: number | undefined;
                                    subscriberCount: number | undefined;
                                    revoked: boolean | undefined;
                                    application: {
                                        id: bigint;
                                        name: string;
                                        icon: bigint | undefined;
                                        description: string;
                                        bot: User | undefined;
                                    } | undefined;
                                }[];
                                threads: import("./channel.js").Channel[];
                                scheduledEvents: import("./scheduledEvent.js").ScheduledEvent[] | undefined;
                            }>;
                            getAvailableVoiceRegions: () => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                            getBan: (guildId: bigint, memberId: bigint) => Promise<{
                                reason: string | null;
                                user: User;
                            } | undefined>;
                            getBans: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => Promise<Collection<bigint, {
                                reason?: string | undefined;
                                user: User;
                            }>>;
                            getGuild: (guildId: bigint, options?: {
                                counts?: boolean | undefined;
                            } | undefined) => Promise<import("./guild.js").Guild | undefined>;
                            getGuildPreview: (guildId: bigint) => Promise<{
                                id: bigint;
                                name: string;
                                icon: string | undefined;
                                splash: string | undefined;
                                discoverySplash: string | undefined;
                                emojis: import("./emoji.js").Emoji[];
                                features: import("../types/shared.js").GuildFeatures[];
                                approximateMemberCount: number;
                                approximatePresenceCount: number;
                                description: string | undefined;
                                stickers: import("./sticker.js").Sticker[];
                            }>;
                            getPruneCount: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => Promise<number>;
                            getVanityUrl: (guildId: bigint) => Promise<{
                                uses: number | undefined;
                                code: string | undefined;
                            }>;
                            getVoiceRegions: (guildId: bigint) => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                            getWelcomeScreen: (guildId: bigint) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                            getWidget: (guildId: bigint) => Promise<import("./widget.js").GuildWidget>;
                            getWidgetImageURL: (guildId: bigint, options?: import("../mod.js").GetGuildWidgetImageQuery | undefined) => Promise<string>;
                            getWidgetSettings: (guildId: bigint) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                            guildBannerURL: (id: bigint, options: {
                                banner?: string | bigint | undefined;
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            }) => string | undefined;
                            guildIconURL: (id: bigint, icon: bigint | undefined, options?: {
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            } | undefined) => string | undefined;
                            guildSplashURL: (id: bigint, splash: bigint | undefined, options?: {
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            } | undefined) => string | undefined;
                            leaveGuild: (guildId: bigint) => Promise<void>;
                            deleteIntegration: (guildId: bigint, id: bigint) => Promise<void>;
                            getIntegrations: (guildId: bigint) => Promise<Collection<bigint, import("./integration.js").Integration>>;
                            createApplicationCommand: (options: import("../mod.js").CreateApplicationCommand | import("../mod.js").CreateContextApplicationCommand, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                            makeOptionsForCommand: () => import("../types/discord.js").DiscordApplicationCommandOption[];
                            isContextApplicationCommand: () => boolean;
                            deleteApplicationCommand: (id: bigint, guildId?: bigint | undefined) => Promise<void>;
                            deleteInteractionResponse: (token: string, messageId?: bigint | undefined) => Promise<void>;
                            editApplicationCommandPermissions: (guildId: bigint, commandId: bigint, bearerToken: string, options: import("../mod.js").ApplicationCommandPermissions[]) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                            editInteractionResponse: (token: string, options: import("../mod.js").EditWebhookMessage & {
                                messageId?: bigint | undefined;
                            }) => Promise<Message | undefined>;
                            getApplicationCommand: (commandId: bigint, options?: import("../mod.js").GetApplicationCommand | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                            getApplicationCommandPermission: (guildId: bigint, commandId: bigint) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                            getApplicationCommandPermissions: (guildId: bigint) => Promise<Collection<bigint, import("./applicationCommandPermission.js").ApplicationCommandPermission>>;
                            getApplicationCommands: (guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                            upsertApplicationCommand: (commandId: bigint, options: import("../types/shared.js").AtLeastOne<import("../mod.js").CreateContextApplicationCommand, {
                                type: Pick<import("../mod.js").CreateContextApplicationCommand, "type">;
                                description: Pick<import("../mod.js").CreateContextApplicationCommand, "description">;
                                name: Pick<import("../mod.js").CreateContextApplicationCommand, "name">;
                                nameLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "nameLocalizations"> | undefined;
                                descriptionLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "descriptionLocalizations"> | undefined;
                                defaultMemberPermissions?: Pick<import("../mod.js").CreateContextApplicationCommand, "defaultMemberPermissions"> | undefined;
                                dmPermission?: Pick<import("../mod.js").CreateContextApplicationCommand, "dmPermission"> | undefined;
                            }> | import("../types/shared.js").AtLeastOne<import("../mod.js").CreateApplicationCommand, {
                                name: Pick<import("../mod.js").CreateApplicationCommand, "name">;
                                nameLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "nameLocalizations"> | undefined;
                                description: Pick<import("../mod.js").CreateApplicationCommand, "description">;
                                descriptionLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "descriptionLocalizations"> | undefined;
                                type?: Pick<import("../mod.js").CreateApplicationCommand, "type"> | undefined;
                                options?: Pick<import("../mod.js").CreateApplicationCommand, "options"> | undefined;
                                defaultMemberPermissions?: Pick<import("../mod.js").CreateApplicationCommand, "defaultMemberPermissions"> | undefined;
                                dmPermission?: Pick<import("../mod.js").CreateApplicationCommand, "dmPermission"> | undefined;
                            }>, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                            upsertApplicationCommands: (options: (import("../mod.js").CreateContextApplicationCommand | import("../mod.js").UpsertApplicationCommands)[], guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                            deleteFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<void>;
                            editFollowupMessage: (interactionToken: string, messageId: bigint, options: import("../mod.js").EditWebhookMessage) => Promise<Message>;
                            getFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<Message>;
                            getOriginalInteractionResponse: (token: string) => Promise<Message>;
                            sendInteractionResponse: (id: bigint, token: string, options: import("../mod.js").InteractionResponse) => Promise<Message | undefined>;
                            verifySignature: () => {
                                isValid: boolean;
                                body: string;
                            };
                            createInvite: (channelId: bigint, options?: import("../mod.js").CreateChannelInvite | undefined) => Promise<{
                                code: string;
                                guildId: bigint | undefined;
                                channelId: bigint | undefined;
                                inviter: User | undefined;
                                targetType: import("../types/shared.js").TargetTypes | undefined;
                                targetUser: User | undefined;
                                targetApplicationId: bigint | undefined;
                                approximatePresenceCount: number | undefined;
                                approximateMemberCount: number | undefined;
                                expiresAt: number | undefined;
                            }>;
                            deleteInvite: (inviteCode: string) => Promise<void>;
                            getChannelInvites: (channelId: bigint) => Promise<Collection<string, {
                                uses: number;
                                maxUses: number;
                                maxAge: number;
                                temporary: boolean;
                                createdAt: number;
                            }>>;
                            getInvite: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => Promise<{
                                code: string;
                                guildId: bigint | undefined;
                                channelId: bigint | undefined;
                                inviter: User | undefined;
                                targetType: import("../types/shared.js").TargetTypes | undefined;
                                targetUser: User | undefined;
                                targetApplicationId: bigint | undefined;
                                approximatePresenceCount: number | undefined;
                                approximateMemberCount: number | undefined;
                                expiresAt: number | undefined;
                            }>;
                            getInvites: (guildId: bigint) => Promise<Collection<string, {
                                uses: number;
                                maxUses: number;
                                maxAge: number;
                                temporary: boolean;
                                createdAt: number;
                            }>>;
                            avatarURL: (userId: bigint, discriminator: string, options?: {
                                avatar: bigint | undefined;
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            } | undefined) => string;
                            banMember: (guildId: bigint, id: bigint, options?: import("../mod.js").CreateGuildBan | undefined) => Promise<void>;
                            editBotNickname: (guildId: bigint, options: {
                                nick: string | null;
                                reason?: string | undefined;
                            }) => Promise<string | undefined>;
                            editMember: (guildId: bigint, memberId: bigint, options: import("../mod.js").ModifyGuildMember) => Promise<Member>;
                            fetchMembers: (guildId: bigint, options?: Omit<import("../mod.js").RequestGuildMembers, "guildId"> | undefined) => Promise<void>;
                            getDmChannel: (userId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                            getMember: (guildId: bigint, id: bigint) => Promise<Member | undefined>;
                            getMembers: (guildId: bigint, options: import("../mod.js").ListGuildMembers) => Promise<Collection<bigint, Member>>;
                            kickMember: (guildId: bigint, memberId: bigint, reason?: string | undefined) => Promise<void>;
                            pruneMembers: (guildId: bigint, options: import("../mod.js").BeginGuildPrune) => Promise<number>;
                            searchMembers: (guildId: bigint, query: string, options?: Omit<import("../mod.js").SearchMembers, "query"> | undefined) => Promise<Collection<bigint, Member>>;
                            unbanMember: (guildId: bigint, id: bigint) => Promise<void>;
                            addReaction: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                            addReactions: (channelId: bigint, messageId: bigint, reactions: string[], ordered?: boolean | undefined) => Promise<void>;
                            deleteMessage: (channelId: bigint, messageId: bigint, reason?: string | undefined, delayMilliseconds?: number | undefined) => Promise<void>;
                            deleteMessages: (channelId: bigint, ids: bigint[], reason?: string | undefined) => Promise<void>;
                            editMessage: (channelId: bigint, messageId: bigint, content: import("../mod.js").EditMessage) => Promise<Message>;
                            getMessage: (channelId: bigint, id: bigint) => Promise<Message | undefined>;
                            getMessages: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => Promise<Collection<bigint, Message>>;
                            isGetMessagesAfter: () => boolean;
                            isGetMessagesBefore: () => boolean;
                            isGetMessagesAround: () => boolean;
                            isGetMessagesLimit: () => boolean;
                            getReactions: (channelId: bigint, messageId: bigint, reaction: string, options?: import("../mod.js").GetReactions | undefined) => Promise<Collection<bigint, User>>;
                            pinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                            publishMessage: (channelId: bigint, messageId: bigint) => Promise<Message>;
                            removeAllReactions: (channelId: bigint, messageId: bigint) => Promise<void>;
                            removeReaction: (channelId: bigint, messageId: bigint, reaction: string, options?: {
                                userId?: bigint | undefined;
                            } | undefined) => Promise<void>;
                            removeReactionEmoji: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                            sendMessage: (channelId: bigint, content: import("../mod.js").CreateMessage) => Promise<Message>;
                            unpinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                            editBotProfile: (options: {
                                username?: string | undefined;
                                botAvatarURL?: string | null | undefined;
                            }) => Promise<User>;
                            editBotStatus: (data: import("../mod.js").StatusUpdate) => Promise<void>;
                            editShardStatus: (shardId: number, data: import("../mod.js").StatusUpdate) => void;
                            getGatewayBot: () => Promise<import("./gatewayBot.js").GetGatewayBot>;
                            getUser: (userId: bigint) => Promise<User | undefined>;
                            nitroStickerPacks: () => Promise<import("./sticker.js").StickerPack[]>;
                            getApplicationInfo: () => Promise<import("./application.js").Application>;
                            addRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                            createRole: (guildId: bigint, options: import("../mod.js").CreateGuildRole, reason?: string | undefined) => Promise<Role>;
                            deleteRole: (guildId: bigint, id: bigint) => Promise<void>;
                            editRole: (guildId: bigint, id: bigint, options: import("../mod.js").EditGuildRole) => Promise<Role>;
                            getRoles: (guildId: bigint) => Promise<Collection<bigint, Role>>;
                            modifyRolePositions: (guildId: bigint, options: import("../mod.js").ModifyRolePositions[]) => Promise<Collection<bigint, Role>>;
                            removeRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                            createGuildFromTemplate: (templateCode: string, data: import("../mod.js").CreateGuildFromTemplate) => Promise<import("./guild.js").Guild>;
                            createGuildTemplate: (guildId: bigint, data: import("../mod.js").CreateTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                            deleteGuildTemplate: (guildId: bigint, templateCode: string) => Promise<void>;
                            editGuildTemplate: (guildId: bigint, templateCode: string, data: import("../mod.js").ModifyGuildTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                            getGuildTemplates: (guildId: bigint) => Promise<Collection<string, import("./template.js").Template>>;
                            getTemplate: (templateCode: string) => Promise<import("./template.js").Template>;
                            syncGuildTemplate: (guildId: bigint, templateCode: string) => Promise<import("../types/discord.js").DiscordTemplate>;
                            connectToVoiceChannel: (guildId: bigint, channelId: bigint, options?: import("../types/shared.js").AtLeastOne<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, {
                                selfDeaf: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfDeaf">;
                                selfMute: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfMute">;
                            }> | undefined) => Promise<void>;
                            createWebhook: (channelId: bigint, options: import("../mod.js").CreateWebhook) => Promise<import("./webhook.js").Webhook>;
                            deleteWebhook: (webhookId: bigint, reason?: string | undefined) => Promise<void>;
                            deleteWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").DeleteWebhookMessageOptions | undefined) => Promise<void>;
                            deleteWebhookWithToken: (webhookId: bigint, webhookToken: string) => Promise<void>;
                            editWebhook: (webhookId: bigint, options: import("../mod.js").ModifyWebhook) => Promise<import("./webhook.js").Webhook>;
                            editWebhookMessage: (webhookId: bigint, webhookToken: string, options: import("../mod.js").EditWebhookMessage & {
                                messageId?: bigint | undefined;
                                threadId?: bigint | undefined;
                            }) => Promise<Message>;
                            editWebhookWithToken: (webhookId: bigint, webhookToken: string, options: Omit<import("../mod.js").ModifyWebhook, "channelId">) => Promise<import("./webhook.js").Webhook>;
                            getWebhook: (webhookId: bigint) => Promise<import("./webhook.js").Webhook | undefined>;
                            getWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").GetWebhookMessageOptions | undefined) => Promise<Message>;
                            getWebhooks: (guildId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                            getWebhookWithToken: (webhookId: bigint, token: string) => Promise<import("./webhook.js").Webhook>;
                            sendWebhook: (webhookId: bigint, webhookToken: string, options: import("../mod.js").ExecuteWebhook) => Promise<Message | undefined>;
                        };
                        rest: {
                            version: number;
                            token: string;
                            debug: (text: string) => unknown;
                            customUrl: string;
                            maxRetryCount: number;
                            secretKey: string;
                            checkRateLimits: typeof import("../mod.js").checkRateLimits;
                            cleanupQueues: typeof import("../mod.js").cleanupQueues;
                            processQueue: typeof import("../mod.js").processQueue;
                            processRateLimitedPaths: typeof import("../mod.js").processRateLimitedPaths;
                            processRequestHeaders: typeof import("../mod.js").processRequestHeaders;
                            processRequest: typeof import("../mod.js").processRequest;
                            createRequestBody: typeof import("../mod.js").createRequestBody;
                            runMethod: typeof import("../mod.js").runMethod;
                            simplifyUrl: typeof import("../mod.js").simplifyUrl;
                            processGlobalQueue: typeof import("../mod.js").processGlobalQueue;
                            convertRestError: typeof import("../mod.js").convertRestError;
                            sendRequest: typeof import("../mod.js").sendRequest;
                            invalidRequests: number;
                            maxInvalidRequests: number;
                            invalidRequestsInterval: number;
                            invalidRequestsTimeoutId: number;
                            invalidRequestsSafetyAmount: number;
                            invalidRequestFrozenAt: number;
                            invalidRequestErrorStatuses: number[];
                            pathQueues: Map<string, {
                                isWaiting: boolean;
                                requests: {
                                    request: import("../mod.js").RestRequest;
                                    payload: import("../mod.js").RestPayload;
                                }[];
                            }>;
                            processingQueue: boolean;
                            processingRateLimitedPaths: boolean;
                            globallyRateLimited: boolean;
                            globalQueue: {
                                request: import("../mod.js").RestRequest;
                                payload: import("../mod.js").RestPayload;
                                basicURL: string;
                                urlToUse: string;
                            }[];
                            globalQueueProcessing: boolean;
                            rateLimitedPaths: Map<string, import("../mod.js").RestRateLimitedPath>;
                        };
                        gateway: {
                            stop: (code: number, reason: string) => Promise<void>;
                            gatewayBot: {
                                url: string;
                                shards: number;
                                sessionStartLimit: {
                                    total: number;
                                    remaining: number;
                                    resetAfter: number;
                                    maxConcurrency: number;
                                };
                            };
                            spawnShardDelay: number;
                            shardsPerWorker: number;
                            totalWorkers: number;
                            firstShardId: number;
                            lastShardId: number;
                            buckets: Collection<number, {
                                workers: {
                                    id: number;
                                    queue: number[];
                                }[];
                                leak: import("../util/bucket.js").LeakyBucket;
                            }>;
                            prepareBuckets: () => void;
                            spawnShards: () => void;
                            tellWorkerToIdentify: (workerId: number, shardId: number, bucketId: number) => Promise<void>;
                            debug: (text: import("../mod.js").GatewayDebugEvents, ...args: any[]) => unknown;
                            calculateTotalShards: () => number;
                            calculateWorkerId: (shardId: number) => number;
                            manager: {
                                shards: Collection<number, {
                                    gatewayConfig: import("../mod.js").ShardGatewayConfig;
                                    heart: import("../mod.js").ShardHeart;
                                    id: number;
                                    maxRequestsPerRateLimitTick: number;
                                    previousSequenceNumber: number | null;
                                    rateLimitResetInterval: number;
                                    sessionId: string | undefined;
                                    socket: import("ws") | undefined;
                                    state: import("../mod.js").ShardState;
                                    totalShards: number;
                                    events: import("../mod.js").ShardEvents;
                                    calculateSafeRequests: () => number;
                                    close: (code: number, reason: string) => void;
                                    connect: () => Promise<void>;
                                    identify: () => Promise<void>;
                                    isOpen: () => boolean;
                                    makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                                    resume: () => Promise<void>;
                                    send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                                    shutdown: () => Promise<void>;
                                    bucket: import("../util/bucket.js").LeakyBucket;
                                    handleClose: (close: CloseEvent) => Promise<void>;
                                    handleMessage: (message: MessageEvent<any>) => Promise<void>;
                                    requestIdentify: () => Promise<void>;
                                    offlineSendQueue: ((_?: unknown) => void)[];
                                    resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                    startHeartbeating: (interval: number) => void;
                                    stopHeartbeating: () => void;
                                }>;
                                gatewayConfig: {
                                    url?: string | undefined;
                                    version?: number | undefined;
                                    compress?: boolean | undefined;
                                    intents?: number | undefined;
                                    properties?: {
                                        browser: string;
                                        os: string;
                                        device: string;
                                    } | undefined;
                                    token: string;
                                };
                                totalShards: number;
                                createShardOptions: {
                                    state?: import("../mod.js").ShardState | undefined;
                                    close?: {} | undefined;
                                    resume?: {} | undefined;
                                    connect?: {} | undefined;
                                    calculateSafeRequests?: {} | undefined;
                                    handleClose?: {} | undefined;
                                    handleMessage?: {} | undefined;
                                    identify?: {} | undefined;
                                    isOpen?: {} | undefined;
                                    makePresence?: {} | undefined;
                                    maxRequestsPerRateLimitTick?: number | undefined;
                                    previousSequenceNumber?: number | undefined;
                                    rateLimitResetInterval?: number | undefined;
                                    send?: {} | undefined;
                                    shutdown?: {} | undefined;
                                    startHeartbeating?: {} | undefined;
                                    stopHeartbeating?: {} | undefined;
                                    heart?: {
                                        intervalId?: number | undefined;
                                        lastAck?: number | undefined;
                                        lastBeat?: number | undefined;
                                        rtt?: number | undefined;
                                        timeoutId?: number | undefined;
                                        interval: number;
                                        acknowledged: boolean;
                                    } | undefined;
                                    bucket?: {
                                        max: number;
                                        waiting: ((_?: unknown) => void)[];
                                        refillInterval: number;
                                        refillAmount: number;
                                        tokens: () => number;
                                        acquire: (amount: number, highPriority?: boolean | undefined) => Promise<void>;
                                        nextRefill: () => number;
                                        lastRefill: number;
                                        allowAcquire: boolean;
                                        tokensState: number;
                                    } | undefined;
                                    offlineSendQueue?: {
                                        d?: unknown;
                                        op: import("../types/shared.js").GatewayOpcodes;
                                    }[] | undefined;
                                    resolves?: {
                                        [Symbol.toStringTag]: string;
                                        [Symbol.iterator]: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                        forEach: (callbackfn: (value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void, key: "READY" | "RESUMED" | "INVALID_SESSION", map: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>) => void, thisArg?: any) => void;
                                        entries: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                        keys: () => IterableIterator<"READY" | "RESUMED" | "INVALID_SESSION">;
                                        values: () => IterableIterator<(payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                        set: (key: "READY" | "RESUMED" | "INVALID_SESSION", value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void) => Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                        clear: () => void;
                                        size: number;
                                        get: (key: "READY" | "RESUMED" | "INVALID_SESSION") => ((payload: import("../types/discord.js").DiscordGatewayPayload) => void) | undefined;
                                        delete: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                                        has: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                                    } | undefined;
                                    events: {
                                        connected?: {} | undefined;
                                        connecting?: {} | undefined;
                                        disconnected?: {} | undefined;
                                        heartbeat?: {} | undefined;
                                        heartbeatAck?: {} | undefined;
                                        hello?: {} | undefined;
                                        invalidSession?: {} | undefined;
                                        resuming?: {} | undefined;
                                        resumed?: {} | undefined;
                                        requestedReconnect?: {} | undefined;
                                        identifying?: {} | undefined;
                                        identified?: {} | undefined;
                                        message: (shard: {
                                            gatewayConfig: import("../mod.js").ShardGatewayConfig;
                                            heart: import("../mod.js").ShardHeart;
                                            id: number;
                                            maxRequestsPerRateLimitTick: number;
                                            previousSequenceNumber: number | null;
                                            rateLimitResetInterval: number;
                                            sessionId: string | undefined;
                                            socket: import("ws") | undefined;
                                            state: import("../mod.js").ShardState;
                                            totalShards: number;
                                            events: import("../mod.js").ShardEvents;
                                            calculateSafeRequests: () => number;
                                            close: (code: number, reason: string) => void;
                                            connect: () => Promise<void>;
                                            identify: () => Promise<void>;
                                            isOpen: () => boolean;
                                            makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                                            resume: () => Promise<void>;
                                            send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                                            shutdown: () => Promise<void>;
                                            bucket: import("../util/bucket.js").LeakyBucket;
                                            handleClose: (close: CloseEvent) => Promise<void>;
                                            handleMessage: (message: MessageEvent<any>) => Promise<void>;
                                            requestIdentify: () => Promise<void>;
                                            offlineSendQueue: ((_?: unknown) => void)[];
                                            resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                            startHeartbeating: (interval: number) => void;
                                            stopHeartbeating: () => void;
                                        }, payload: import("../types/discord.js").DiscordGatewayPayload) => unknown;
                                    };
                                };
                                requestIdentify: (shardId: number) => Promise<void>;
                                identify: (shardId: number) => Promise<void>;
                                kill: (shardId: number) => Promise<void>;
                            };
                        };
                        handlers: {
                            READY: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_PINS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_BAN_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_BAN_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_EMOJIS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_INTEGRATIONS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBERS_CHUNK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_ROLE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_ROLE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_ROLE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_USER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_USER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTERACTION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INVITE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INVITE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_DELETE_BULK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_REMOVE_ALL: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_REMOVE_EMOJI: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            PRESENCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            TYPING_START: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            USER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            VOICE_SERVER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            VOICE_STATE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            WEBHOOKS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTEGRATION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTEGRATION_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTEGRATION_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            STAGE_INSTANCE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            STAGE_INSTANCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            STAGE_INSTANCE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_LIST_SYNC: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_MEMBERS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_LOADED_DD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                        };
                        activeGuildIds: Set<bigint>;
                        cache: {
                            unrepliedInteractions: Set<bigint>;
                            fetchAllMembersProcessingRequests: Map<string, Function>;
                        };
                        enabledPlugins: Set<string>;
                    } | undefined;
                    intervalId?: number | undefined;
                    filter: (value: Message, key: bigint, ...args: any[]) => boolean;
                    interval: number;
                } | undefined;
                [Symbol.toStringTag]: string;
                [Symbol.iterator]: () => IterableIterator<[bigint, Message]>;
                every: (callback: (value: Message, key: bigint) => boolean) => boolean;
                some: (callback: (value: Message, key: bigint) => boolean) => boolean;
                forEach: (callbackfn: (value: Message, key: bigint, map: Map<bigint, Message>) => void, thisArg?: any) => void;
                map: <T_8>(callback: (value: Message, key: bigint) => T_8) => T_8[];
                filter: (callback: (value: Message, key: bigint) => boolean) => Collection<bigint, Message>;
                reduce: <T_9>(callback: (accumulator: T_9, value: Message, key: bigint) => T_9, initialValue?: T_9 | undefined) => T_9;
                find: (callback: (value: Message, key: bigint) => boolean) => Message | undefined;
                entries: () => IterableIterator<[bigint, Message]>;
                keys: () => IterableIterator<bigint>;
                values: () => IterableIterator<Message>;
                set: (key: bigint, value: Message) => Collection<bigint, Message>;
                clear: () => void;
                size: number;
                get: (key: bigint) => Message | undefined;
                startSweeper: (options: import("../util/collection.js").CollectionSweeper<bigint, Message>) => number;
                stopSweeper: () => void;
                changeSweeperInterval: (newInterval: number) => void;
                changeSweeperFilter: (newFilter: (value: Message, key: bigint, bot: Bot) => boolean) => void;
                forceSet: (key: bigint, value: Message) => Collection<bigint, Message>;
                array: () => Message[];
                first: () => Message | undefined;
                last: () => Message | undefined;
                random: () => Message | undefined;
                delete: (key: bigint) => boolean;
                has: (key: bigint) => boolean;
            } | undefined;
            users?: {
                maxSize?: number | undefined;
                sweeper?: {
                    bot?: {
                        handleDiscordPayload?: {} | undefined;
                        botGatewayData?: {
                            url: string;
                            shards: number;
                            sessionStartLimit: {
                                total: number;
                                remaining: number;
                                resetAfter: number;
                                maxConcurrency: number;
                            };
                        } | undefined;
                        id: bigint;
                        constants: {
                            DISCORDENO_VERSION: string;
                            USER_AGENT: string;
                            BASE_URL: string;
                            CDN_URL: string;
                            routes: {
                                GATEWAY_BOT: () => string;
                                AUTOMOD_RULES: (guildId: bigint) => string;
                                AUTOMOD_RULE: (guildId: bigint, ruleId: bigint) => string;
                                CHANNEL: (channelId: bigint) => string;
                                CHANNEL_MESSAGE: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_MESSAGES: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => string;
                                CHANNEL_PIN: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_PINS: (channelId: bigint) => string;
                                CHANNEL_BULK_DELETE: (channelId: bigint) => string;
                                CHANNEL_INVITES: (channelId: bigint) => string;
                                CHANNEL_WEBHOOKS: (channelId: bigint) => string;
                                CHANNEL_MESSAGE_REACTION_ME: (channelId: bigint, messageId: bigint, emoji: string) => string;
                                CHANNEL_MESSAGE_REACTION_USER: (channelId: bigint, messageId: bigint, emoji: string, userId: bigint) => string;
                                CHANNEL_MESSAGE_REACTIONS: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_MESSAGE_REACTION: (channelId: bigint, messageId: bigint, emoji: string, options?: import("../mod.js").GetReactions | undefined) => string;
                                CHANNEL_FOLLOW: (channelId: bigint) => string;
                                CHANNEL_MESSAGE_CROSSPOST: (channelId: bigint, messageId: bigint) => string;
                                CHANNEL_OVERWRITE: (channelId: bigint, overwriteId: bigint) => string;
                                CHANNEL_TYPING: (channelId: bigint) => string;
                                THREAD_START_PUBLIC: (channelId: bigint, messageId: bigint) => string;
                                THREAD_START_PRIVATE: (channelId: bigint) => string;
                                THREAD_ACTIVE: (guildId: bigint) => string;
                                THREAD_MEMBERS: (channelId: bigint) => string;
                                THREAD_ME: (channelId: bigint) => string;
                                THREAD_USER: (channelId: bigint, userId: bigint) => string;
                                THREAD_ARCHIVED: (channelId: bigint) => string;
                                THREAD_ARCHIVED_PUBLIC: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                                THREAD_ARCHIVED_PRIVATE: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                                THREAD_ARCHIVED_PRIVATE_JOINED: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                                FORUM_START: (channelId: bigint) => string;
                                GUILD: (guildId: bigint, withCounts?: boolean | undefined) => string;
                                GUILDS: () => string;
                                GUILD_AUDIT_LOGS: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => string;
                                GUILD_BAN: (guildId: bigint, userId: bigint) => string;
                                GUILD_BANS: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => string;
                                GUILD_BANNER: (guildId: bigint, icon: string) => string;
                                GUILD_CHANNELS: (guildId: bigint) => string;
                                GUILD_WIDGET: (guildId: bigint) => string;
                                GUILD_WIDGET_JSON: (guildId: bigint) => string;
                                GUILD_WIDGET_IMAGE: (guildId: bigint, style?: "shield" | "banner1" | "banner2" | "banner3" | "banner4" | undefined) => string;
                                GUILD_EMOJI: (guildId: bigint, emojiId: bigint) => string;
                                GUILD_EMOJIS: (guildId: bigint) => string;
                                GUILD_ICON: (guildId: bigint, icon: string) => string;
                                GUILD_INTEGRATION: (guildId: bigint, integrationId: bigint) => string;
                                GUILD_INTEGRATION_SYNC: (guildId: bigint, integrationId: bigint) => string;
                                GUILD_INTEGRATIONS: (guildId: bigint) => string;
                                GUILD_INVITES: (guildId: bigint) => string;
                                GUILD_LEAVE: (guildId: bigint) => string;
                                GUILD_MEMBER: (guildId: bigint, userId: bigint) => string;
                                GUILD_MEMBERS: (guildId: bigint, options?: import("../mod.js").ListGuildMembers | undefined) => string;
                                GUILD_MEMBER_ROLE: (guildId: bigint, memberId: bigint, roleId: bigint) => string;
                                GUILD_MEMBERS_SEARCH: (guildId: bigint, query: string, options?: {
                                    limit?: number | undefined;
                                } | undefined) => string;
                                GUILD_PRUNE: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => string;
                                GUILD_REGIONS: (guildId: bigint) => string;
                                GUILD_ROLE: (guildId: bigint, roleId: bigint) => string;
                                GUILD_ROLES: (guildId: bigint) => string;
                                GUILD_SPLASH: (guildId: bigint, icon: string) => string;
                                GUILD_VANITY_URL: (guildId: bigint) => string;
                                GUILD_WEBHOOKS: (guildId: bigint) => string;
                                TEMPLATE: (code: string) => string;
                                GUILD_TEMPLATE: (guildId: bigint, code: string) => string;
                                GUILD_TEMPLATES: (guildId: bigint) => string;
                                GUILD_PREVIEW: (guildId: bigint) => string;
                                UPDATE_VOICE_STATE: (guildId: bigint, userId?: bigint | undefined) => string;
                                GUILD_WELCOME_SCREEN: (guildId: bigint) => string;
                                GUILD_SCHEDULED_EVENTS: (guildId: bigint, withUserCount?: boolean | undefined) => string;
                                GUILD_SCHEDULED_EVENT: (guildId: bigint, eventId: bigint, withUserCount?: boolean | undefined) => string;
                                GUILD_SCHEDULED_EVENT_USERS: (guildId: bigint, eventId: bigint, options?: import("../mod.js").GetScheduledEventUsers | undefined) => string;
                                VOICE_REGIONS: () => string;
                                INVITE: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => string;
                                WEBHOOK: (webhookId: bigint, token: string, options?: {
                                    wait?: boolean | undefined;
                                    threadId?: bigint | undefined;
                                } | undefined) => string;
                                WEBHOOK_ID: (webhookId: bigint) => string;
                                WEBHOOK_MESSAGE: (webhookId: bigint, token: string, messageId: bigint, options?: {
                                    threadId?: bigint | undefined;
                                } | undefined) => string;
                                WEBHOOK_MESSAGE_ORIGINAL: (webhookId: bigint, token: string, options?: {
                                    threadId?: bigint | undefined;
                                } | undefined) => string;
                                WEBHOOK_SLACK: (webhookId: bigint, token: string) => string;
                                WEBHOOK_GITHUB: (webhookId: bigint, token: string) => string;
                                COMMANDS: (applicationId: bigint) => string;
                                COMMANDS_GUILD: (applicationId: bigint, guildId: bigint) => string;
                                COMMANDS_PERMISSIONS: (applicationId: bigint, guildId: bigint) => string;
                                COMMANDS_PERMISSION: (applicationId: bigint, guildId: bigint, commandId: bigint) => string;
                                COMMANDS_ID: (applicationId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                                COMMANDS_GUILD_ID: (applicationId: bigint, guildId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                                INTERACTION_ID_TOKEN: (interactionId: bigint, token: string) => string;
                                INTERACTION_ORIGINAL_ID_TOKEN: (interactionId: bigint, token: string) => string;
                                INTERACTION_ID_TOKEN_MESSAGE_ID: (applicationId: bigint, token: string, messageId: bigint) => string;
                                USER: (userId: bigint) => string;
                                USER_BOT: () => string;
                                USER_GUILDS: () => string;
                                USER_AVATAR: (userId: bigint, icon: string) => string;
                                USER_DEFAULT_AVATAR: (icon: number) => string;
                                USER_DM: () => string;
                                USER_CONNECTIONS: () => string;
                                USER_NICK: (guildId: bigint) => string;
                                DISCOVERY_CATEGORIES: () => string;
                                DISCOVERY_VALID_TERM: (term: string) => string;
                                DISCOVERY_METADATA: (guildId: bigint) => string;
                                DISCOVERY_SUBCATEGORY: (guildId: bigint, categoryId: number) => string;
                                OAUTH2_APPLICATION: () => string;
                                STAGE_INSTANCES: () => string;
                                STAGE_INSTANCE: (channelId: bigint) => string;
                                NITRO_STICKER_PACKS: () => string;
                            };
                            regexes: {
                                SLASH_COMMANDS_NAME_REGEX: RegExp;
                                CONTEXT_MENU_COMMANDS_NAME_REGEX: RegExp;
                                CHANNEL_MENTION_REGEX: RegExp;
                                DISCORD_SNOWFLAKE_REGEX: RegExp;
                            };
                            Errors: {
                                REQUEST_UNKNOWN_ERROR: import("../types/shared.js").Errors.REQUEST_UNKNOWN_ERROR;
                                GUILD_NOT_FOUND: import("../types/shared.js").Errors.GUILD_NOT_FOUND;
                                RULES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.RULES_CHANNEL_CANNOT_BE_DELETED;
                                UPDATES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.UPDATES_CHANNEL_CANNOT_BE_DELETED;
                                NICKNAMES_MAX_LENGTH: import("../types/shared.js").Errors.NICKNAMES_MAX_LENGTH;
                                MEMBER_NOT_IN_VOICE_CHANNEL: import("../types/shared.js").Errors.MEMBER_NOT_IN_VOICE_CHANNEL;
                                MESSAGE_MAX_LENGTH: import("../types/shared.js").Errors.MESSAGE_MAX_LENGTH;
                                BOTS_HIGHEST_ROLE_TOO_LOW: import("../types/shared.js").Errors.BOTS_HIGHEST_ROLE_TOO_LOW;
                                CHANNEL_NOT_FOUND: import("../types/shared.js").Errors.CHANNEL_NOT_FOUND;
                                CHANNEL_NOT_IN_GUILD: import("../types/shared.js").Errors.CHANNEL_NOT_IN_GUILD;
                                CHANNEL_NOT_TEXT_BASED: import("../types/shared.js").Errors.CHANNEL_NOT_TEXT_BASED;
                                CHANNEL_NOT_STAGE_VOICE: import("../types/shared.js").Errors.CHANNEL_NOT_STAGE_VOICE;
                                INVALID_TOPIC_LENGTH: import("../types/shared.js").Errors.INVALID_TOPIC_LENGTH;
                                GUILD_NOT_DISCOVERABLE: import("../types/shared.js").Errors.GUILD_NOT_DISCOVERABLE;
                                GUILD_WIDGET_NOT_ENABLED: import("../types/shared.js").Errors.GUILD_WIDGET_NOT_ENABLED;
                                MEMBER_NOT_FOUND: import("../types/shared.js").Errors.MEMBER_NOT_FOUND;
                                MEMBER_SEARCH_LIMIT_TOO_HIGH: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_HIGH;
                                MEMBER_SEARCH_LIMIT_TOO_LOW: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_LOW;
                                PRUNE_MAX_DAYS: import("../types/shared.js").Errors.PRUNE_MAX_DAYS;
                                ROLE_NOT_FOUND: import("../types/shared.js").Errors.ROLE_NOT_FOUND;
                                INVALID_THREAD_PARENT_CHANNEL_TYPE: import("../types/shared.js").Errors.INVALID_THREAD_PARENT_CHANNEL_TYPE;
                                GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS: import("../types/shared.js").Errors.GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS;
                                NOT_A_THREAD_CHANNEL: import("../types/shared.js").Errors.NOT_A_THREAD_CHANNEL;
                                MISSING_MANAGE_THREADS_AND_NOT_MEMBER: import("../types/shared.js").Errors.MISSING_MANAGE_THREADS_AND_NOT_MEMBER;
                                CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD: import("../types/shared.js").Errors.CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD;
                                HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS: import("../types/shared.js").Errors.HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS;
                                INVALID_GET_MESSAGES_LIMIT: import("../types/shared.js").Errors.INVALID_GET_MESSAGES_LIMIT;
                                DELETE_MESSAGES_MIN: import("../types/shared.js").Errors.DELETE_MESSAGES_MIN;
                                PRUNE_MIN_DAYS: import("../types/shared.js").Errors.PRUNE_MIN_DAYS;
                                INVALID_SLASH_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_DESCRIPTION;
                                INVALID_SLASH_NAME: import("../types/shared.js").Errors.INVALID_SLASH_NAME;
                                INVALID_SLASH_OPTIONS: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS;
                                INVALID_SLASH_OPTIONS_CHOICES: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICES;
                                TOO_MANY_SLASH_OPTIONS: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTIONS;
                                INVALID_SLASH_OPTION_CHOICE_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_CHOICE_NAME;
                                INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE;
                                TOO_MANY_SLASH_OPTION_CHOICES: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTION_CHOICES;
                                ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES: import("../types/shared.js").Errors.ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES;
                                INVALID_SLASH_OPTION_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_NAME;
                                INVALID_SLASH_OPTION_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_DESCRIPTION;
                                INVALID_CONTEXT_MENU_COMMAND_NAME: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_NAME;
                                INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION;
                                INVALID_WEBHOOK_NAME: import("../types/shared.js").Errors.INVALID_WEBHOOK_NAME;
                                INVALID_WEBHOOK_OPTIONS: import("../types/shared.js").Errors.INVALID_WEBHOOK_OPTIONS;
                                MISSING_ADD_REACTIONS: import("../types/shared.js").Errors.MISSING_ADD_REACTIONS;
                                MISSING_ADMINISTRATOR: import("../types/shared.js").Errors.MISSING_ADMINISTRATOR;
                                MISSING_ATTACH_FILES: import("../types/shared.js").Errors.MISSING_ATTACH_FILES;
                                MISSING_BAN_MEMBERS: import("../types/shared.js").Errors.MISSING_BAN_MEMBERS;
                                MISSING_CHANGE_NICKNAME: import("../types/shared.js").Errors.MISSING_CHANGE_NICKNAME;
                                MISSING_CONNECT: import("../types/shared.js").Errors.MISSING_CONNECT;
                                MISSING_CREATE_INSTANT_INVITE: import("../types/shared.js").Errors.MISSING_CREATE_INSTANT_INVITE;
                                MISSING_DEAFEN_MEMBERS: import("../types/shared.js").Errors.MISSING_DEAFEN_MEMBERS;
                                MISSING_EMBED_LINKS: import("../types/shared.js").Errors.MISSING_EMBED_LINKS;
                                MISSING_INTENT_GUILD_MEMBERS: import("../types/shared.js").Errors.MISSING_INTENT_GUILD_MEMBERS;
                                MISSING_KICK_MEMBERS: import("../types/shared.js").Errors.MISSING_KICK_MEMBERS;
                                MISSING_MANAGE_CHANNELS: import("../types/shared.js").Errors.MISSING_MANAGE_CHANNELS;
                                MISSING_MANAGE_EMOJIS: import("../types/shared.js").Errors.MISSING_MANAGE_EMOJIS;
                                MISSING_MANAGE_GUILD: import("../types/shared.js").Errors.MISSING_MANAGE_GUILD;
                                MISSING_MANAGE_MESSAGES: import("../types/shared.js").Errors.MISSING_MANAGE_MESSAGES;
                                MISSING_MANAGE_NICKNAMES: import("../types/shared.js").Errors.MISSING_MANAGE_NICKNAMES;
                                MISSING_MANAGE_ROLES: import("../types/shared.js").Errors.MISSING_MANAGE_ROLES;
                                MISSING_MANAGE_WEBHOOKS: import("../types/shared.js").Errors.MISSING_MANAGE_WEBHOOKS;
                                MISSING_MENTION_EVERYONE: import("../types/shared.js").Errors.MISSING_MENTION_EVERYONE;
                                MISSING_MOVE_MEMBERS: import("../types/shared.js").Errors.MISSING_MOVE_MEMBERS;
                                MISSING_MUTE_MEMBERS: import("../types/shared.js").Errors.MISSING_MUTE_MEMBERS;
                                MISSING_PRIORITY_SPEAKER: import("../types/shared.js").Errors.MISSING_PRIORITY_SPEAKER;
                                MISSING_READ_MESSAGE_HISTORY: import("../types/shared.js").Errors.MISSING_READ_MESSAGE_HISTORY;
                                MISSING_SEND_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_MESSAGES;
                                MISSING_SEND_TTS_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_TTS_MESSAGES;
                                MISSING_SPEAK: import("../types/shared.js").Errors.MISSING_SPEAK;
                                MISSING_STREAM: import("../types/shared.js").Errors.MISSING_STREAM;
                                MISSING_USE_VAD: import("../types/shared.js").Errors.MISSING_USE_VAD;
                                MISSING_USE_EXTERNAL_EMOJIS: import("../types/shared.js").Errors.MISSING_USE_EXTERNAL_EMOJIS;
                                MISSING_VIEW_AUDIT_LOG: import("../types/shared.js").Errors.MISSING_VIEW_AUDIT_LOG;
                                MISSING_VIEW_CHANNEL: import("../types/shared.js").Errors.MISSING_VIEW_CHANNEL;
                                MISSING_VIEW_GUILD_INSIGHTS: import("../types/shared.js").Errors.MISSING_VIEW_GUILD_INSIGHTS;
                                USERNAME_INVALID_CHARACTER: import("../types/shared.js").Errors.USERNAME_INVALID_CHARACTER;
                                USERNAME_INVALID_USERNAME: import("../types/shared.js").Errors.USERNAME_INVALID_USERNAME;
                                USERNAME_MAX_LENGTH: import("../types/shared.js").Errors.USERNAME_MAX_LENGTH;
                                USERNAME_MIN_LENGTH: import("../types/shared.js").Errors.USERNAME_MIN_LENGTH;
                                NONCE_TOO_LONG: import("../types/shared.js").Errors.NONCE_TOO_LONG;
                                INVITE_MAX_AGE_INVALID: import("../types/shared.js").Errors.INVITE_MAX_AGE_INVALID;
                                INVITE_MAX_USES_INVALID: import("../types/shared.js").Errors.INVITE_MAX_USES_INVALID;
                                RATE_LIMIT_RETRY_MAXED: import("../types/shared.js").Errors.RATE_LIMIT_RETRY_MAXED;
                                REQUEST_CLIENT_ERROR: import("../types/shared.js").Errors.REQUEST_CLIENT_ERROR;
                                REQUEST_SERVER_ERROR: import("../types/shared.js").Errors.REQUEST_SERVER_ERROR;
                                TOO_MANY_COMPONENTS: import("../types/shared.js").Errors.TOO_MANY_COMPONENTS;
                                TOO_MANY_ACTION_ROWS: import("../types/shared.js").Errors.TOO_MANY_ACTION_ROWS;
                                LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID: import("../types/shared.js").Errors.LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID;
                                COMPONENT_LABEL_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_LABEL_TOO_BIG;
                                COMPONENT_CUSTOM_ID_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_CUSTOM_ID_TOO_BIG;
                                BUTTON_REQUIRES_CUSTOM_ID: import("../types/shared.js").Errors.BUTTON_REQUIRES_CUSTOM_ID;
                                COMPONENT_SELECT_MUST_BE_ALONE: import("../types/shared.js").Errors.COMPONENT_SELECT_MUST_BE_ALONE;
                                COMPONENT_PLACEHOLDER_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_PLACEHOLDER_TOO_BIG;
                                COMPONENT_SELECT_MIN_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_LOW;
                                COMPONENT_SELECT_MIN_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_MANY;
                                COMPONENT_SELECT_MAX_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_LOW;
                                COMPONENT_SELECT_MAX_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_MANY;
                                COMPONENT_SELECT_OPTIONS_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_LOW;
                                COMPONENT_SELECT_OPTIONS_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_MANY;
                                SELECT_OPTION_LABEL_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_LABEL_TOO_BIG;
                                SELECT_OPTION_VALUE_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_VALUE_TOO_BIG;
                                SELECT_OPTION_TOO_MANY_DEFAULTS: import("../types/shared.js").Errors.SELECT_OPTION_TOO_MANY_DEFAULTS;
                                COMPONENT_SELECT_MIN_HIGHER_THAN_MAX: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_HIGHER_THAN_MAX;
                                CANNOT_ADD_USER_TO_ARCHIVED_THREADS: import("../types/shared.js").Errors.CANNOT_ADD_USER_TO_ARCHIVED_THREADS;
                                CANNOT_LEAVE_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_LEAVE_ARCHIVED_THREAD;
                                CANNOT_REMOVE_FROM_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_REMOVE_FROM_ARCHIVED_THREAD;
                                YOU_CAN_NOT_DM_THE_BOT_ITSELF: import("../types/shared.js").Errors.YOU_CAN_NOT_DM_THE_BOT_ITSELF;
                            };
                        };
                        events: import("../bot.js").EventHandlers;
                        applicationId: bigint;
                        token: string;
                        intents: import("../types/shared.js").GatewayIntents;
                        urlWSS: string;
                        utils: {
                            snowflakeToBigint: typeof import("../mod.js").snowflakeToBigint;
                            bigintToSnowflake: typeof import("../mod.js").bigintToSnowflake;
                            calculateShardId: typeof import("../mod.js").calculateShardId;
                            delay: typeof import("../mod.js").delay;
                            iconHashToBigInt: typeof import("../mod.js").iconHashToBigInt;
                            iconBigintToHash: typeof import("../mod.js").iconBigintToHash;
                            validateLength: typeof import("../mod.js").validateLength;
                            urlToBase64: typeof import("../util/urlToBase64.js").urlToBase64;
                            formatImageURL: typeof import("../mod.js").formatImageURL;
                            calculateBits: typeof import("../util/permissions.js").calculateBits;
                            calculatePermissions: typeof import("../util/permissions.js").calculatePermissions;
                        };
                        transformers: import("../bot.js").Transformers;
                        helpers: {
                            addToThread: (threadId: bigint, userId: bigint) => Promise<void>;
                            getActiveThreads: (guildId: bigint) => Promise<{
                                threads: Collection<bigint, import("./channel.js").Channel>;
                                members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                            }>;
                            getArchivedThreads: (channelId: bigint, options?: (import("../mod.js").ListArchivedThreads & {
                                type?: "private" | "public" | "privateJoinedThreads" | undefined;
                            }) | undefined) => Promise<{
                                threads: Collection<bigint, import("./channel.js").Channel>;
                                members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                                hasMore: boolean;
                            }>;
                            getThreadMember: (threadId: bigint, userId: bigint) => Promise<{
                                id: bigint | undefined;
                                userId: bigint | undefined;
                                joinTimestamp: number;
                                flags: number;
                            }>;
                            getThreadMembers: (threadId: bigint) => Promise<Collection<bigint | undefined, import("./threadMember.js").ThreadMember>>;
                            joinThread: (threadId: bigint) => Promise<void>;
                            leaveThread: (threadId: bigint) => Promise<void>;
                            removeThreadMember: (threadId: bigint, userId: bigint) => Promise<void>;
                            startThreadWithMessage: (channelId: bigint, messageId: bigint, options: import("../mod.js").StartThreadWithMessage) => Promise<import("./channel.js").Channel>;
                            startThreadWithoutMessage: (channelId: bigint, options: import("../mod.js").StartThreadWithoutMessage) => Promise<import("./channel.js").Channel>;
                            createForumPost: (channelId: bigint, options: import("../mod.js").CreateForumPostWithMessage) => Promise<import("./channel.js").Channel>;
                            createChannel: (guildId: bigint, options?: import("../mod.js").CreateGuildChannel | undefined, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                            createStageInstance: (options: import("../mod.js").CreateStageInstance) => Promise<import("./stageInstance.js").StageInstance>;
                            deleteChannel: (channelId: bigint, reason?: string | undefined) => Promise<void>;
                            deleteChannelOverwrite: (channelId: bigint, overwriteId: bigint) => Promise<void>;
                            deleteStageInstance: (channelId: bigint) => Promise<void>;
                            editChannel: (channelId: bigint, options: import("../mod.js").ModifyChannel, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                            editChannelOverwrite: (channelId: bigint, overwrite: import("../mod.js").OverwriteReadable) => Promise<void>;
                            followChannel: (sourceChannelId: bigint, targetChannelId: bigint) => Promise<bigint>;
                            getChannel: (channelId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                            getChannels: (guildId: bigint) => Promise<Collection<bigint, import("./channel.js").Channel>>;
                            getChannelWebhooks: (channelId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                            getPins: (channelId: bigint) => Promise<Message[]>;
                            getStageInstance: (channelId: bigint) => Promise<import("./stageInstance.js").StageInstance>;
                            startTyping: (channelId: bigint) => Promise<void>;
                            swapChannels: (guildId: bigint, channelPositions: import("../mod.js").ModifyGuildChannelPositions[]) => Promise<void>;
                            updateStageInstance: (channelId: bigint, data: import("../types/shared.js").AtLeastOne<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, {
                                topic: Pick<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, "topic">;
                            }>) => Promise<import("./stageInstance.js").StageInstance>;
                            updateBotVoiceState: (guildId: bigint, options: import("../mod.js").UpdateSelfVoiceState) => Promise<void>;
                            updateUserVoiceState: (guildId: bigint, options: import("../mod.js").UpdateOthersVoiceState) => Promise<void>;
                            addDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                            editDiscovery: (guildId: bigint, data: import("../mod.js").ModifyGuildDiscoveryMetadata) => Promise<{
                                guildId: bigint;
                                primaryCategoryId: number;
                                keywords: string[] | undefined;
                                emojiDiscoverabilityEnabled: boolean;
                                partnerActionedTimestamp: number | undefined;
                                partnerApplicationTimestamp: number | undefined;
                                categoryIds: number[];
                            }>;
                            getDiscovery: (guildId: bigint) => Promise<{
                                guildId: bigint;
                                primaryCategoryId: number;
                                keywords: string[] | undefined;
                                emojiDiscoverabilityEnabled: boolean;
                                partnerActionedTimestamp: number | undefined;
                                partnerApplicationTimestamp: number | undefined;
                                categoryIds: number[];
                            }>;
                            getDiscoveryCategories: () => Promise<Collection<number, import("../types/discord.js").DiscordDiscoveryCategory>>;
                            removeDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                            validDiscoveryTerm: (term: string) => Promise<boolean>;
                            createEmoji: (guildId: bigint, options: import("../mod.js").CreateGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                            deleteEmoji: (guildId: bigint, id: bigint, reason?: string | undefined) => Promise<void>;
                            editEmoji: (guildId: bigint, id: bigint, options: import("../mod.js").ModifyGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                            emojiUrl: (id: bigint, animated?: boolean | undefined) => string;
                            getEmoji: (guildId: bigint, emojiId: bigint) => Promise<import("./emoji.js").Emoji>;
                            getEmojis: (guildId: bigint) => Promise<Collection<bigint, import("./emoji.js").Emoji>>;
                            createScheduledEvent: (guildId: bigint, options: import("../mod.js").CreateScheduledEvent) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                            deleteScheduledEvent: (guildId: bigint, eventId: bigint) => Promise<void>;
                            editScheduledEvent: (guildId: bigint, eventId: bigint, options: Partial<import("../mod.js").EditScheduledEvent>) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                            getScheduledEvent: (guildId: bigint, eventId: bigint, options?: {
                                withUserCount?: boolean | undefined;
                            } | undefined) => Promise<import("./scheduledEvent.js").ScheduledEvent | undefined>;
                            getScheduledEvents: (guildId: bigint, options?: import("../mod.js").GetScheduledEvents | undefined) => Promise<Collection<bigint, import("./scheduledEvent.js").ScheduledEvent>>;
                            getScheduledEventUsers: (guildId: bigint, eventId: bigint, options?: (import("../mod.js").GetScheduledEventUsers & {
                                withMember: true;
                            }) | undefined) => Promise<Collection<bigint, {
                                user: User;
                                member: Member;
                            }>>;
                            getAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<import("./automodRule.js").AutoModerationRule>;
                            getAutomodRules: (guildId: bigint) => Promise<Collection<bigint, import("./automodRule.js").AutoModerationRule>>;
                            createAutomodRule: (guildId: bigint, options: import("../mod.js").CreateAutoModerationRuleOptions) => Promise<import("./automodRule.js").AutoModerationRule>;
                            editAutomodRule: (guildId: bigint, options: Partial<import("../mod.js").EditAutoModerationRuleOptions>) => Promise<import("./automodRule.js").AutoModerationRule>;
                            deleteAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<void>;
                            createGuild: (options: import("../mod.js").CreateGuild) => Promise<import("./guild.js").Guild>;
                            deleteGuild: (guildId: bigint) => Promise<void>;
                            editGuild: (guildId: bigint, options: import("../mod.js").ModifyGuild, shardId: number) => Promise<import("./guild.js").Guild>;
                            editWelcomeScreen: (guildId: bigint, options: import("../mod.js").ModifyGuildWelcomeScreen) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                            editWidget: (guildId: bigint, enabled: boolean, channelId?: string | null | undefined) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                            getAuditLogs: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => Promise<{
                                users: User[];
                                webhook: import("./webhook.js").Webhook[];
                                auditLogEntries: import("./auditLogEntry.js").AuditLogEntry[];
                                integrations: {
                                    id: bigint | undefined;
                                    name: string | undefined;
                                    type: "twitch" | "youtube" | "discord" | undefined;
                                    enabled: boolean | undefined;
                                    syncing: boolean | undefined;
                                    roleId: bigint | undefined;
                                    enableEmoticons: boolean | undefined;
                                    expireBehavior: import("../types/shared.js").IntegrationExpireBehaviors | undefined;
                                    expireGracePeriod: number | undefined;
                                    user: User | undefined;
                                    account: {
                                        id: bigint | undefined;
                                        name: string | undefined;
                                    };
                                    syncedAt: number | undefined;
                                    subscriberCount: number | undefined;
                                    revoked: boolean | undefined;
                                    application: {
                                        id: bigint;
                                        name: string;
                                        icon: bigint | undefined;
                                        description: string;
                                        bot: User | undefined;
                                    } | undefined;
                                }[];
                                threads: import("./channel.js").Channel[];
                                scheduledEvents: import("./scheduledEvent.js").ScheduledEvent[] | undefined;
                            }>;
                            getAvailableVoiceRegions: () => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                            getBan: (guildId: bigint, memberId: bigint) => Promise<{
                                reason: string | null;
                                user: User;
                            } | undefined>;
                            getBans: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => Promise<Collection<bigint, {
                                reason?: string | undefined;
                                user: User;
                            }>>;
                            getGuild: (guildId: bigint, options?: {
                                counts?: boolean | undefined;
                            } | undefined) => Promise<import("./guild.js").Guild | undefined>;
                            getGuildPreview: (guildId: bigint) => Promise<{
                                id: bigint;
                                name: string;
                                icon: string | undefined;
                                splash: string | undefined;
                                discoverySplash: string | undefined;
                                emojis: import("./emoji.js").Emoji[];
                                features: import("../types/shared.js").GuildFeatures[];
                                approximateMemberCount: number;
                                approximatePresenceCount: number;
                                description: string | undefined;
                                stickers: import("./sticker.js").Sticker[];
                            }>;
                            getPruneCount: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => Promise<number>;
                            getVanityUrl: (guildId: bigint) => Promise<{
                                uses: number | undefined;
                                code: string | undefined;
                            }>;
                            getVoiceRegions: (guildId: bigint) => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                            getWelcomeScreen: (guildId: bigint) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                            getWidget: (guildId: bigint) => Promise<import("./widget.js").GuildWidget>;
                            getWidgetImageURL: (guildId: bigint, options?: import("../mod.js").GetGuildWidgetImageQuery | undefined) => Promise<string>;
                            getWidgetSettings: (guildId: bigint) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                            guildBannerURL: (id: bigint, options: {
                                banner?: string | bigint | undefined;
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            }) => string | undefined;
                            guildIconURL: (id: bigint, icon: bigint | undefined, options?: {
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            } | undefined) => string | undefined;
                            guildSplashURL: (id: bigint, splash: bigint | undefined, options?: {
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            } | undefined) => string | undefined;
                            leaveGuild: (guildId: bigint) => Promise<void>;
                            deleteIntegration: (guildId: bigint, id: bigint) => Promise<void>;
                            getIntegrations: (guildId: bigint) => Promise<Collection<bigint, import("./integration.js").Integration>>;
                            createApplicationCommand: (options: import("../mod.js").CreateApplicationCommand | import("../mod.js").CreateContextApplicationCommand, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                            makeOptionsForCommand: () => import("../types/discord.js").DiscordApplicationCommandOption[];
                            isContextApplicationCommand: () => boolean;
                            deleteApplicationCommand: (id: bigint, guildId?: bigint | undefined) => Promise<void>;
                            deleteInteractionResponse: (token: string, messageId?: bigint | undefined) => Promise<void>;
                            editApplicationCommandPermissions: (guildId: bigint, commandId: bigint, bearerToken: string, options: import("../mod.js").ApplicationCommandPermissions[]) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                            editInteractionResponse: (token: string, options: import("../mod.js").EditWebhookMessage & {
                                messageId?: bigint | undefined;
                            }) => Promise<Message | undefined>;
                            getApplicationCommand: (commandId: bigint, options?: import("../mod.js").GetApplicationCommand | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                            getApplicationCommandPermission: (guildId: bigint, commandId: bigint) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                            getApplicationCommandPermissions: (guildId: bigint) => Promise<Collection<bigint, import("./applicationCommandPermission.js").ApplicationCommandPermission>>;
                            getApplicationCommands: (guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                            upsertApplicationCommand: (commandId: bigint, options: import("../types/shared.js").AtLeastOne<import("../mod.js").CreateContextApplicationCommand, {
                                type: Pick<import("../mod.js").CreateContextApplicationCommand, "type">;
                                description: Pick<import("../mod.js").CreateContextApplicationCommand, "description">;
                                name: Pick<import("../mod.js").CreateContextApplicationCommand, "name">;
                                nameLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "nameLocalizations"> | undefined;
                                descriptionLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "descriptionLocalizations"> | undefined;
                                defaultMemberPermissions?: Pick<import("../mod.js").CreateContextApplicationCommand, "defaultMemberPermissions"> | undefined;
                                dmPermission?: Pick<import("../mod.js").CreateContextApplicationCommand, "dmPermission"> | undefined;
                            }> | import("../types/shared.js").AtLeastOne<import("../mod.js").CreateApplicationCommand, {
                                name: Pick<import("../mod.js").CreateApplicationCommand, "name">;
                                nameLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "nameLocalizations"> | undefined;
                                description: Pick<import("../mod.js").CreateApplicationCommand, "description">;
                                descriptionLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "descriptionLocalizations"> | undefined;
                                type?: Pick<import("../mod.js").CreateApplicationCommand, "type"> | undefined;
                                options?: Pick<import("../mod.js").CreateApplicationCommand, "options"> | undefined;
                                defaultMemberPermissions?: Pick<import("../mod.js").CreateApplicationCommand, "defaultMemberPermissions"> | undefined;
                                dmPermission?: Pick<import("../mod.js").CreateApplicationCommand, "dmPermission"> | undefined;
                            }>, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                            upsertApplicationCommands: (options: (import("../mod.js").CreateContextApplicationCommand | import("../mod.js").UpsertApplicationCommands)[], guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                            deleteFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<void>;
                            editFollowupMessage: (interactionToken: string, messageId: bigint, options: import("../mod.js").EditWebhookMessage) => Promise<Message>;
                            getFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<Message>;
                            getOriginalInteractionResponse: (token: string) => Promise<Message>;
                            sendInteractionResponse: (id: bigint, token: string, options: import("../mod.js").InteractionResponse) => Promise<Message | undefined>;
                            verifySignature: () => {
                                isValid: boolean;
                                body: string;
                            };
                            createInvite: (channelId: bigint, options?: import("../mod.js").CreateChannelInvite | undefined) => Promise<{
                                code: string;
                                guildId: bigint | undefined;
                                channelId: bigint | undefined;
                                inviter: User | undefined;
                                targetType: import("../types/shared.js").TargetTypes | undefined;
                                targetUser: User | undefined;
                                targetApplicationId: bigint | undefined;
                                approximatePresenceCount: number | undefined;
                                approximateMemberCount: number | undefined;
                                expiresAt: number | undefined;
                            }>;
                            deleteInvite: (inviteCode: string) => Promise<void>;
                            getChannelInvites: (channelId: bigint) => Promise<Collection<string, {
                                uses: number;
                                maxUses: number;
                                maxAge: number;
                                temporary: boolean;
                                createdAt: number;
                            }>>;
                            getInvite: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => Promise<{
                                code: string;
                                guildId: bigint | undefined;
                                channelId: bigint | undefined;
                                inviter: User | undefined;
                                targetType: import("../types/shared.js").TargetTypes | undefined;
                                targetUser: User | undefined;
                                targetApplicationId: bigint | undefined;
                                approximatePresenceCount: number | undefined;
                                approximateMemberCount: number | undefined;
                                expiresAt: number | undefined;
                            }>;
                            getInvites: (guildId: bigint) => Promise<Collection<string, {
                                uses: number;
                                maxUses: number;
                                maxAge: number;
                                temporary: boolean;
                                createdAt: number;
                            }>>;
                            avatarURL: (userId: bigint, discriminator: string, options?: {
                                avatar: bigint | undefined;
                                size?: import("../mod.js").ImageSize | undefined;
                                format?: import("../mod.js").ImageFormat | undefined;
                            } | undefined) => string;
                            banMember: (guildId: bigint, id: bigint, options?: import("../mod.js").CreateGuildBan | undefined) => Promise<void>;
                            editBotNickname: (guildId: bigint, options: {
                                nick: string | null;
                                reason?: string | undefined;
                            }) => Promise<string | undefined>;
                            editMember: (guildId: bigint, memberId: bigint, options: import("../mod.js").ModifyGuildMember) => Promise<Member>;
                            fetchMembers: (guildId: bigint, options?: Omit<import("../mod.js").RequestGuildMembers, "guildId"> | undefined) => Promise<void>;
                            getDmChannel: (userId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                            getMember: (guildId: bigint, id: bigint) => Promise<Member | undefined>;
                            getMembers: (guildId: bigint, options: import("../mod.js").ListGuildMembers) => Promise<Collection<bigint, Member>>;
                            kickMember: (guildId: bigint, memberId: bigint, reason?: string | undefined) => Promise<void>;
                            pruneMembers: (guildId: bigint, options: import("../mod.js").BeginGuildPrune) => Promise<number>;
                            searchMembers: (guildId: bigint, query: string, options?: Omit<import("../mod.js").SearchMembers, "query"> | undefined) => Promise<Collection<bigint, Member>>;
                            unbanMember: (guildId: bigint, id: bigint) => Promise<void>;
                            addReaction: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                            addReactions: (channelId: bigint, messageId: bigint, reactions: string[], ordered?: boolean | undefined) => Promise<void>;
                            deleteMessage: (channelId: bigint, messageId: bigint, reason?: string | undefined, delayMilliseconds?: number | undefined) => Promise<void>;
                            deleteMessages: (channelId: bigint, ids: bigint[], reason?: string | undefined) => Promise<void>;
                            editMessage: (channelId: bigint, messageId: bigint, content: import("../mod.js").EditMessage) => Promise<Message>;
                            getMessage: (channelId: bigint, id: bigint) => Promise<Message | undefined>;
                            getMessages: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => Promise<Collection<bigint, Message>>;
                            isGetMessagesAfter: () => boolean;
                            isGetMessagesBefore: () => boolean;
                            isGetMessagesAround: () => boolean;
                            isGetMessagesLimit: () => boolean;
                            getReactions: (channelId: bigint, messageId: bigint, reaction: string, options?: import("../mod.js").GetReactions | undefined) => Promise<Collection<bigint, User>>;
                            pinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                            publishMessage: (channelId: bigint, messageId: bigint) => Promise<Message>;
                            removeAllReactions: (channelId: bigint, messageId: bigint) => Promise<void>;
                            removeReaction: (channelId: bigint, messageId: bigint, reaction: string, options?: {
                                userId?: bigint | undefined;
                            } | undefined) => Promise<void>;
                            removeReactionEmoji: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                            sendMessage: (channelId: bigint, content: import("../mod.js").CreateMessage) => Promise<Message>;
                            unpinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                            editBotProfile: (options: {
                                username?: string | undefined;
                                botAvatarURL?: string | null | undefined;
                            }) => Promise<User>;
                            editBotStatus: (data: import("../mod.js").StatusUpdate) => Promise<void>;
                            editShardStatus: (shardId: number, data: import("../mod.js").StatusUpdate) => void;
                            getGatewayBot: () => Promise<import("./gatewayBot.js").GetGatewayBot>;
                            getUser: (userId: bigint) => Promise<User | undefined>;
                            nitroStickerPacks: () => Promise<import("./sticker.js").StickerPack[]>;
                            getApplicationInfo: () => Promise<import("./application.js").Application>;
                            addRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                            createRole: (guildId: bigint, options: import("../mod.js").CreateGuildRole, reason?: string | undefined) => Promise<Role>;
                            deleteRole: (guildId: bigint, id: bigint) => Promise<void>;
                            editRole: (guildId: bigint, id: bigint, options: import("../mod.js").EditGuildRole) => Promise<Role>;
                            getRoles: (guildId: bigint) => Promise<Collection<bigint, Role>>;
                            modifyRolePositions: (guildId: bigint, options: import("../mod.js").ModifyRolePositions[]) => Promise<Collection<bigint, Role>>;
                            removeRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                            createGuildFromTemplate: (templateCode: string, data: import("../mod.js").CreateGuildFromTemplate) => Promise<import("./guild.js").Guild>;
                            createGuildTemplate: (guildId: bigint, data: import("../mod.js").CreateTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                            deleteGuildTemplate: (guildId: bigint, templateCode: string) => Promise<void>;
                            editGuildTemplate: (guildId: bigint, templateCode: string, data: import("../mod.js").ModifyGuildTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                            getGuildTemplates: (guildId: bigint) => Promise<Collection<string, import("./template.js").Template>>;
                            getTemplate: (templateCode: string) => Promise<import("./template.js").Template>;
                            syncGuildTemplate: (guildId: bigint, templateCode: string) => Promise<import("../types/discord.js").DiscordTemplate>;
                            connectToVoiceChannel: (guildId: bigint, channelId: bigint, options?: import("../types/shared.js").AtLeastOne<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, {
                                selfDeaf: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfDeaf">;
                                selfMute: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfMute">;
                            }> | undefined) => Promise<void>;
                            createWebhook: (channelId: bigint, options: import("../mod.js").CreateWebhook) => Promise<import("./webhook.js").Webhook>;
                            deleteWebhook: (webhookId: bigint, reason?: string | undefined) => Promise<void>;
                            deleteWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").DeleteWebhookMessageOptions | undefined) => Promise<void>;
                            deleteWebhookWithToken: (webhookId: bigint, webhookToken: string) => Promise<void>;
                            editWebhook: (webhookId: bigint, options: import("../mod.js").ModifyWebhook) => Promise<import("./webhook.js").Webhook>;
                            editWebhookMessage: (webhookId: bigint, webhookToken: string, options: import("../mod.js").EditWebhookMessage & {
                                messageId?: bigint | undefined;
                                threadId?: bigint | undefined;
                            }) => Promise<Message>;
                            editWebhookWithToken: (webhookId: bigint, webhookToken: string, options: Omit<import("../mod.js").ModifyWebhook, "channelId">) => Promise<import("./webhook.js").Webhook>;
                            getWebhook: (webhookId: bigint) => Promise<import("./webhook.js").Webhook | undefined>;
                            getWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").GetWebhookMessageOptions | undefined) => Promise<Message>;
                            getWebhooks: (guildId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                            getWebhookWithToken: (webhookId: bigint, token: string) => Promise<import("./webhook.js").Webhook>;
                            sendWebhook: (webhookId: bigint, webhookToken: string, options: import("../mod.js").ExecuteWebhook) => Promise<Message | undefined>;
                        };
                        rest: {
                            version: number;
                            token: string;
                            debug: (text: string) => unknown;
                            customUrl: string;
                            maxRetryCount: number;
                            secretKey: string;
                            checkRateLimits: typeof import("../mod.js").checkRateLimits;
                            cleanupQueues: typeof import("../mod.js").cleanupQueues;
                            processQueue: typeof import("../mod.js").processQueue;
                            processRateLimitedPaths: typeof import("../mod.js").processRateLimitedPaths;
                            processRequestHeaders: typeof import("../mod.js").processRequestHeaders;
                            processRequest: typeof import("../mod.js").processRequest;
                            createRequestBody: typeof import("../mod.js").createRequestBody;
                            runMethod: typeof import("../mod.js").runMethod;
                            simplifyUrl: typeof import("../mod.js").simplifyUrl;
                            processGlobalQueue: typeof import("../mod.js").processGlobalQueue;
                            convertRestError: typeof import("../mod.js").convertRestError;
                            sendRequest: typeof import("../mod.js").sendRequest;
                            invalidRequests: number;
                            maxInvalidRequests: number;
                            invalidRequestsInterval: number;
                            invalidRequestsTimeoutId: number;
                            invalidRequestsSafetyAmount: number;
                            invalidRequestFrozenAt: number;
                            invalidRequestErrorStatuses: number[];
                            pathQueues: Map<string, {
                                isWaiting: boolean;
                                requests: {
                                    request: import("../mod.js").RestRequest;
                                    payload: import("../mod.js").RestPayload;
                                }[];
                            }>;
                            processingQueue: boolean;
                            processingRateLimitedPaths: boolean;
                            globallyRateLimited: boolean;
                            globalQueue: {
                                request: import("../mod.js").RestRequest;
                                payload: import("../mod.js").RestPayload;
                                basicURL: string;
                                urlToUse: string;
                            }[];
                            globalQueueProcessing: boolean;
                            rateLimitedPaths: Map<string, import("../mod.js").RestRateLimitedPath>;
                        };
                        gateway: {
                            stop: (code: number, reason: string) => Promise<void>;
                            gatewayBot: {
                                url: string;
                                shards: number;
                                sessionStartLimit: {
                                    total: number;
                                    remaining: number;
                                    resetAfter: number;
                                    maxConcurrency: number;
                                };
                            };
                            spawnShardDelay: number;
                            shardsPerWorker: number;
                            totalWorkers: number;
                            firstShardId: number;
                            lastShardId: number;
                            buckets: Collection<number, {
                                workers: {
                                    id: number;
                                    queue: number[];
                                }[];
                                leak: import("../util/bucket.js").LeakyBucket;
                            }>;
                            prepareBuckets: () => void;
                            spawnShards: () => void;
                            tellWorkerToIdentify: (workerId: number, shardId: number, bucketId: number) => Promise<void>;
                            debug: (text: import("../mod.js").GatewayDebugEvents, ...args: any[]) => unknown;
                            calculateTotalShards: () => number;
                            calculateWorkerId: (shardId: number) => number;
                            manager: {
                                shards: Collection<number, {
                                    gatewayConfig: import("../mod.js").ShardGatewayConfig;
                                    heart: import("../mod.js").ShardHeart;
                                    id: number;
                                    maxRequestsPerRateLimitTick: number;
                                    previousSequenceNumber: number | null;
                                    rateLimitResetInterval: number;
                                    sessionId: string | undefined;
                                    socket: import("ws") | undefined;
                                    state: import("../mod.js").ShardState;
                                    totalShards: number;
                                    events: import("../mod.js").ShardEvents;
                                    calculateSafeRequests: () => number;
                                    close: (code: number, reason: string) => void;
                                    connect: () => Promise<void>;
                                    identify: () => Promise<void>;
                                    isOpen: () => boolean;
                                    makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                                    resume: () => Promise<void>;
                                    send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                                    shutdown: () => Promise<void>;
                                    bucket: import("../util/bucket.js").LeakyBucket;
                                    handleClose: (close: CloseEvent) => Promise<void>;
                                    handleMessage: (message: MessageEvent<any>) => Promise<void>;
                                    requestIdentify: () => Promise<void>;
                                    offlineSendQueue: ((_?: unknown) => void)[];
                                    resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                    startHeartbeating: (interval: number) => void;
                                    stopHeartbeating: () => void;
                                }>;
                                gatewayConfig: {
                                    url?: string | undefined;
                                    version?: number | undefined;
                                    compress?: boolean | undefined;
                                    intents?: number | undefined;
                                    properties?: {
                                        browser: string;
                                        os: string;
                                        device: string;
                                    } | undefined;
                                    token: string;
                                };
                                totalShards: number;
                                createShardOptions: {
                                    state?: import("../mod.js").ShardState | undefined;
                                    close?: {} | undefined;
                                    resume?: {} | undefined;
                                    connect?: {} | undefined;
                                    calculateSafeRequests?: {} | undefined;
                                    handleClose?: {} | undefined;
                                    handleMessage?: {} | undefined;
                                    identify?: {} | undefined;
                                    isOpen?: {} | undefined;
                                    makePresence?: {} | undefined;
                                    maxRequestsPerRateLimitTick?: number | undefined;
                                    previousSequenceNumber?: number | undefined;
                                    rateLimitResetInterval?: number | undefined;
                                    send?: {} | undefined;
                                    shutdown?: {} | undefined;
                                    startHeartbeating?: {} | undefined;
                                    stopHeartbeating?: {} | undefined;
                                    heart?: {
                                        intervalId?: number | undefined;
                                        lastAck?: number | undefined;
                                        lastBeat?: number | undefined;
                                        rtt?: number | undefined;
                                        timeoutId?: number | undefined;
                                        interval: number;
                                        acknowledged: boolean;
                                    } | undefined;
                                    bucket?: {
                                        max: number;
                                        waiting: ((_?: unknown) => void)[];
                                        refillInterval: number;
                                        refillAmount: number;
                                        tokens: () => number;
                                        acquire: (amount: number, highPriority?: boolean | undefined) => Promise<void>;
                                        nextRefill: () => number;
                                        lastRefill: number;
                                        allowAcquire: boolean;
                                        tokensState: number;
                                    } | undefined;
                                    offlineSendQueue?: {
                                        d?: unknown;
                                        op: import("../types/shared.js").GatewayOpcodes;
                                    }[] | undefined;
                                    resolves?: {
                                        [Symbol.toStringTag]: string;
                                        [Symbol.iterator]: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                        forEach: (callbackfn: (value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void, key: "READY" | "RESUMED" | "INVALID_SESSION", map: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>) => void, thisArg?: any) => void;
                                        entries: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                        keys: () => IterableIterator<"READY" | "RESUMED" | "INVALID_SESSION">;
                                        values: () => IterableIterator<(payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                        set: (key: "READY" | "RESUMED" | "INVALID_SESSION", value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void) => Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                        clear: () => void;
                                        size: number;
                                        get: (key: "READY" | "RESUMED" | "INVALID_SESSION") => ((payload: import("../types/discord.js").DiscordGatewayPayload) => void) | undefined;
                                        delete: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                                        has: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                                    } | undefined;
                                    events: {
                                        connected?: {} | undefined;
                                        connecting?: {} | undefined;
                                        disconnected?: {} | undefined;
                                        heartbeat?: {} | undefined;
                                        heartbeatAck?: {} | undefined;
                                        hello?: {} | undefined;
                                        invalidSession?: {} | undefined;
                                        resuming?: {} | undefined;
                                        resumed?: {} | undefined;
                                        requestedReconnect?: {} | undefined;
                                        identifying?: {} | undefined;
                                        identified?: {} | undefined;
                                        message: (shard: {
                                            gatewayConfig: import("../mod.js").ShardGatewayConfig;
                                            heart: import("../mod.js").ShardHeart;
                                            id: number;
                                            maxRequestsPerRateLimitTick: number;
                                            previousSequenceNumber: number | null;
                                            rateLimitResetInterval: number;
                                            sessionId: string | undefined;
                                            socket: import("ws") | undefined;
                                            state: import("../mod.js").ShardState;
                                            totalShards: number;
                                            events: import("../mod.js").ShardEvents;
                                            calculateSafeRequests: () => number;
                                            close: (code: number, reason: string) => void;
                                            connect: () => Promise<void>;
                                            identify: () => Promise<void>;
                                            isOpen: () => boolean;
                                            makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                                            resume: () => Promise<void>;
                                            send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                                            shutdown: () => Promise<void>;
                                            bucket: import("../util/bucket.js").LeakyBucket;
                                            handleClose: (close: CloseEvent) => Promise<void>;
                                            handleMessage: (message: MessageEvent<any>) => Promise<void>;
                                            requestIdentify: () => Promise<void>;
                                            offlineSendQueue: ((_?: unknown) => void)[];
                                            resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                            startHeartbeating: (interval: number) => void;
                                            stopHeartbeating: () => void;
                                        }, payload: import("../types/discord.js").DiscordGatewayPayload) => unknown;
                                    };
                                };
                                requestIdentify: (shardId: number) => Promise<void>;
                                identify: (shardId: number) => Promise<void>;
                                kill: (shardId: number) => Promise<void>;
                            };
                        };
                        handlers: {
                            READY: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_PINS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            CHANNEL_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_BAN_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_BAN_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_EMOJIS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_INTEGRATIONS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_MEMBERS_CHUNK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_ROLE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_ROLE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_ROLE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_USER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_SCHEDULED_EVENT_USER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTERACTION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INVITE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INVITE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_DELETE_BULK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_REMOVE_ALL: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_REMOVE_EMOJI: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_REACTION_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            MESSAGE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            PRESENCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            TYPING_START: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            USER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            VOICE_SERVER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            VOICE_STATE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            WEBHOOKS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTEGRATION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTEGRATION_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            INTEGRATION_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            STAGE_INSTANCE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            STAGE_INSTANCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            STAGE_INSTANCE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_LIST_SYNC: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            THREAD_MEMBERS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                            GUILD_LOADED_DD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                        };
                        activeGuildIds: Set<bigint>;
                        cache: {
                            unrepliedInteractions: Set<bigint>;
                            fetchAllMembersProcessingRequests: Map<string, Function>;
                        };
                        enabledPlugins: Set<string>;
                    } | undefined;
                    intervalId?: number | undefined;
                    filter: (value: User, key: bigint, ...args: any[]) => boolean;
                    interval: number;
                } | undefined;
                [Symbol.toStringTag]: string;
                [Symbol.iterator]: () => IterableIterator<[bigint, User]>;
                every: (callback: (value: User, key: bigint) => boolean) => boolean;
                some: (callback: (value: User, key: bigint) => boolean) => boolean;
                forEach: (callbackfn: (value: User, key: bigint, map: Map<bigint, User>) => void, thisArg?: any) => void;
                map: <T_10>(callback: (value: User, key: bigint) => T_10) => T_10[];
                filter: (callback: (value: User, key: bigint) => boolean) => Collection<bigint, User>;
                reduce: <T_11>(callback: (accumulator: T_11, value: User, key: bigint) => T_11, initialValue?: T_11 | undefined) => T_11;
                find: (callback: (value: User, key: bigint) => boolean) => User | undefined;
                entries: () => IterableIterator<[bigint, User]>;
                keys: () => IterableIterator<bigint>;
                values: () => IterableIterator<User>;
                set: (key: bigint, value: User) => Collection<bigint, User>;
                clear: () => void;
                size: number;
                get: (key: bigint) => User | undefined;
                startSweeper: (options: import("../util/collection.js").CollectionSweeper<bigint, User>) => number;
                stopSweeper: () => void;
                changeSweeperInterval: (newInterval: number) => void;
                changeSweeperFilter: (newFilter: (value: User, key: bigint, bot: Bot) => boolean) => void;
                forceSet: (key: bigint, value: User) => Collection<bigint, User>;
                array: () => User[];
                first: () => User | undefined;
                last: () => User | undefined;
                random: () => User | undefined;
                delete: (key: bigint) => boolean;
                has: (key: bigint) => boolean;
            } | undefined;
        } | undefined;
        componentType?: import("../types/shared.js").MessageComponentTypes | undefined;
        customId?: string | undefined;
        name: string;
    } | undefined;
    message?: {
        application?: {
            description?: string | undefined;
            id?: string | undefined;
            name?: string | undefined;
            flags?: import("../types/shared.js").ApplicationFlags | undefined;
            guild_id?: string | undefined;
            rpc_origins?: string[] | undefined;
            terms_of_service_url?: string | undefined;
            privacy_policy_url?: string | undefined;
            verify_key?: string | undefined;
            primary_sku_id?: string | undefined;
            slug?: string | undefined;
            icon?: string | null | undefined;
            bot_public?: boolean | undefined;
            bot_require_code_grant?: boolean | undefined;
            owner?: {
                id?: string | undefined;
                avatar?: string | null | undefined;
                discriminator?: string | undefined;
                username?: string | undefined;
                locale?: string | undefined;
                flags?: import("../types/shared.js").UserFlags | undefined;
                premium_type?: import("../types/shared.js").PremiumTypes | undefined;
                public_flags?: import("../types/shared.js").UserFlags | undefined;
                accent_color?: number | undefined;
                bot?: boolean | undefined;
                system?: boolean | undefined;
                mfa_enabled?: boolean | undefined;
                verified?: boolean | undefined;
                email?: string | null | undefined;
                banner?: string | undefined;
            } | undefined;
            team?: {
                icon?: string | null | undefined;
                id: string;
                name: string;
                members: import("../types/discord.js").DiscordTeamMember[];
                owner_user_id: string;
            } | null | undefined;
            cover_image?: string | undefined;
            tags?: string[] | undefined;
            install_params?: {
                permissions: string;
                scopes: string[];
            } | undefined;
            custom_install_url?: string | undefined;
        } | undefined;
        flags?: number | undefined;
        guildId?: bigint | undefined;
        member?: {
            avatar?: bigint | undefined;
            permissions?: bigint | undefined;
            nick?: string | undefined;
            premiumSince?: number | undefined;
            communicationDisabledUntil?: number | undefined;
            id: bigint;
            guildId: bigint;
            roles: bigint[];
            toggles: import("./mod.js").MemberToggles;
            joinedAt: number;
        } | undefined;
        applicationId?: bigint | undefined;
        editedTimestamp?: number | undefined;
        reactions?: {
            emoji: {
                id?: bigint | undefined;
                name?: string | undefined;
                user?: {
                    avatar?: bigint | undefined;
                    locale?: string | undefined;
                    flags?: import("../types/shared.js").UserFlags | undefined;
                    email?: string | undefined;
                    premiumType?: import("../types/shared.js").PremiumTypes | undefined;
                    publicFlags?: import("../types/shared.js").UserFlags | undefined;
                    id: bigint;
                    discriminator: string;
                    username: string;
                    toggles: import("./mod.js").UserToggles;
                } | undefined;
                roles?: bigint[] | undefined;
                toggles: import("./mod.js").EmojiToggles;
            };
            count: number;
            me: boolean;
        }[] | undefined;
        activity?: {
            partyId?: string | undefined;
            type: import("../types/shared.js").MessageActivityTypes;
        } | undefined;
        interaction?: {
            member?: {
                avatar?: bigint | undefined;
                guildId?: bigint | undefined;
                permissions?: bigint | undefined;
                nick?: string | undefined;
                roles?: bigint[] | undefined;
                joinedAt?: number | undefined;
                premiumSince?: number | undefined;
                communicationDisabledUntil?: number | undefined;
                id: bigint;
                toggles: import("./mod.js").MemberToggles;
            } | undefined;
            type: import("../types/shared.js").InteractionTypes;
            id: bigint;
            name: string;
            user: {
                avatar?: bigint | undefined;
                locale?: string | undefined;
                flags?: import("../types/shared.js").UserFlags | undefined;
                email?: string | undefined;
                premiumType?: import("../types/shared.js").PremiumTypes | undefined;
                publicFlags?: import("../types/shared.js").UserFlags | undefined;
                id: bigint;
                discriminator: string;
                username: string;
                toggles: import("./mod.js").UserToggles;
            };
        } | undefined;
        thread?: {
            name?: string | undefined;
            position?: number | undefined;
            flags?: import("../types/shared.js").ChannelFlags | undefined;
            topic?: string | undefined;
            bitrate?: number | undefined;
            nsfw?: boolean | undefined;
            permissions?: bigint | undefined;
            archived?: boolean | undefined;
            locked?: boolean | undefined;
            invitable?: boolean | undefined;
            applicationId?: bigint | undefined;
            userLimit?: number | undefined;
            rateLimitPerUser?: number | undefined;
            rtcRegion?: string | undefined;
            videoQualityMode?: import("../types/shared.js").VideoQualityModes | undefined;
            lastPinTimestamp?: number | undefined;
            lastMessageId?: bigint | undefined;
            ownerId?: bigint | undefined;
            parentId?: bigint | undefined;
            memberCount?: number | undefined;
            messageCount?: number | undefined;
            archiveTimestamp?: number | undefined;
            autoArchiveDuration?: 60 | 1440 | 4320 | 10080 | undefined;
            createTimestamp?: number | undefined;
            newlyCreated?: boolean | undefined;
            type: ChannelTypes;
            id: bigint;
            guildId: bigint;
            permissionOverwrites: bigint[];
            botIsMember: boolean;
        } | undefined;
        components?: {
            url?: string | undefined;
            value?: string | undefined;
            label?: string | undefined;
            style?: import("../types/shared.js").ButtonStyles | import("../types/shared.js").TextStyles | undefined;
            disabled?: boolean | undefined;
            options?: {
                description?: string | undefined;
                default?: boolean | undefined;
                emoji?: {
                    id?: bigint | undefined;
                    name?: string | undefined;
                    animated?: boolean | undefined;
                } | undefined;
                value: string;
                label: string;
            }[] | undefined;
            emoji?: {
                id?: bigint | undefined;
                name?: string | undefined;
                animated?: boolean | undefined;
            } | undefined;
            components?: any[] | undefined;
            customId?: string | undefined;
            placeholder?: string | undefined;
            minValues?: number | undefined;
            maxValues?: number | undefined;
            type: import("../types/shared.js").MessageComponentTypes;
        }[] | undefined;
        stickerItems?: {
            id: bigint;
            name: string;
            formatType: import("../types/shared.js").StickerFormatTypes;
        }[] | undefined;
        webhookId?: bigint | undefined;
        messageReference?: {
            guildId?: bigint | undefined;
            channelId?: bigint | undefined;
            messageId?: bigint | undefined;
        } | undefined;
        type: import("../types/shared.js").MessageTypes;
        id: bigint;
        content: string;
        channelId: bigint;
        timestamp: number;
        isBot: boolean;
        tag: string;
        bitfield: bigint;
        attachments: Attachment[];
        embeds: import("./embed.js").Embed[];
        authorId: bigint;
        mentionedUserIds: bigint[];
        mentionedRoleIds: bigint[];
        mentionedChannelIds: bigint[];
    } | undefined;
    locale?: string | undefined;
    guildId?: bigint | undefined;
    member?: {
        avatar?: bigint | undefined;
        permissions?: bigint | undefined;
        nick?: string | undefined;
        premiumSince?: number | undefined;
        communicationDisabledUntil?: number | undefined;
        id: bigint;
        guildId: bigint;
        roles: bigint[];
        toggles: import("./mod.js").MemberToggles;
        joinedAt: number;
    } | undefined;
    channelId?: bigint | undefined;
    guildLocale?: string | undefined;
    appPermissions?: bigint | undefined;
    type: import("../types/shared.js").InteractionTypes;
    id: bigint;
    user: {
        avatar?: bigint | undefined;
        locale?: string | undefined;
        flags?: import("../types/shared.js").UserFlags | undefined;
        email?: string | undefined;
        premiumType?: import("../types/shared.js").PremiumTypes | undefined;
        publicFlags?: import("../types/shared.js").UserFlags | undefined;
        id: bigint;
        discriminator: string;
        username: string;
        toggles: import("./mod.js").UserToggles;
    };
    applicationId: bigint;
    version: 1;
    token: string;
};
export declare function transformInteractionDataOption(bot: Bot, option: DiscordInteractionDataOption): {
    value?: string | number | boolean | {
        pending?: boolean | undefined;
        mute?: boolean | undefined;
        user?: {
            avatar?: string | null | undefined;
            locale?: string | undefined;
            flags?: import("../types/shared.js").UserFlags | undefined;
            premium_type?: import("../types/shared.js").PremiumTypes | undefined;
            public_flags?: import("../types/shared.js").UserFlags | undefined;
            accent_color?: number | undefined;
            bot?: boolean | undefined;
            system?: boolean | undefined;
            mfa_enabled?: boolean | undefined;
            verified?: boolean | undefined;
            email?: string | null | undefined;
            banner?: string | undefined;
            id: string;
            discriminator: string;
            username: string;
        } | undefined;
        avatar?: string | undefined;
        deaf?: boolean | undefined;
        permissions?: string | undefined;
        nick?: string | null | undefined;
        premium_since?: string | null | undefined;
        communication_disabled_until?: string | null | undefined;
        roles: string[];
        joined_at: string;
    } | {
        name?: string | undefined;
        position?: number | undefined;
        flags?: import("../types/shared.js").ChannelFlags | undefined;
        guild_id?: string | undefined;
        member?: {
            id: string;
            flags: number;
            user_id: string;
            join_timestamp: string;
        } | undefined;
        topic?: string | null | undefined;
        bitrate?: number | undefined;
        user_limit?: number | undefined;
        rate_limit_per_user?: number | undefined;
        rtc_region?: string | null | undefined;
        video_quality_mode?: import("../types/shared.js").VideoQualityModes | undefined;
        message_count?: number | undefined;
        member_count?: number | undefined;
        default_auto_archive_duration?: number | undefined;
        permission_overwrites?: {
            allow?: string | undefined;
            deny?: string | undefined;
            type: import("../types/shared.js").OverwriteTypes;
            id: string;
        }[] | undefined;
        nsfw?: boolean | undefined;
        last_message_id?: string | null | undefined;
        owner_id?: string | undefined;
        application_id?: string | undefined;
        parent_id?: string | null | undefined;
        last_pin_timestamp?: string | null | undefined;
        thread_metadata?: {
            invitable?: boolean | undefined;
            create_timestamp?: string | null | undefined;
            auto_archive_duration: 60 | 1440 | 4320 | 10080;
            archived: boolean;
            locked: boolean;
            archive_timestamp: string;
        } | undefined;
        permissions?: string | undefined;
        newly_created?: boolean | undefined;
        type: ChannelTypes;
        id: string;
    } | {
        icon?: string | undefined;
        tags?: {
            bot_id?: string | undefined;
            integration_id?: string | undefined;
            premium_subscriber?: null | undefined;
        } | undefined;
        unicode_emoji?: string | undefined;
        id: string;
        name: string;
        color: number;
        position: number;
        permissions: string;
        hoist: boolean;
        mentionable: boolean;
        managed: boolean;
    } | undefined;
    options?: {
        value?: string | number | boolean | {
            pending?: boolean | undefined;
            mute?: boolean | undefined;
            user?: {
                avatar?: string | null | undefined;
                locale?: string | undefined;
                flags?: import("../types/shared.js").UserFlags | undefined;
                premium_type?: import("../types/shared.js").PremiumTypes | undefined;
                public_flags?: import("../types/shared.js").UserFlags | undefined;
                accent_color?: number | undefined;
                bot?: boolean | undefined;
                system?: boolean | undefined;
                mfa_enabled?: boolean | undefined;
                verified?: boolean | undefined;
                email?: string | null | undefined;
                banner?: string | undefined;
                id: string;
                discriminator: string;
                username: string;
            } | undefined;
            avatar?: string | undefined;
            deaf?: boolean | undefined;
            permissions?: string | undefined;
            nick?: string | null | undefined;
            premium_since?: string | null | undefined;
            communication_disabled_until?: string | null | undefined;
            roles: string[];
            joined_at: string;
        } | {
            name?: string | undefined;
            position?: number | undefined;
            flags?: import("../types/shared.js").ChannelFlags | undefined;
            guild_id?: string | undefined;
            member?: {
                id: string;
                flags: number;
                user_id: string;
                join_timestamp: string;
            } | undefined;
            topic?: string | null | undefined;
            bitrate?: number | undefined;
            user_limit?: number | undefined;
            rate_limit_per_user?: number | undefined;
            rtc_region?: string | null | undefined;
            video_quality_mode?: import("../types/shared.js").VideoQualityModes | undefined;
            message_count?: number | undefined;
            member_count?: number | undefined;
            default_auto_archive_duration?: number | undefined;
            permission_overwrites?: {
                allow?: string | undefined;
                deny?: string | undefined;
                type: import("../types/shared.js").OverwriteTypes;
                id: string;
            }[] | undefined;
            nsfw?: boolean | undefined;
            last_message_id?: string | null | undefined;
            owner_id?: string | undefined;
            application_id?: string | undefined;
            parent_id?: string | null | undefined;
            last_pin_timestamp?: string | null | undefined;
            thread_metadata?: {
                invitable?: boolean | undefined;
                create_timestamp?: string | null | undefined;
                auto_archive_duration: 60 | 1440 | 4320 | 10080;
                archived: boolean;
                locked: boolean;
                archive_timestamp: string;
            } | undefined;
            permissions?: string | undefined;
            newly_created?: boolean | undefined;
            type: ChannelTypes;
            id: string;
        } | {
            icon?: string | undefined;
            tags?: {
                bot_id?: string | undefined;
                integration_id?: string | undefined;
                premium_subscriber?: null | undefined;
            } | undefined;
            unicode_emoji?: string | undefined;
            id: string;
            name: string;
            color: number;
            position: number;
            permissions: string;
            hoist: boolean;
            mentionable: boolean;
            managed: boolean;
        } | undefined;
        options?: any[] | undefined;
        focused?: boolean | undefined;
        type: import("../types/shared.js").ApplicationCommandOptionTypes;
        name: string;
    }[] | undefined;
    focused?: boolean | undefined;
    type: import("../types/shared.js").ApplicationCommandOptionTypes;
    name: string;
};
export declare function transformInteractionDataResolved(bot: Bot, resolved: DiscordInteractionDataResolved, guildId?: bigint): {
    roles?: {
        maxSize?: number | undefined;
        sweeper?: {
            bot?: {
                handleDiscordPayload?: {} | undefined;
                botGatewayData?: {
                    url: string;
                    shards: number;
                    sessionStartLimit: {
                        total: number;
                        remaining: number;
                        resetAfter: number;
                        maxConcurrency: number;
                    };
                } | undefined;
                id: bigint;
                constants: {
                    DISCORDENO_VERSION: string;
                    USER_AGENT: string;
                    BASE_URL: string;
                    CDN_URL: string;
                    routes: {
                        GATEWAY_BOT: () => string;
                        AUTOMOD_RULES: (guildId: bigint) => string;
                        AUTOMOD_RULE: (guildId: bigint, ruleId: bigint) => string;
                        CHANNEL: (channelId: bigint) => string;
                        CHANNEL_MESSAGE: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_MESSAGES: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => string;
                        CHANNEL_PIN: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_PINS: (channelId: bigint) => string;
                        CHANNEL_BULK_DELETE: (channelId: bigint) => string;
                        CHANNEL_INVITES: (channelId: bigint) => string;
                        CHANNEL_WEBHOOKS: (channelId: bigint) => string;
                        CHANNEL_MESSAGE_REACTION_ME: (channelId: bigint, messageId: bigint, emoji: string) => string;
                        CHANNEL_MESSAGE_REACTION_USER: (channelId: bigint, messageId: bigint, emoji: string, userId: bigint) => string;
                        CHANNEL_MESSAGE_REACTIONS: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_MESSAGE_REACTION: (channelId: bigint, messageId: bigint, emoji: string, options?: import("../mod.js").GetReactions | undefined) => string;
                        CHANNEL_FOLLOW: (channelId: bigint) => string;
                        CHANNEL_MESSAGE_CROSSPOST: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_OVERWRITE: (channelId: bigint, overwriteId: bigint) => string;
                        CHANNEL_TYPING: (channelId: bigint) => string;
                        THREAD_START_PUBLIC: (channelId: bigint, messageId: bigint) => string;
                        THREAD_START_PRIVATE: (channelId: bigint) => string;
                        THREAD_ACTIVE: (guildId: bigint) => string;
                        THREAD_MEMBERS: (channelId: bigint) => string;
                        THREAD_ME: (channelId: bigint) => string;
                        THREAD_USER: (channelId: bigint, userId: bigint) => string;
                        THREAD_ARCHIVED: (channelId: bigint) => string;
                        THREAD_ARCHIVED_PUBLIC: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                        THREAD_ARCHIVED_PRIVATE: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                        THREAD_ARCHIVED_PRIVATE_JOINED: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                        FORUM_START: (channelId: bigint) => string;
                        GUILD: (guildId: bigint, withCounts?: boolean | undefined) => string;
                        GUILDS: () => string;
                        GUILD_AUDIT_LOGS: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => string;
                        GUILD_BAN: (guildId: bigint, userId: bigint) => string;
                        GUILD_BANS: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => string;
                        GUILD_BANNER: (guildId: bigint, icon: string) => string;
                        GUILD_CHANNELS: (guildId: bigint) => string;
                        GUILD_WIDGET: (guildId: bigint) => string;
                        GUILD_WIDGET_JSON: (guildId: bigint) => string;
                        GUILD_WIDGET_IMAGE: (guildId: bigint, style?: "shield" | "banner1" | "banner2" | "banner3" | "banner4" | undefined) => string;
                        GUILD_EMOJI: (guildId: bigint, emojiId: bigint) => string;
                        GUILD_EMOJIS: (guildId: bigint) => string;
                        GUILD_ICON: (guildId: bigint, icon: string) => string;
                        GUILD_INTEGRATION: (guildId: bigint, integrationId: bigint) => string;
                        GUILD_INTEGRATION_SYNC: (guildId: bigint, integrationId: bigint) => string;
                        GUILD_INTEGRATIONS: (guildId: bigint) => string;
                        GUILD_INVITES: (guildId: bigint) => string;
                        GUILD_LEAVE: (guildId: bigint) => string;
                        GUILD_MEMBER: (guildId: bigint, userId: bigint) => string;
                        GUILD_MEMBERS: (guildId: bigint, options?: import("../mod.js").ListGuildMembers | undefined) => string;
                        GUILD_MEMBER_ROLE: (guildId: bigint, memberId: bigint, roleId: bigint) => string;
                        GUILD_MEMBERS_SEARCH: (guildId: bigint, query: string, options?: {
                            limit?: number | undefined;
                        } | undefined) => string;
                        GUILD_PRUNE: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => string;
                        GUILD_REGIONS: (guildId: bigint) => string;
                        GUILD_ROLE: (guildId: bigint, roleId: bigint) => string;
                        GUILD_ROLES: (guildId: bigint) => string;
                        GUILD_SPLASH: (guildId: bigint, icon: string) => string;
                        GUILD_VANITY_URL: (guildId: bigint) => string;
                        GUILD_WEBHOOKS: (guildId: bigint) => string;
                        TEMPLATE: (code: string) => string;
                        GUILD_TEMPLATE: (guildId: bigint, code: string) => string;
                        GUILD_TEMPLATES: (guildId: bigint) => string;
                        GUILD_PREVIEW: (guildId: bigint) => string;
                        UPDATE_VOICE_STATE: (guildId: bigint, userId?: bigint | undefined) => string;
                        GUILD_WELCOME_SCREEN: (guildId: bigint) => string;
                        GUILD_SCHEDULED_EVENTS: (guildId: bigint, withUserCount?: boolean | undefined) => string;
                        GUILD_SCHEDULED_EVENT: (guildId: bigint, eventId: bigint, withUserCount?: boolean | undefined) => string;
                        GUILD_SCHEDULED_EVENT_USERS: (guildId: bigint, eventId: bigint, options?: import("../mod.js").GetScheduledEventUsers | undefined) => string;
                        VOICE_REGIONS: () => string;
                        INVITE: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => string;
                        WEBHOOK: (webhookId: bigint, token: string, options?: {
                            wait?: boolean | undefined;
                            threadId?: bigint | undefined;
                        } | undefined) => string;
                        WEBHOOK_ID: (webhookId: bigint) => string;
                        WEBHOOK_MESSAGE: (webhookId: bigint, token: string, messageId: bigint, options?: {
                            threadId?: bigint | undefined;
                        } | undefined) => string;
                        WEBHOOK_MESSAGE_ORIGINAL: (webhookId: bigint, token: string, options?: {
                            threadId?: bigint | undefined;
                        } | undefined) => string;
                        WEBHOOK_SLACK: (webhookId: bigint, token: string) => string;
                        WEBHOOK_GITHUB: (webhookId: bigint, token: string) => string;
                        COMMANDS: (applicationId: bigint) => string;
                        COMMANDS_GUILD: (applicationId: bigint, guildId: bigint) => string;
                        COMMANDS_PERMISSIONS: (applicationId: bigint, guildId: bigint) => string;
                        COMMANDS_PERMISSION: (applicationId: bigint, guildId: bigint, commandId: bigint) => string;
                        COMMANDS_ID: (applicationId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                        COMMANDS_GUILD_ID: (applicationId: bigint, guildId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                        INTERACTION_ID_TOKEN: (interactionId: bigint, token: string) => string;
                        INTERACTION_ORIGINAL_ID_TOKEN: (interactionId: bigint, token: string) => string;
                        INTERACTION_ID_TOKEN_MESSAGE_ID: (applicationId: bigint, token: string, messageId: bigint) => string;
                        USER: (userId: bigint) => string;
                        USER_BOT: () => string;
                        USER_GUILDS: () => string;
                        USER_AVATAR: (userId: bigint, icon: string) => string;
                        USER_DEFAULT_AVATAR: (icon: number) => string;
                        USER_DM: () => string;
                        USER_CONNECTIONS: () => string;
                        USER_NICK: (guildId: bigint) => string;
                        DISCOVERY_CATEGORIES: () => string;
                        DISCOVERY_VALID_TERM: (term: string) => string;
                        DISCOVERY_METADATA: (guildId: bigint) => string;
                        DISCOVERY_SUBCATEGORY: (guildId: bigint, categoryId: number) => string;
                        OAUTH2_APPLICATION: () => string;
                        STAGE_INSTANCES: () => string;
                        STAGE_INSTANCE: (channelId: bigint) => string;
                        NITRO_STICKER_PACKS: () => string;
                    };
                    regexes: {
                        SLASH_COMMANDS_NAME_REGEX: RegExp;
                        CONTEXT_MENU_COMMANDS_NAME_REGEX: RegExp;
                        CHANNEL_MENTION_REGEX: RegExp;
                        DISCORD_SNOWFLAKE_REGEX: RegExp;
                    };
                    Errors: {
                        REQUEST_UNKNOWN_ERROR: import("../types/shared.js").Errors.REQUEST_UNKNOWN_ERROR;
                        GUILD_NOT_FOUND: import("../types/shared.js").Errors.GUILD_NOT_FOUND;
                        RULES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.RULES_CHANNEL_CANNOT_BE_DELETED;
                        UPDATES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.UPDATES_CHANNEL_CANNOT_BE_DELETED;
                        NICKNAMES_MAX_LENGTH: import("../types/shared.js").Errors.NICKNAMES_MAX_LENGTH;
                        MEMBER_NOT_IN_VOICE_CHANNEL: import("../types/shared.js").Errors.MEMBER_NOT_IN_VOICE_CHANNEL;
                        MESSAGE_MAX_LENGTH: import("../types/shared.js").Errors.MESSAGE_MAX_LENGTH;
                        BOTS_HIGHEST_ROLE_TOO_LOW: import("../types/shared.js").Errors.BOTS_HIGHEST_ROLE_TOO_LOW;
                        CHANNEL_NOT_FOUND: import("../types/shared.js").Errors.CHANNEL_NOT_FOUND;
                        CHANNEL_NOT_IN_GUILD: import("../types/shared.js").Errors.CHANNEL_NOT_IN_GUILD;
                        CHANNEL_NOT_TEXT_BASED: import("../types/shared.js").Errors.CHANNEL_NOT_TEXT_BASED;
                        CHANNEL_NOT_STAGE_VOICE: import("../types/shared.js").Errors.CHANNEL_NOT_STAGE_VOICE;
                        INVALID_TOPIC_LENGTH: import("../types/shared.js").Errors.INVALID_TOPIC_LENGTH;
                        GUILD_NOT_DISCOVERABLE: import("../types/shared.js").Errors.GUILD_NOT_DISCOVERABLE;
                        GUILD_WIDGET_NOT_ENABLED: import("../types/shared.js").Errors.GUILD_WIDGET_NOT_ENABLED;
                        MEMBER_NOT_FOUND: import("../types/shared.js").Errors.MEMBER_NOT_FOUND;
                        MEMBER_SEARCH_LIMIT_TOO_HIGH: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_HIGH;
                        MEMBER_SEARCH_LIMIT_TOO_LOW: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_LOW;
                        PRUNE_MAX_DAYS: import("../types/shared.js").Errors.PRUNE_MAX_DAYS;
                        ROLE_NOT_FOUND: import("../types/shared.js").Errors.ROLE_NOT_FOUND;
                        INVALID_THREAD_PARENT_CHANNEL_TYPE: import("../types/shared.js").Errors.INVALID_THREAD_PARENT_CHANNEL_TYPE;
                        GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS: import("../types/shared.js").Errors.GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS;
                        NOT_A_THREAD_CHANNEL: import("../types/shared.js").Errors.NOT_A_THREAD_CHANNEL;
                        MISSING_MANAGE_THREADS_AND_NOT_MEMBER: import("../types/shared.js").Errors.MISSING_MANAGE_THREADS_AND_NOT_MEMBER;
                        CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD: import("../types/shared.js").Errors.CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD;
                        HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS: import("../types/shared.js").Errors.HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS;
                        INVALID_GET_MESSAGES_LIMIT: import("../types/shared.js").Errors.INVALID_GET_MESSAGES_LIMIT;
                        DELETE_MESSAGES_MIN: import("../types/shared.js").Errors.DELETE_MESSAGES_MIN;
                        PRUNE_MIN_DAYS: import("../types/shared.js").Errors.PRUNE_MIN_DAYS;
                        INVALID_SLASH_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_DESCRIPTION;
                        INVALID_SLASH_NAME: import("../types/shared.js").Errors.INVALID_SLASH_NAME;
                        INVALID_SLASH_OPTIONS: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS;
                        INVALID_SLASH_OPTIONS_CHOICES: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICES;
                        TOO_MANY_SLASH_OPTIONS: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTIONS;
                        INVALID_SLASH_OPTION_CHOICE_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_CHOICE_NAME;
                        INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE;
                        TOO_MANY_SLASH_OPTION_CHOICES: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTION_CHOICES;
                        ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES: import("../types/shared.js").Errors.ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES;
                        INVALID_SLASH_OPTION_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_NAME;
                        INVALID_SLASH_OPTION_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_DESCRIPTION;
                        INVALID_CONTEXT_MENU_COMMAND_NAME: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_NAME;
                        INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION;
                        INVALID_WEBHOOK_NAME: import("../types/shared.js").Errors.INVALID_WEBHOOK_NAME;
                        INVALID_WEBHOOK_OPTIONS: import("../types/shared.js").Errors.INVALID_WEBHOOK_OPTIONS;
                        MISSING_ADD_REACTIONS: import("../types/shared.js").Errors.MISSING_ADD_REACTIONS;
                        MISSING_ADMINISTRATOR: import("../types/shared.js").Errors.MISSING_ADMINISTRATOR;
                        MISSING_ATTACH_FILES: import("../types/shared.js").Errors.MISSING_ATTACH_FILES;
                        MISSING_BAN_MEMBERS: import("../types/shared.js").Errors.MISSING_BAN_MEMBERS;
                        MISSING_CHANGE_NICKNAME: import("../types/shared.js").Errors.MISSING_CHANGE_NICKNAME;
                        MISSING_CONNECT: import("../types/shared.js").Errors.MISSING_CONNECT;
                        MISSING_CREATE_INSTANT_INVITE: import("../types/shared.js").Errors.MISSING_CREATE_INSTANT_INVITE;
                        MISSING_DEAFEN_MEMBERS: import("../types/shared.js").Errors.MISSING_DEAFEN_MEMBERS;
                        MISSING_EMBED_LINKS: import("../types/shared.js").Errors.MISSING_EMBED_LINKS;
                        MISSING_INTENT_GUILD_MEMBERS: import("../types/shared.js").Errors.MISSING_INTENT_GUILD_MEMBERS;
                        MISSING_KICK_MEMBERS: import("../types/shared.js").Errors.MISSING_KICK_MEMBERS;
                        MISSING_MANAGE_CHANNELS: import("../types/shared.js").Errors.MISSING_MANAGE_CHANNELS;
                        MISSING_MANAGE_EMOJIS: import("../types/shared.js").Errors.MISSING_MANAGE_EMOJIS;
                        MISSING_MANAGE_GUILD: import("../types/shared.js").Errors.MISSING_MANAGE_GUILD;
                        MISSING_MANAGE_MESSAGES: import("../types/shared.js").Errors.MISSING_MANAGE_MESSAGES;
                        MISSING_MANAGE_NICKNAMES: import("../types/shared.js").Errors.MISSING_MANAGE_NICKNAMES;
                        MISSING_MANAGE_ROLES: import("../types/shared.js").Errors.MISSING_MANAGE_ROLES;
                        MISSING_MANAGE_WEBHOOKS: import("../types/shared.js").Errors.MISSING_MANAGE_WEBHOOKS;
                        MISSING_MENTION_EVERYONE: import("../types/shared.js").Errors.MISSING_MENTION_EVERYONE;
                        MISSING_MOVE_MEMBERS: import("../types/shared.js").Errors.MISSING_MOVE_MEMBERS;
                        MISSING_MUTE_MEMBERS: import("../types/shared.js").Errors.MISSING_MUTE_MEMBERS;
                        MISSING_PRIORITY_SPEAKER: import("../types/shared.js").Errors.MISSING_PRIORITY_SPEAKER;
                        MISSING_READ_MESSAGE_HISTORY: import("../types/shared.js").Errors.MISSING_READ_MESSAGE_HISTORY;
                        MISSING_SEND_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_MESSAGES;
                        MISSING_SEND_TTS_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_TTS_MESSAGES;
                        MISSING_SPEAK: import("../types/shared.js").Errors.MISSING_SPEAK;
                        MISSING_STREAM: import("../types/shared.js").Errors.MISSING_STREAM;
                        MISSING_USE_VAD: import("../types/shared.js").Errors.MISSING_USE_VAD;
                        MISSING_USE_EXTERNAL_EMOJIS: import("../types/shared.js").Errors.MISSING_USE_EXTERNAL_EMOJIS;
                        MISSING_VIEW_AUDIT_LOG: import("../types/shared.js").Errors.MISSING_VIEW_AUDIT_LOG;
                        MISSING_VIEW_CHANNEL: import("../types/shared.js").Errors.MISSING_VIEW_CHANNEL;
                        MISSING_VIEW_GUILD_INSIGHTS: import("../types/shared.js").Errors.MISSING_VIEW_GUILD_INSIGHTS;
                        USERNAME_INVALID_CHARACTER: import("../types/shared.js").Errors.USERNAME_INVALID_CHARACTER;
                        USERNAME_INVALID_USERNAME: import("../types/shared.js").Errors.USERNAME_INVALID_USERNAME;
                        USERNAME_MAX_LENGTH: import("../types/shared.js").Errors.USERNAME_MAX_LENGTH;
                        USERNAME_MIN_LENGTH: import("../types/shared.js").Errors.USERNAME_MIN_LENGTH;
                        NONCE_TOO_LONG: import("../types/shared.js").Errors.NONCE_TOO_LONG;
                        INVITE_MAX_AGE_INVALID: import("../types/shared.js").Errors.INVITE_MAX_AGE_INVALID;
                        INVITE_MAX_USES_INVALID: import("../types/shared.js").Errors.INVITE_MAX_USES_INVALID;
                        RATE_LIMIT_RETRY_MAXED: import("../types/shared.js").Errors.RATE_LIMIT_RETRY_MAXED;
                        REQUEST_CLIENT_ERROR: import("../types/shared.js").Errors.REQUEST_CLIENT_ERROR;
                        REQUEST_SERVER_ERROR: import("../types/shared.js").Errors.REQUEST_SERVER_ERROR;
                        TOO_MANY_COMPONENTS: import("../types/shared.js").Errors.TOO_MANY_COMPONENTS;
                        TOO_MANY_ACTION_ROWS: import("../types/shared.js").Errors.TOO_MANY_ACTION_ROWS;
                        LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID: import("../types/shared.js").Errors.LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID;
                        COMPONENT_LABEL_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_LABEL_TOO_BIG;
                        COMPONENT_CUSTOM_ID_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_CUSTOM_ID_TOO_BIG;
                        BUTTON_REQUIRES_CUSTOM_ID: import("../types/shared.js").Errors.BUTTON_REQUIRES_CUSTOM_ID;
                        COMPONENT_SELECT_MUST_BE_ALONE: import("../types/shared.js").Errors.COMPONENT_SELECT_MUST_BE_ALONE;
                        COMPONENT_PLACEHOLDER_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_PLACEHOLDER_TOO_BIG;
                        COMPONENT_SELECT_MIN_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_LOW;
                        COMPONENT_SELECT_MIN_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_MANY;
                        COMPONENT_SELECT_MAX_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_LOW;
                        COMPONENT_SELECT_MAX_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_MANY;
                        COMPONENT_SELECT_OPTIONS_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_LOW;
                        COMPONENT_SELECT_OPTIONS_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_MANY;
                        SELECT_OPTION_LABEL_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_LABEL_TOO_BIG;
                        SELECT_OPTION_VALUE_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_VALUE_TOO_BIG;
                        SELECT_OPTION_TOO_MANY_DEFAULTS: import("../types/shared.js").Errors.SELECT_OPTION_TOO_MANY_DEFAULTS;
                        COMPONENT_SELECT_MIN_HIGHER_THAN_MAX: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_HIGHER_THAN_MAX;
                        CANNOT_ADD_USER_TO_ARCHIVED_THREADS: import("../types/shared.js").Errors.CANNOT_ADD_USER_TO_ARCHIVED_THREADS;
                        CANNOT_LEAVE_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_LEAVE_ARCHIVED_THREAD;
                        CANNOT_REMOVE_FROM_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_REMOVE_FROM_ARCHIVED_THREAD;
                        YOU_CAN_NOT_DM_THE_BOT_ITSELF: import("../types/shared.js").Errors.YOU_CAN_NOT_DM_THE_BOT_ITSELF;
                    };
                };
                events: import("../bot.js").EventHandlers;
                applicationId: bigint;
                token: string;
                intents: import("../types/shared.js").GatewayIntents;
                urlWSS: string;
                utils: {
                    snowflakeToBigint: typeof import("../mod.js").snowflakeToBigint;
                    bigintToSnowflake: typeof import("../mod.js").bigintToSnowflake;
                    calculateShardId: typeof import("../mod.js").calculateShardId;
                    delay: typeof import("../mod.js").delay;
                    iconHashToBigInt: typeof import("../mod.js").iconHashToBigInt;
                    iconBigintToHash: typeof import("../mod.js").iconBigintToHash;
                    validateLength: typeof import("../mod.js").validateLength;
                    urlToBase64: typeof import("../util/urlToBase64.js").urlToBase64;
                    formatImageURL: typeof import("../mod.js").formatImageURL;
                    calculateBits: typeof import("../util/permissions.js").calculateBits;
                    calculatePermissions: typeof import("../util/permissions.js").calculatePermissions;
                };
                transformers: import("../bot.js").Transformers;
                helpers: {
                    addToThread: (threadId: bigint, userId: bigint) => Promise<void>;
                    getActiveThreads: (guildId: bigint) => Promise<{
                        threads: Collection<bigint, import("./channel.js").Channel>;
                        members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                    }>;
                    getArchivedThreads: (channelId: bigint, options?: (import("../mod.js").ListArchivedThreads & {
                        type?: "private" | "public" | "privateJoinedThreads" | undefined;
                    }) | undefined) => Promise<{
                        threads: Collection<bigint, import("./channel.js").Channel>;
                        members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                        hasMore: boolean;
                    }>;
                    getThreadMember: (threadId: bigint, userId: bigint) => Promise<{
                        id: bigint | undefined;
                        userId: bigint | undefined;
                        joinTimestamp: number;
                        flags: number;
                    }>;
                    getThreadMembers: (threadId: bigint) => Promise<Collection<bigint | undefined, import("./threadMember.js").ThreadMember>>;
                    joinThread: (threadId: bigint) => Promise<void>;
                    leaveThread: (threadId: bigint) => Promise<void>;
                    removeThreadMember: (threadId: bigint, userId: bigint) => Promise<void>;
                    startThreadWithMessage: (channelId: bigint, messageId: bigint, options: import("../mod.js").StartThreadWithMessage) => Promise<import("./channel.js").Channel>;
                    startThreadWithoutMessage: (channelId: bigint, options: import("../mod.js").StartThreadWithoutMessage) => Promise<import("./channel.js").Channel>;
                    createForumPost: (channelId: bigint, options: import("../mod.js").CreateForumPostWithMessage) => Promise<import("./channel.js").Channel>;
                    createChannel: (guildId: bigint, options?: import("../mod.js").CreateGuildChannel | undefined, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                    createStageInstance: (options: import("../mod.js").CreateStageInstance) => Promise<import("./stageInstance.js").StageInstance>;
                    deleteChannel: (channelId: bigint, reason?: string | undefined) => Promise<void>;
                    deleteChannelOverwrite: (channelId: bigint, overwriteId: bigint) => Promise<void>;
                    deleteStageInstance: (channelId: bigint) => Promise<void>;
                    editChannel: (channelId: bigint, options: import("../mod.js").ModifyChannel, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                    editChannelOverwrite: (channelId: bigint, overwrite: import("../mod.js").OverwriteReadable) => Promise<void>;
                    followChannel: (sourceChannelId: bigint, targetChannelId: bigint) => Promise<bigint>;
                    getChannel: (channelId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                    getChannels: (guildId: bigint) => Promise<Collection<bigint, import("./channel.js").Channel>>;
                    getChannelWebhooks: (channelId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                    getPins: (channelId: bigint) => Promise<Message[]>;
                    getStageInstance: (channelId: bigint) => Promise<import("./stageInstance.js").StageInstance>;
                    startTyping: (channelId: bigint) => Promise<void>;
                    swapChannels: (guildId: bigint, channelPositions: import("../mod.js").ModifyGuildChannelPositions[]) => Promise<void>;
                    updateStageInstance: (channelId: bigint, data: import("../types/shared.js").AtLeastOne<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, {
                        topic: Pick<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, "topic">;
                    }>) => Promise<import("./stageInstance.js").StageInstance>;
                    updateBotVoiceState: (guildId: bigint, options: import("../mod.js").UpdateSelfVoiceState) => Promise<void>;
                    updateUserVoiceState: (guildId: bigint, options: import("../mod.js").UpdateOthersVoiceState) => Promise<void>;
                    addDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                    editDiscovery: (guildId: bigint, data: import("../mod.js").ModifyGuildDiscoveryMetadata) => Promise<{
                        guildId: bigint;
                        primaryCategoryId: number;
                        keywords: string[] | undefined;
                        emojiDiscoverabilityEnabled: boolean;
                        partnerActionedTimestamp: number | undefined;
                        partnerApplicationTimestamp: number | undefined;
                        categoryIds: number[];
                    }>;
                    getDiscovery: (guildId: bigint) => Promise<{
                        guildId: bigint;
                        primaryCategoryId: number;
                        keywords: string[] | undefined;
                        emojiDiscoverabilityEnabled: boolean;
                        partnerActionedTimestamp: number | undefined;
                        partnerApplicationTimestamp: number | undefined;
                        categoryIds: number[];
                    }>;
                    getDiscoveryCategories: () => Promise<Collection<number, import("../types/discord.js").DiscordDiscoveryCategory>>;
                    removeDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                    validDiscoveryTerm: (term: string) => Promise<boolean>;
                    createEmoji: (guildId: bigint, options: import("../mod.js").CreateGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                    deleteEmoji: (guildId: bigint, id: bigint, reason?: string | undefined) => Promise<void>;
                    editEmoji: (guildId: bigint, id: bigint, options: import("../mod.js").ModifyGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                    emojiUrl: (id: bigint, animated?: boolean | undefined) => string;
                    getEmoji: (guildId: bigint, emojiId: bigint) => Promise<import("./emoji.js").Emoji>;
                    getEmojis: (guildId: bigint) => Promise<Collection<bigint, import("./emoji.js").Emoji>>;
                    createScheduledEvent: (guildId: bigint, options: import("../mod.js").CreateScheduledEvent) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                    deleteScheduledEvent: (guildId: bigint, eventId: bigint) => Promise<void>;
                    editScheduledEvent: (guildId: bigint, eventId: bigint, options: Partial<import("../mod.js").EditScheduledEvent>) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                    getScheduledEvent: (guildId: bigint, eventId: bigint, options?: {
                        withUserCount?: boolean | undefined;
                    } | undefined) => Promise<import("./scheduledEvent.js").ScheduledEvent | undefined>;
                    getScheduledEvents: (guildId: bigint, options?: import("../mod.js").GetScheduledEvents | undefined) => Promise<Collection<bigint, import("./scheduledEvent.js").ScheduledEvent>>;
                    getScheduledEventUsers: (guildId: bigint, eventId: bigint, options?: (import("../mod.js").GetScheduledEventUsers & {
                        withMember: true;
                    }) | undefined) => Promise<Collection<bigint, {
                        user: User;
                        member: Member;
                    }>>;
                    getAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<import("./automodRule.js").AutoModerationRule>;
                    getAutomodRules: (guildId: bigint) => Promise<Collection<bigint, import("./automodRule.js").AutoModerationRule>>;
                    createAutomodRule: (guildId: bigint, options: import("../mod.js").CreateAutoModerationRuleOptions) => Promise<import("./automodRule.js").AutoModerationRule>;
                    editAutomodRule: (guildId: bigint, options: Partial<import("../mod.js").EditAutoModerationRuleOptions>) => Promise<import("./automodRule.js").AutoModerationRule>;
                    deleteAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<void>;
                    createGuild: (options: import("../mod.js").CreateGuild) => Promise<import("./guild.js").Guild>;
                    deleteGuild: (guildId: bigint) => Promise<void>;
                    editGuild: (guildId: bigint, options: import("../mod.js").ModifyGuild, shardId: number) => Promise<import("./guild.js").Guild>;
                    editWelcomeScreen: (guildId: bigint, options: import("../mod.js").ModifyGuildWelcomeScreen) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                    editWidget: (guildId: bigint, enabled: boolean, channelId?: string | null | undefined) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                    getAuditLogs: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => Promise<{
                        users: User[];
                        webhook: import("./webhook.js").Webhook[];
                        auditLogEntries: import("./auditLogEntry.js").AuditLogEntry[];
                        integrations: {
                            id: bigint | undefined;
                            name: string | undefined;
                            type: "twitch" | "youtube" | "discord" | undefined;
                            enabled: boolean | undefined;
                            syncing: boolean | undefined;
                            roleId: bigint | undefined;
                            enableEmoticons: boolean | undefined;
                            expireBehavior: import("../types/shared.js").IntegrationExpireBehaviors | undefined;
                            expireGracePeriod: number | undefined;
                            user: User | undefined;
                            account: {
                                id: bigint | undefined;
                                name: string | undefined;
                            };
                            syncedAt: number | undefined;
                            subscriberCount: number | undefined;
                            revoked: boolean | undefined;
                            application: {
                                id: bigint;
                                name: string;
                                icon: bigint | undefined;
                                description: string;
                                bot: User | undefined;
                            } | undefined;
                        }[];
                        threads: import("./channel.js").Channel[];
                        scheduledEvents: import("./scheduledEvent.js").ScheduledEvent[] | undefined;
                    }>;
                    getAvailableVoiceRegions: () => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                    getBan: (guildId: bigint, memberId: bigint) => Promise<{
                        reason: string | null;
                        user: User;
                    } | undefined>;
                    getBans: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => Promise<Collection<bigint, {
                        reason?: string | undefined;
                        user: User;
                    }>>;
                    getGuild: (guildId: bigint, options?: {
                        counts?: boolean | undefined;
                    } | undefined) => Promise<import("./guild.js").Guild | undefined>;
                    getGuildPreview: (guildId: bigint) => Promise<{
                        id: bigint;
                        name: string;
                        icon: string | undefined;
                        splash: string | undefined;
                        discoverySplash: string | undefined;
                        emojis: import("./emoji.js").Emoji[];
                        features: import("../types/shared.js").GuildFeatures[];
                        approximateMemberCount: number;
                        approximatePresenceCount: number;
                        description: string | undefined;
                        stickers: import("./sticker.js").Sticker[];
                    }>;
                    getPruneCount: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => Promise<number>;
                    getVanityUrl: (guildId: bigint) => Promise<{
                        uses: number | undefined;
                        code: string | undefined;
                    }>;
                    getVoiceRegions: (guildId: bigint) => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                    getWelcomeScreen: (guildId: bigint) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                    getWidget: (guildId: bigint) => Promise<import("./widget.js").GuildWidget>;
                    getWidgetImageURL: (guildId: bigint, options?: import("../mod.js").GetGuildWidgetImageQuery | undefined) => Promise<string>;
                    getWidgetSettings: (guildId: bigint) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                    guildBannerURL: (id: bigint, options: {
                        banner?: string | bigint | undefined;
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    }) => string | undefined;
                    guildIconURL: (id: bigint, icon: bigint | undefined, options?: {
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    } | undefined) => string | undefined;
                    guildSplashURL: (id: bigint, splash: bigint | undefined, options?: {
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    } | undefined) => string | undefined;
                    leaveGuild: (guildId: bigint) => Promise<void>;
                    deleteIntegration: (guildId: bigint, id: bigint) => Promise<void>;
                    getIntegrations: (guildId: bigint) => Promise<Collection<bigint, import("./integration.js").Integration>>;
                    createApplicationCommand: (options: import("../mod.js").CreateApplicationCommand | import("../mod.js").CreateContextApplicationCommand, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                    makeOptionsForCommand: () => import("../types/discord.js").DiscordApplicationCommandOption[];
                    isContextApplicationCommand: () => boolean;
                    deleteApplicationCommand: (id: bigint, guildId?: bigint | undefined) => Promise<void>;
                    deleteInteractionResponse: (token: string, messageId?: bigint | undefined) => Promise<void>;
                    editApplicationCommandPermissions: (guildId: bigint, commandId: bigint, bearerToken: string, options: import("../mod.js").ApplicationCommandPermissions[]) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                    editInteractionResponse: (token: string, options: import("../mod.js").EditWebhookMessage & {
                        messageId?: bigint | undefined;
                    }) => Promise<Message | undefined>;
                    getApplicationCommand: (commandId: bigint, options?: import("../mod.js").GetApplicationCommand | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                    getApplicationCommandPermission: (guildId: bigint, commandId: bigint) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                    getApplicationCommandPermissions: (guildId: bigint) => Promise<Collection<bigint, import("./applicationCommandPermission.js").ApplicationCommandPermission>>;
                    getApplicationCommands: (guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                    upsertApplicationCommand: (commandId: bigint, options: import("../types/shared.js").AtLeastOne<import("../mod.js").CreateContextApplicationCommand, {
                        type: Pick<import("../mod.js").CreateContextApplicationCommand, "type">;
                        description: Pick<import("../mod.js").CreateContextApplicationCommand, "description">;
                        name: Pick<import("../mod.js").CreateContextApplicationCommand, "name">;
                        nameLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "nameLocalizations"> | undefined;
                        descriptionLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "descriptionLocalizations"> | undefined;
                        defaultMemberPermissions?: Pick<import("../mod.js").CreateContextApplicationCommand, "defaultMemberPermissions"> | undefined;
                        dmPermission?: Pick<import("../mod.js").CreateContextApplicationCommand, "dmPermission"> | undefined;
                    }> | import("../types/shared.js").AtLeastOne<import("../mod.js").CreateApplicationCommand, {
                        name: Pick<import("../mod.js").CreateApplicationCommand, "name">;
                        nameLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "nameLocalizations"> | undefined;
                        description: Pick<import("../mod.js").CreateApplicationCommand, "description">;
                        descriptionLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "descriptionLocalizations"> | undefined;
                        type?: Pick<import("../mod.js").CreateApplicationCommand, "type"> | undefined;
                        options?: Pick<import("../mod.js").CreateApplicationCommand, "options"> | undefined;
                        defaultMemberPermissions?: Pick<import("../mod.js").CreateApplicationCommand, "defaultMemberPermissions"> | undefined;
                        dmPermission?: Pick<import("../mod.js").CreateApplicationCommand, "dmPermission"> | undefined;
                    }>, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                    upsertApplicationCommands: (options: (import("../mod.js").CreateContextApplicationCommand | import("../mod.js").UpsertApplicationCommands)[], guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                    deleteFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<void>;
                    editFollowupMessage: (interactionToken: string, messageId: bigint, options: import("../mod.js").EditWebhookMessage) => Promise<Message>;
                    getFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<Message>;
                    getOriginalInteractionResponse: (token: string) => Promise<Message>;
                    sendInteractionResponse: (id: bigint, token: string, options: import("../mod.js").InteractionResponse) => Promise<Message | undefined>;
                    verifySignature: () => {
                        isValid: boolean;
                        body: string;
                    };
                    createInvite: (channelId: bigint, options?: import("../mod.js").CreateChannelInvite | undefined) => Promise<{
                        code: string;
                        guildId: bigint | undefined;
                        channelId: bigint | undefined;
                        inviter: User | undefined;
                        targetType: import("../types/shared.js").TargetTypes | undefined;
                        targetUser: User | undefined;
                        targetApplicationId: bigint | undefined;
                        approximatePresenceCount: number | undefined;
                        approximateMemberCount: number | undefined;
                        expiresAt: number | undefined;
                    }>;
                    deleteInvite: (inviteCode: string) => Promise<void>;
                    getChannelInvites: (channelId: bigint) => Promise<Collection<string, {
                        uses: number;
                        maxUses: number;
                        maxAge: number;
                        temporary: boolean;
                        createdAt: number;
                    }>>;
                    getInvite: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => Promise<{
                        code: string;
                        guildId: bigint | undefined;
                        channelId: bigint | undefined;
                        inviter: User | undefined;
                        targetType: import("../types/shared.js").TargetTypes | undefined;
                        targetUser: User | undefined;
                        targetApplicationId: bigint | undefined;
                        approximatePresenceCount: number | undefined;
                        approximateMemberCount: number | undefined;
                        expiresAt: number | undefined;
                    }>;
                    getInvites: (guildId: bigint) => Promise<Collection<string, {
                        uses: number;
                        maxUses: number;
                        maxAge: number;
                        temporary: boolean;
                        createdAt: number;
                    }>>;
                    avatarURL: (userId: bigint, discriminator: string, options?: {
                        avatar: bigint | undefined;
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    } | undefined) => string;
                    banMember: (guildId: bigint, id: bigint, options?: import("../mod.js").CreateGuildBan | undefined) => Promise<void>;
                    editBotNickname: (guildId: bigint, options: {
                        nick: string | null;
                        reason?: string | undefined;
                    }) => Promise<string | undefined>;
                    editMember: (guildId: bigint, memberId: bigint, options: import("../mod.js").ModifyGuildMember) => Promise<Member>;
                    fetchMembers: (guildId: bigint, options?: Omit<import("../mod.js").RequestGuildMembers, "guildId"> | undefined) => Promise<void>;
                    getDmChannel: (userId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                    getMember: (guildId: bigint, id: bigint) => Promise<Member | undefined>;
                    getMembers: (guildId: bigint, options: import("../mod.js").ListGuildMembers) => Promise<Collection<bigint, Member>>;
                    kickMember: (guildId: bigint, memberId: bigint, reason?: string | undefined) => Promise<void>;
                    pruneMembers: (guildId: bigint, options: import("../mod.js").BeginGuildPrune) => Promise<number>;
                    searchMembers: (guildId: bigint, query: string, options?: Omit<import("../mod.js").SearchMembers, "query"> | undefined) => Promise<Collection<bigint, Member>>;
                    unbanMember: (guildId: bigint, id: bigint) => Promise<void>;
                    addReaction: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                    addReactions: (channelId: bigint, messageId: bigint, reactions: string[], ordered?: boolean | undefined) => Promise<void>;
                    deleteMessage: (channelId: bigint, messageId: bigint, reason?: string | undefined, delayMilliseconds?: number | undefined) => Promise<void>;
                    deleteMessages: (channelId: bigint, ids: bigint[], reason?: string | undefined) => Promise<void>;
                    editMessage: (channelId: bigint, messageId: bigint, content: import("../mod.js").EditMessage) => Promise<Message>;
                    getMessage: (channelId: bigint, id: bigint) => Promise<Message | undefined>;
                    getMessages: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => Promise<Collection<bigint, Message>>;
                    isGetMessagesAfter: () => boolean;
                    isGetMessagesBefore: () => boolean;
                    isGetMessagesAround: () => boolean;
                    isGetMessagesLimit: () => boolean;
                    getReactions: (channelId: bigint, messageId: bigint, reaction: string, options?: import("../mod.js").GetReactions | undefined) => Promise<Collection<bigint, User>>;
                    pinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                    publishMessage: (channelId: bigint, messageId: bigint) => Promise<Message>;
                    removeAllReactions: (channelId: bigint, messageId: bigint) => Promise<void>;
                    removeReaction: (channelId: bigint, messageId: bigint, reaction: string, options?: {
                        userId?: bigint | undefined;
                    } | undefined) => Promise<void>;
                    removeReactionEmoji: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                    sendMessage: (channelId: bigint, content: import("../mod.js").CreateMessage) => Promise<Message>;
                    unpinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                    editBotProfile: (options: {
                        username?: string | undefined;
                        botAvatarURL?: string | null | undefined;
                    }) => Promise<User>;
                    editBotStatus: (data: import("../mod.js").StatusUpdate) => Promise<void>;
                    editShardStatus: (shardId: number, data: import("../mod.js").StatusUpdate) => void;
                    getGatewayBot: () => Promise<import("./gatewayBot.js").GetGatewayBot>;
                    getUser: (userId: bigint) => Promise<User | undefined>;
                    nitroStickerPacks: () => Promise<import("./sticker.js").StickerPack[]>;
                    getApplicationInfo: () => Promise<import("./application.js").Application>;
                    addRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                    createRole: (guildId: bigint, options: import("../mod.js").CreateGuildRole, reason?: string | undefined) => Promise<Role>;
                    deleteRole: (guildId: bigint, id: bigint) => Promise<void>;
                    editRole: (guildId: bigint, id: bigint, options: import("../mod.js").EditGuildRole) => Promise<Role>;
                    getRoles: (guildId: bigint) => Promise<Collection<bigint, Role>>;
                    modifyRolePositions: (guildId: bigint, options: import("../mod.js").ModifyRolePositions[]) => Promise<Collection<bigint, Role>>;
                    removeRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                    createGuildFromTemplate: (templateCode: string, data: import("../mod.js").CreateGuildFromTemplate) => Promise<import("./guild.js").Guild>;
                    createGuildTemplate: (guildId: bigint, data: import("../mod.js").CreateTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                    deleteGuildTemplate: (guildId: bigint, templateCode: string) => Promise<void>;
                    editGuildTemplate: (guildId: bigint, templateCode: string, data: import("../mod.js").ModifyGuildTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                    getGuildTemplates: (guildId: bigint) => Promise<Collection<string, import("./template.js").Template>>;
                    getTemplate: (templateCode: string) => Promise<import("./template.js").Template>;
                    syncGuildTemplate: (guildId: bigint, templateCode: string) => Promise<import("../types/discord.js").DiscordTemplate>;
                    connectToVoiceChannel: (guildId: bigint, channelId: bigint, options?: import("../types/shared.js").AtLeastOne<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, {
                        selfDeaf: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfDeaf">;
                        selfMute: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfMute">;
                    }> | undefined) => Promise<void>;
                    createWebhook: (channelId: bigint, options: import("../mod.js").CreateWebhook) => Promise<import("./webhook.js").Webhook>;
                    deleteWebhook: (webhookId: bigint, reason?: string | undefined) => Promise<void>;
                    deleteWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").DeleteWebhookMessageOptions | undefined) => Promise<void>;
                    deleteWebhookWithToken: (webhookId: bigint, webhookToken: string) => Promise<void>;
                    editWebhook: (webhookId: bigint, options: import("../mod.js").ModifyWebhook) => Promise<import("./webhook.js").Webhook>;
                    editWebhookMessage: (webhookId: bigint, webhookToken: string, options: import("../mod.js").EditWebhookMessage & {
                        messageId?: bigint | undefined;
                        threadId?: bigint | undefined;
                    }) => Promise<Message>;
                    editWebhookWithToken: (webhookId: bigint, webhookToken: string, options: Omit<import("../mod.js").ModifyWebhook, "channelId">) => Promise<import("./webhook.js").Webhook>;
                    getWebhook: (webhookId: bigint) => Promise<import("./webhook.js").Webhook | undefined>;
                    getWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").GetWebhookMessageOptions | undefined) => Promise<Message>;
                    getWebhooks: (guildId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                    getWebhookWithToken: (webhookId: bigint, token: string) => Promise<import("./webhook.js").Webhook>;
                    sendWebhook: (webhookId: bigint, webhookToken: string, options: import("../mod.js").ExecuteWebhook) => Promise<Message | undefined>;
                };
                rest: {
                    version: number;
                    token: string;
                    debug: (text: string) => unknown;
                    customUrl: string;
                    maxRetryCount: number;
                    secretKey: string;
                    checkRateLimits: typeof import("../mod.js").checkRateLimits;
                    cleanupQueues: typeof import("../mod.js").cleanupQueues;
                    processQueue: typeof import("../mod.js").processQueue;
                    processRateLimitedPaths: typeof import("../mod.js").processRateLimitedPaths;
                    processRequestHeaders: typeof import("../mod.js").processRequestHeaders;
                    processRequest: typeof import("../mod.js").processRequest;
                    createRequestBody: typeof import("../mod.js").createRequestBody;
                    runMethod: typeof import("../mod.js").runMethod;
                    simplifyUrl: typeof import("../mod.js").simplifyUrl;
                    processGlobalQueue: typeof import("../mod.js").processGlobalQueue;
                    convertRestError: typeof import("../mod.js").convertRestError;
                    sendRequest: typeof import("../mod.js").sendRequest;
                    invalidRequests: number;
                    maxInvalidRequests: number;
                    invalidRequestsInterval: number;
                    invalidRequestsTimeoutId: number;
                    invalidRequestsSafetyAmount: number;
                    invalidRequestFrozenAt: number;
                    invalidRequestErrorStatuses: number[];
                    pathQueues: Map<string, {
                        isWaiting: boolean;
                        requests: {
                            request: import("../mod.js").RestRequest;
                            payload: import("../mod.js").RestPayload;
                        }[];
                    }>;
                    processingQueue: boolean;
                    processingRateLimitedPaths: boolean;
                    globallyRateLimited: boolean;
                    globalQueue: {
                        request: import("../mod.js").RestRequest;
                        payload: import("../mod.js").RestPayload;
                        basicURL: string;
                        urlToUse: string;
                    }[];
                    globalQueueProcessing: boolean;
                    rateLimitedPaths: Map<string, import("../mod.js").RestRateLimitedPath>;
                };
                gateway: {
                    stop: (code: number, reason: string) => Promise<void>;
                    gatewayBot: {
                        url: string;
                        shards: number;
                        sessionStartLimit: {
                            total: number;
                            remaining: number;
                            resetAfter: number;
                            maxConcurrency: number;
                        };
                    };
                    spawnShardDelay: number;
                    shardsPerWorker: number;
                    totalWorkers: number;
                    firstShardId: number;
                    lastShardId: number;
                    buckets: Collection<number, {
                        workers: {
                            id: number;
                            queue: number[];
                        }[];
                        leak: import("../util/bucket.js").LeakyBucket;
                    }>;
                    prepareBuckets: () => void;
                    spawnShards: () => void;
                    tellWorkerToIdentify: (workerId: number, shardId: number, bucketId: number) => Promise<void>;
                    debug: (text: import("../mod.js").GatewayDebugEvents, ...args: any[]) => unknown;
                    calculateTotalShards: () => number;
                    calculateWorkerId: (shardId: number) => number;
                    manager: {
                        shards: Collection<number, {
                            gatewayConfig: import("../mod.js").ShardGatewayConfig;
                            heart: import("../mod.js").ShardHeart;
                            id: number;
                            maxRequestsPerRateLimitTick: number;
                            previousSequenceNumber: number | null;
                            rateLimitResetInterval: number;
                            sessionId: string | undefined;
                            socket: import("ws") | undefined;
                            state: import("../mod.js").ShardState;
                            totalShards: number;
                            events: import("../mod.js").ShardEvents;
                            calculateSafeRequests: () => number;
                            close: (code: number, reason: string) => void;
                            connect: () => Promise<void>;
                            identify: () => Promise<void>;
                            isOpen: () => boolean;
                            makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                            resume: () => Promise<void>;
                            send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                            shutdown: () => Promise<void>;
                            bucket: import("../util/bucket.js").LeakyBucket;
                            handleClose: (close: CloseEvent) => Promise<void>;
                            handleMessage: (message: MessageEvent<any>) => Promise<void>;
                            requestIdentify: () => Promise<void>;
                            offlineSendQueue: ((_?: unknown) => void)[];
                            resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                            startHeartbeating: (interval: number) => void;
                            stopHeartbeating: () => void;
                        }>;
                        gatewayConfig: {
                            url?: string | undefined;
                            version?: number | undefined;
                            compress?: boolean | undefined;
                            intents?: number | undefined;
                            properties?: {
                                browser: string;
                                os: string;
                                device: string;
                            } | undefined;
                            token: string;
                        };
                        totalShards: number;
                        createShardOptions: {
                            state?: import("../mod.js").ShardState | undefined;
                            close?: {} | undefined;
                            resume?: {} | undefined;
                            connect?: {} | undefined;
                            calculateSafeRequests?: {} | undefined;
                            handleClose?: {} | undefined;
                            handleMessage?: {} | undefined;
                            identify?: {} | undefined;
                            isOpen?: {} | undefined;
                            makePresence?: {} | undefined;
                            maxRequestsPerRateLimitTick?: number | undefined;
                            previousSequenceNumber?: number | undefined;
                            rateLimitResetInterval?: number | undefined;
                            send?: {} | undefined;
                            shutdown?: {} | undefined;
                            startHeartbeating?: {} | undefined;
                            stopHeartbeating?: {} | undefined;
                            heart?: {
                                intervalId?: number | undefined;
                                lastAck?: number | undefined;
                                lastBeat?: number | undefined;
                                rtt?: number | undefined;
                                timeoutId?: number | undefined;
                                interval: number;
                                acknowledged: boolean;
                            } | undefined;
                            bucket?: {
                                max: number;
                                waiting: ((_?: unknown) => void)[];
                                refillInterval: number;
                                refillAmount: number;
                                tokens: () => number;
                                acquire: (amount: number, highPriority?: boolean | undefined) => Promise<void>;
                                nextRefill: () => number;
                                lastRefill: number;
                                allowAcquire: boolean;
                                tokensState: number;
                            } | undefined;
                            offlineSendQueue?: {
                                d?: unknown;
                                op: import("../types/shared.js").GatewayOpcodes;
                            }[] | undefined;
                            resolves?: {
                                [Symbol.toStringTag]: string;
                                [Symbol.iterator]: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                forEach: (callbackfn: (value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void, key: "READY" | "RESUMED" | "INVALID_SESSION", map: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>) => void, thisArg?: any) => void;
                                entries: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                keys: () => IterableIterator<"READY" | "RESUMED" | "INVALID_SESSION">;
                                values: () => IterableIterator<(payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                set: (key: "READY" | "RESUMED" | "INVALID_SESSION", value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void) => Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                clear: () => void;
                                size: number;
                                get: (key: "READY" | "RESUMED" | "INVALID_SESSION") => ((payload: import("../types/discord.js").DiscordGatewayPayload) => void) | undefined;
                                delete: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                                has: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                            } | undefined;
                            events: {
                                connected?: {} | undefined;
                                connecting?: {} | undefined;
                                disconnected?: {} | undefined;
                                heartbeat?: {} | undefined;
                                heartbeatAck?: {} | undefined;
                                hello?: {} | undefined;
                                invalidSession?: {} | undefined;
                                resuming?: {} | undefined;
                                resumed?: {} | undefined;
                                requestedReconnect?: {} | undefined;
                                identifying?: {} | undefined;
                                identified?: {} | undefined;
                                message: (shard: {
                                    gatewayConfig: import("../mod.js").ShardGatewayConfig;
                                    heart: import("../mod.js").ShardHeart;
                                    id: number;
                                    maxRequestsPerRateLimitTick: number;
                                    previousSequenceNumber: number | null;
                                    rateLimitResetInterval: number;
                                    sessionId: string | undefined;
                                    socket: import("ws") | undefined;
                                    state: import("../mod.js").ShardState;
                                    totalShards: number;
                                    events: import("../mod.js").ShardEvents;
                                    calculateSafeRequests: () => number;
                                    close: (code: number, reason: string) => void;
                                    connect: () => Promise<void>;
                                    identify: () => Promise<void>;
                                    isOpen: () => boolean;
                                    makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                                    resume: () => Promise<void>;
                                    send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                                    shutdown: () => Promise<void>;
                                    bucket: import("../util/bucket.js").LeakyBucket;
                                    handleClose: (close: CloseEvent) => Promise<void>;
                                    handleMessage: (message: MessageEvent<any>) => Promise<void>;
                                    requestIdentify: () => Promise<void>;
                                    offlineSendQueue: ((_?: unknown) => void)[];
                                    resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                    startHeartbeating: (interval: number) => void;
                                    stopHeartbeating: () => void;
                                }, payload: import("../types/discord.js").DiscordGatewayPayload) => unknown;
                            };
                        };
                        requestIdentify: (shardId: number) => Promise<void>;
                        identify: (shardId: number) => Promise<void>;
                        kill: (shardId: number) => Promise<void>;
                    };
                };
                handlers: {
                    READY: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_PINS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_BAN_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_BAN_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_EMOJIS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_INTEGRATIONS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBERS_CHUNK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_ROLE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_ROLE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_ROLE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_USER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_USER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTERACTION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INVITE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INVITE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_DELETE_BULK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_REMOVE_ALL: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_REMOVE_EMOJI: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    PRESENCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    TYPING_START: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    USER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    VOICE_SERVER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    VOICE_STATE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    WEBHOOKS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTEGRATION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTEGRATION_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTEGRATION_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    STAGE_INSTANCE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    STAGE_INSTANCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    STAGE_INSTANCE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_LIST_SYNC: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_MEMBERS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_LOADED_DD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                };
                activeGuildIds: Set<bigint>;
                cache: {
                    unrepliedInteractions: Set<bigint>;
                    fetchAllMembersProcessingRequests: Map<string, Function>;
                };
                enabledPlugins: Set<string>;
            } | undefined;
            intervalId?: number | undefined;
            filter: (value: Role, key: bigint, ...args: any[]) => boolean;
            interval: number;
        } | undefined;
        [Symbol.toStringTag]: string;
        [Symbol.iterator]: () => IterableIterator<[bigint, Role]>;
        every: (callback: (value: Role, key: bigint) => boolean) => boolean;
        some: (callback: (value: Role, key: bigint) => boolean) => boolean;
        forEach: (callbackfn: (value: Role, key: bigint, map: Map<bigint, Role>) => void, thisArg?: any) => void;
        map: <T>(callback: (value: Role, key: bigint) => T) => T[];
        filter: (callback: (value: Role, key: bigint) => boolean) => Collection<bigint, Role>;
        reduce: <T_1>(callback: (accumulator: T_1, value: Role, key: bigint) => T_1, initialValue?: T_1 | undefined) => T_1;
        find: (callback: (value: Role, key: bigint) => boolean) => Role | undefined;
        entries: () => IterableIterator<[bigint, Role]>;
        keys: () => IterableIterator<bigint>;
        values: () => IterableIterator<Role>;
        set: (key: bigint, value: Role) => Collection<bigint, Role>;
        clear: () => void;
        size: number;
        get: (key: bigint) => Role | undefined;
        startSweeper: (options: import("../util/collection.js").CollectionSweeper<bigint, Role>) => number;
        stopSweeper: () => void;
        changeSweeperInterval: (newInterval: number) => void;
        changeSweeperFilter: (newFilter: (value: Role, key: bigint, bot: Bot) => boolean) => void;
        forceSet: (key: bigint, value: Role) => Collection<bigint, Role>;
        array: () => Role[];
        first: () => Role | undefined;
        last: () => Role | undefined;
        random: () => Role | undefined;
        delete: (key: bigint) => boolean;
        has: (key: bigint) => boolean;
    } | undefined;
    members?: {
        maxSize?: number | undefined;
        sweeper?: {
            bot?: {
                handleDiscordPayload?: {} | undefined;
                botGatewayData?: {
                    url: string;
                    shards: number;
                    sessionStartLimit: {
                        total: number;
                        remaining: number;
                        resetAfter: number;
                        maxConcurrency: number;
                    };
                } | undefined;
                id: bigint;
                constants: {
                    DISCORDENO_VERSION: string;
                    USER_AGENT: string;
                    BASE_URL: string;
                    CDN_URL: string;
                    routes: {
                        GATEWAY_BOT: () => string;
                        AUTOMOD_RULES: (guildId: bigint) => string;
                        AUTOMOD_RULE: (guildId: bigint, ruleId: bigint) => string;
                        CHANNEL: (channelId: bigint) => string;
                        CHANNEL_MESSAGE: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_MESSAGES: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => string;
                        CHANNEL_PIN: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_PINS: (channelId: bigint) => string;
                        CHANNEL_BULK_DELETE: (channelId: bigint) => string;
                        CHANNEL_INVITES: (channelId: bigint) => string;
                        CHANNEL_WEBHOOKS: (channelId: bigint) => string;
                        CHANNEL_MESSAGE_REACTION_ME: (channelId: bigint, messageId: bigint, emoji: string) => string;
                        CHANNEL_MESSAGE_REACTION_USER: (channelId: bigint, messageId: bigint, emoji: string, userId: bigint) => string;
                        CHANNEL_MESSAGE_REACTIONS: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_MESSAGE_REACTION: (channelId: bigint, messageId: bigint, emoji: string, options?: import("../mod.js").GetReactions | undefined) => string;
                        CHANNEL_FOLLOW: (channelId: bigint) => string;
                        CHANNEL_MESSAGE_CROSSPOST: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_OVERWRITE: (channelId: bigint, overwriteId: bigint) => string;
                        CHANNEL_TYPING: (channelId: bigint) => string;
                        THREAD_START_PUBLIC: (channelId: bigint, messageId: bigint) => string;
                        THREAD_START_PRIVATE: (channelId: bigint) => string;
                        THREAD_ACTIVE: (guildId: bigint) => string;
                        THREAD_MEMBERS: (channelId: bigint) => string;
                        THREAD_ME: (channelId: bigint) => string;
                        THREAD_USER: (channelId: bigint, userId: bigint) => string;
                        THREAD_ARCHIVED: (channelId: bigint) => string;
                        THREAD_ARCHIVED_PUBLIC: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                        THREAD_ARCHIVED_PRIVATE: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                        THREAD_ARCHIVED_PRIVATE_JOINED: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                        FORUM_START: (channelId: bigint) => string;
                        GUILD: (guildId: bigint, withCounts?: boolean | undefined) => string;
                        GUILDS: () => string;
                        GUILD_AUDIT_LOGS: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => string;
                        GUILD_BAN: (guildId: bigint, userId: bigint) => string;
                        GUILD_BANS: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => string;
                        GUILD_BANNER: (guildId: bigint, icon: string) => string;
                        GUILD_CHANNELS: (guildId: bigint) => string;
                        GUILD_WIDGET: (guildId: bigint) => string;
                        GUILD_WIDGET_JSON: (guildId: bigint) => string;
                        GUILD_WIDGET_IMAGE: (guildId: bigint, style?: "shield" | "banner1" | "banner2" | "banner3" | "banner4" | undefined) => string;
                        GUILD_EMOJI: (guildId: bigint, emojiId: bigint) => string;
                        GUILD_EMOJIS: (guildId: bigint) => string;
                        GUILD_ICON: (guildId: bigint, icon: string) => string;
                        GUILD_INTEGRATION: (guildId: bigint, integrationId: bigint) => string;
                        GUILD_INTEGRATION_SYNC: (guildId: bigint, integrationId: bigint) => string;
                        GUILD_INTEGRATIONS: (guildId: bigint) => string;
                        GUILD_INVITES: (guildId: bigint) => string;
                        GUILD_LEAVE: (guildId: bigint) => string;
                        GUILD_MEMBER: (guildId: bigint, userId: bigint) => string;
                        GUILD_MEMBERS: (guildId: bigint, options?: import("../mod.js").ListGuildMembers | undefined) => string;
                        GUILD_MEMBER_ROLE: (guildId: bigint, memberId: bigint, roleId: bigint) => string;
                        GUILD_MEMBERS_SEARCH: (guildId: bigint, query: string, options?: {
                            limit?: number | undefined;
                        } | undefined) => string;
                        GUILD_PRUNE: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => string;
                        GUILD_REGIONS: (guildId: bigint) => string;
                        GUILD_ROLE: (guildId: bigint, roleId: bigint) => string;
                        GUILD_ROLES: (guildId: bigint) => string;
                        GUILD_SPLASH: (guildId: bigint, icon: string) => string;
                        GUILD_VANITY_URL: (guildId: bigint) => string;
                        GUILD_WEBHOOKS: (guildId: bigint) => string;
                        TEMPLATE: (code: string) => string;
                        GUILD_TEMPLATE: (guildId: bigint, code: string) => string;
                        GUILD_TEMPLATES: (guildId: bigint) => string;
                        GUILD_PREVIEW: (guildId: bigint) => string;
                        UPDATE_VOICE_STATE: (guildId: bigint, userId?: bigint | undefined) => string;
                        GUILD_WELCOME_SCREEN: (guildId: bigint) => string;
                        GUILD_SCHEDULED_EVENTS: (guildId: bigint, withUserCount?: boolean | undefined) => string;
                        GUILD_SCHEDULED_EVENT: (guildId: bigint, eventId: bigint, withUserCount?: boolean | undefined) => string;
                        GUILD_SCHEDULED_EVENT_USERS: (guildId: bigint, eventId: bigint, options?: import("../mod.js").GetScheduledEventUsers | undefined) => string;
                        VOICE_REGIONS: () => string;
                        INVITE: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => string;
                        WEBHOOK: (webhookId: bigint, token: string, options?: {
                            wait?: boolean | undefined;
                            threadId?: bigint | undefined;
                        } | undefined) => string;
                        WEBHOOK_ID: (webhookId: bigint) => string;
                        WEBHOOK_MESSAGE: (webhookId: bigint, token: string, messageId: bigint, options?: {
                            threadId?: bigint | undefined;
                        } | undefined) => string;
                        WEBHOOK_MESSAGE_ORIGINAL: (webhookId: bigint, token: string, options?: {
                            threadId?: bigint | undefined;
                        } | undefined) => string;
                        WEBHOOK_SLACK: (webhookId: bigint, token: string) => string;
                        WEBHOOK_GITHUB: (webhookId: bigint, token: string) => string;
                        COMMANDS: (applicationId: bigint) => string;
                        COMMANDS_GUILD: (applicationId: bigint, guildId: bigint) => string;
                        COMMANDS_PERMISSIONS: (applicationId: bigint, guildId: bigint) => string;
                        COMMANDS_PERMISSION: (applicationId: bigint, guildId: bigint, commandId: bigint) => string;
                        COMMANDS_ID: (applicationId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                        COMMANDS_GUILD_ID: (applicationId: bigint, guildId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                        INTERACTION_ID_TOKEN: (interactionId: bigint, token: string) => string;
                        INTERACTION_ORIGINAL_ID_TOKEN: (interactionId: bigint, token: string) => string;
                        INTERACTION_ID_TOKEN_MESSAGE_ID: (applicationId: bigint, token: string, messageId: bigint) => string;
                        USER: (userId: bigint) => string;
                        USER_BOT: () => string;
                        USER_GUILDS: () => string;
                        USER_AVATAR: (userId: bigint, icon: string) => string;
                        USER_DEFAULT_AVATAR: (icon: number) => string;
                        USER_DM: () => string;
                        USER_CONNECTIONS: () => string;
                        USER_NICK: (guildId: bigint) => string;
                        DISCOVERY_CATEGORIES: () => string;
                        DISCOVERY_VALID_TERM: (term: string) => string;
                        DISCOVERY_METADATA: (guildId: bigint) => string;
                        DISCOVERY_SUBCATEGORY: (guildId: bigint, categoryId: number) => string;
                        OAUTH2_APPLICATION: () => string;
                        STAGE_INSTANCES: () => string;
                        STAGE_INSTANCE: (channelId: bigint) => string;
                        NITRO_STICKER_PACKS: () => string;
                    };
                    regexes: {
                        SLASH_COMMANDS_NAME_REGEX: RegExp;
                        CONTEXT_MENU_COMMANDS_NAME_REGEX: RegExp;
                        CHANNEL_MENTION_REGEX: RegExp;
                        DISCORD_SNOWFLAKE_REGEX: RegExp;
                    };
                    Errors: {
                        REQUEST_UNKNOWN_ERROR: import("../types/shared.js").Errors.REQUEST_UNKNOWN_ERROR;
                        GUILD_NOT_FOUND: import("../types/shared.js").Errors.GUILD_NOT_FOUND;
                        RULES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.RULES_CHANNEL_CANNOT_BE_DELETED;
                        UPDATES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.UPDATES_CHANNEL_CANNOT_BE_DELETED;
                        NICKNAMES_MAX_LENGTH: import("../types/shared.js").Errors.NICKNAMES_MAX_LENGTH;
                        MEMBER_NOT_IN_VOICE_CHANNEL: import("../types/shared.js").Errors.MEMBER_NOT_IN_VOICE_CHANNEL;
                        MESSAGE_MAX_LENGTH: import("../types/shared.js").Errors.MESSAGE_MAX_LENGTH;
                        BOTS_HIGHEST_ROLE_TOO_LOW: import("../types/shared.js").Errors.BOTS_HIGHEST_ROLE_TOO_LOW;
                        CHANNEL_NOT_FOUND: import("../types/shared.js").Errors.CHANNEL_NOT_FOUND;
                        CHANNEL_NOT_IN_GUILD: import("../types/shared.js").Errors.CHANNEL_NOT_IN_GUILD;
                        CHANNEL_NOT_TEXT_BASED: import("../types/shared.js").Errors.CHANNEL_NOT_TEXT_BASED;
                        CHANNEL_NOT_STAGE_VOICE: import("../types/shared.js").Errors.CHANNEL_NOT_STAGE_VOICE;
                        INVALID_TOPIC_LENGTH: import("../types/shared.js").Errors.INVALID_TOPIC_LENGTH;
                        GUILD_NOT_DISCOVERABLE: import("../types/shared.js").Errors.GUILD_NOT_DISCOVERABLE;
                        GUILD_WIDGET_NOT_ENABLED: import("../types/shared.js").Errors.GUILD_WIDGET_NOT_ENABLED;
                        MEMBER_NOT_FOUND: import("../types/shared.js").Errors.MEMBER_NOT_FOUND;
                        MEMBER_SEARCH_LIMIT_TOO_HIGH: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_HIGH;
                        MEMBER_SEARCH_LIMIT_TOO_LOW: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_LOW;
                        PRUNE_MAX_DAYS: import("../types/shared.js").Errors.PRUNE_MAX_DAYS;
                        ROLE_NOT_FOUND: import("../types/shared.js").Errors.ROLE_NOT_FOUND;
                        INVALID_THREAD_PARENT_CHANNEL_TYPE: import("../types/shared.js").Errors.INVALID_THREAD_PARENT_CHANNEL_TYPE;
                        GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS: import("../types/shared.js").Errors.GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS;
                        NOT_A_THREAD_CHANNEL: import("../types/shared.js").Errors.NOT_A_THREAD_CHANNEL;
                        MISSING_MANAGE_THREADS_AND_NOT_MEMBER: import("../types/shared.js").Errors.MISSING_MANAGE_THREADS_AND_NOT_MEMBER;
                        CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD: import("../types/shared.js").Errors.CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD;
                        HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS: import("../types/shared.js").Errors.HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS;
                        INVALID_GET_MESSAGES_LIMIT: import("../types/shared.js").Errors.INVALID_GET_MESSAGES_LIMIT;
                        DELETE_MESSAGES_MIN: import("../types/shared.js").Errors.DELETE_MESSAGES_MIN;
                        PRUNE_MIN_DAYS: import("../types/shared.js").Errors.PRUNE_MIN_DAYS;
                        INVALID_SLASH_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_DESCRIPTION;
                        INVALID_SLASH_NAME: import("../types/shared.js").Errors.INVALID_SLASH_NAME;
                        INVALID_SLASH_OPTIONS: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS;
                        INVALID_SLASH_OPTIONS_CHOICES: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICES;
                        TOO_MANY_SLASH_OPTIONS: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTIONS;
                        INVALID_SLASH_OPTION_CHOICE_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_CHOICE_NAME;
                        INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE;
                        TOO_MANY_SLASH_OPTION_CHOICES: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTION_CHOICES;
                        ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES: import("../types/shared.js").Errors.ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES;
                        INVALID_SLASH_OPTION_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_NAME;
                        INVALID_SLASH_OPTION_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_DESCRIPTION;
                        INVALID_CONTEXT_MENU_COMMAND_NAME: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_NAME;
                        INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION;
                        INVALID_WEBHOOK_NAME: import("../types/shared.js").Errors.INVALID_WEBHOOK_NAME;
                        INVALID_WEBHOOK_OPTIONS: import("../types/shared.js").Errors.INVALID_WEBHOOK_OPTIONS;
                        MISSING_ADD_REACTIONS: import("../types/shared.js").Errors.MISSING_ADD_REACTIONS;
                        MISSING_ADMINISTRATOR: import("../types/shared.js").Errors.MISSING_ADMINISTRATOR;
                        MISSING_ATTACH_FILES: import("../types/shared.js").Errors.MISSING_ATTACH_FILES;
                        MISSING_BAN_MEMBERS: import("../types/shared.js").Errors.MISSING_BAN_MEMBERS;
                        MISSING_CHANGE_NICKNAME: import("../types/shared.js").Errors.MISSING_CHANGE_NICKNAME;
                        MISSING_CONNECT: import("../types/shared.js").Errors.MISSING_CONNECT;
                        MISSING_CREATE_INSTANT_INVITE: import("../types/shared.js").Errors.MISSING_CREATE_INSTANT_INVITE;
                        MISSING_DEAFEN_MEMBERS: import("../types/shared.js").Errors.MISSING_DEAFEN_MEMBERS;
                        MISSING_EMBED_LINKS: import("../types/shared.js").Errors.MISSING_EMBED_LINKS;
                        MISSING_INTENT_GUILD_MEMBERS: import("../types/shared.js").Errors.MISSING_INTENT_GUILD_MEMBERS;
                        MISSING_KICK_MEMBERS: import("../types/shared.js").Errors.MISSING_KICK_MEMBERS;
                        MISSING_MANAGE_CHANNELS: import("../types/shared.js").Errors.MISSING_MANAGE_CHANNELS;
                        MISSING_MANAGE_EMOJIS: import("../types/shared.js").Errors.MISSING_MANAGE_EMOJIS;
                        MISSING_MANAGE_GUILD: import("../types/shared.js").Errors.MISSING_MANAGE_GUILD;
                        MISSING_MANAGE_MESSAGES: import("../types/shared.js").Errors.MISSING_MANAGE_MESSAGES;
                        MISSING_MANAGE_NICKNAMES: import("../types/shared.js").Errors.MISSING_MANAGE_NICKNAMES;
                        MISSING_MANAGE_ROLES: import("../types/shared.js").Errors.MISSING_MANAGE_ROLES;
                        MISSING_MANAGE_WEBHOOKS: import("../types/shared.js").Errors.MISSING_MANAGE_WEBHOOKS;
                        MISSING_MENTION_EVERYONE: import("../types/shared.js").Errors.MISSING_MENTION_EVERYONE;
                        MISSING_MOVE_MEMBERS: import("../types/shared.js").Errors.MISSING_MOVE_MEMBERS;
                        MISSING_MUTE_MEMBERS: import("../types/shared.js").Errors.MISSING_MUTE_MEMBERS;
                        MISSING_PRIORITY_SPEAKER: import("../types/shared.js").Errors.MISSING_PRIORITY_SPEAKER;
                        MISSING_READ_MESSAGE_HISTORY: import("../types/shared.js").Errors.MISSING_READ_MESSAGE_HISTORY;
                        MISSING_SEND_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_MESSAGES;
                        MISSING_SEND_TTS_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_TTS_MESSAGES;
                        MISSING_SPEAK: import("../types/shared.js").Errors.MISSING_SPEAK;
                        MISSING_STREAM: import("../types/shared.js").Errors.MISSING_STREAM;
                        MISSING_USE_VAD: import("../types/shared.js").Errors.MISSING_USE_VAD;
                        MISSING_USE_EXTERNAL_EMOJIS: import("../types/shared.js").Errors.MISSING_USE_EXTERNAL_EMOJIS;
                        MISSING_VIEW_AUDIT_LOG: import("../types/shared.js").Errors.MISSING_VIEW_AUDIT_LOG;
                        MISSING_VIEW_CHANNEL: import("../types/shared.js").Errors.MISSING_VIEW_CHANNEL;
                        MISSING_VIEW_GUILD_INSIGHTS: import("../types/shared.js").Errors.MISSING_VIEW_GUILD_INSIGHTS;
                        USERNAME_INVALID_CHARACTER: import("../types/shared.js").Errors.USERNAME_INVALID_CHARACTER;
                        USERNAME_INVALID_USERNAME: import("../types/shared.js").Errors.USERNAME_INVALID_USERNAME;
                        USERNAME_MAX_LENGTH: import("../types/shared.js").Errors.USERNAME_MAX_LENGTH;
                        USERNAME_MIN_LENGTH: import("../types/shared.js").Errors.USERNAME_MIN_LENGTH;
                        NONCE_TOO_LONG: import("../types/shared.js").Errors.NONCE_TOO_LONG;
                        INVITE_MAX_AGE_INVALID: import("../types/shared.js").Errors.INVITE_MAX_AGE_INVALID;
                        INVITE_MAX_USES_INVALID: import("../types/shared.js").Errors.INVITE_MAX_USES_INVALID;
                        RATE_LIMIT_RETRY_MAXED: import("../types/shared.js").Errors.RATE_LIMIT_RETRY_MAXED;
                        REQUEST_CLIENT_ERROR: import("../types/shared.js").Errors.REQUEST_CLIENT_ERROR;
                        REQUEST_SERVER_ERROR: import("../types/shared.js").Errors.REQUEST_SERVER_ERROR;
                        TOO_MANY_COMPONENTS: import("../types/shared.js").Errors.TOO_MANY_COMPONENTS;
                        TOO_MANY_ACTION_ROWS: import("../types/shared.js").Errors.TOO_MANY_ACTION_ROWS;
                        LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID: import("../types/shared.js").Errors.LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID;
                        COMPONENT_LABEL_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_LABEL_TOO_BIG;
                        COMPONENT_CUSTOM_ID_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_CUSTOM_ID_TOO_BIG;
                        BUTTON_REQUIRES_CUSTOM_ID: import("../types/shared.js").Errors.BUTTON_REQUIRES_CUSTOM_ID;
                        COMPONENT_SELECT_MUST_BE_ALONE: import("../types/shared.js").Errors.COMPONENT_SELECT_MUST_BE_ALONE;
                        COMPONENT_PLACEHOLDER_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_PLACEHOLDER_TOO_BIG;
                        COMPONENT_SELECT_MIN_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_LOW;
                        COMPONENT_SELECT_MIN_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_MANY;
                        COMPONENT_SELECT_MAX_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_LOW;
                        COMPONENT_SELECT_MAX_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_MANY;
                        COMPONENT_SELECT_OPTIONS_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_LOW;
                        COMPONENT_SELECT_OPTIONS_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_MANY;
                        SELECT_OPTION_LABEL_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_LABEL_TOO_BIG;
                        SELECT_OPTION_VALUE_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_VALUE_TOO_BIG;
                        SELECT_OPTION_TOO_MANY_DEFAULTS: import("../types/shared.js").Errors.SELECT_OPTION_TOO_MANY_DEFAULTS;
                        COMPONENT_SELECT_MIN_HIGHER_THAN_MAX: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_HIGHER_THAN_MAX;
                        CANNOT_ADD_USER_TO_ARCHIVED_THREADS: import("../types/shared.js").Errors.CANNOT_ADD_USER_TO_ARCHIVED_THREADS;
                        CANNOT_LEAVE_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_LEAVE_ARCHIVED_THREAD;
                        CANNOT_REMOVE_FROM_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_REMOVE_FROM_ARCHIVED_THREAD;
                        YOU_CAN_NOT_DM_THE_BOT_ITSELF: import("../types/shared.js").Errors.YOU_CAN_NOT_DM_THE_BOT_ITSELF;
                    };
                };
                events: import("../bot.js").EventHandlers;
                applicationId: bigint;
                token: string;
                intents: import("../types/shared.js").GatewayIntents;
                urlWSS: string;
                utils: {
                    snowflakeToBigint: typeof import("../mod.js").snowflakeToBigint;
                    bigintToSnowflake: typeof import("../mod.js").bigintToSnowflake;
                    calculateShardId: typeof import("../mod.js").calculateShardId;
                    delay: typeof import("../mod.js").delay;
                    iconHashToBigInt: typeof import("../mod.js").iconHashToBigInt;
                    iconBigintToHash: typeof import("../mod.js").iconBigintToHash;
                    validateLength: typeof import("../mod.js").validateLength;
                    urlToBase64: typeof import("../util/urlToBase64.js").urlToBase64;
                    formatImageURL: typeof import("../mod.js").formatImageURL;
                    calculateBits: typeof import("../util/permissions.js").calculateBits;
                    calculatePermissions: typeof import("../util/permissions.js").calculatePermissions;
                };
                transformers: import("../bot.js").Transformers;
                helpers: {
                    addToThread: (threadId: bigint, userId: bigint) => Promise<void>;
                    getActiveThreads: (guildId: bigint) => Promise<{
                        threads: Collection<bigint, import("./channel.js").Channel>;
                        members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                    }>;
                    getArchivedThreads: (channelId: bigint, options?: (import("../mod.js").ListArchivedThreads & {
                        type?: "private" | "public" | "privateJoinedThreads" | undefined;
                    }) | undefined) => Promise<{
                        threads: Collection<bigint, import("./channel.js").Channel>;
                        members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                        hasMore: boolean;
                    }>;
                    getThreadMember: (threadId: bigint, userId: bigint) => Promise<{
                        id: bigint | undefined;
                        userId: bigint | undefined;
                        joinTimestamp: number;
                        flags: number;
                    }>;
                    getThreadMembers: (threadId: bigint) => Promise<Collection<bigint | undefined, import("./threadMember.js").ThreadMember>>;
                    joinThread: (threadId: bigint) => Promise<void>;
                    leaveThread: (threadId: bigint) => Promise<void>;
                    removeThreadMember: (threadId: bigint, userId: bigint) => Promise<void>;
                    startThreadWithMessage: (channelId: bigint, messageId: bigint, options: import("../mod.js").StartThreadWithMessage) => Promise<import("./channel.js").Channel>;
                    startThreadWithoutMessage: (channelId: bigint, options: import("../mod.js").StartThreadWithoutMessage) => Promise<import("./channel.js").Channel>;
                    createForumPost: (channelId: bigint, options: import("../mod.js").CreateForumPostWithMessage) => Promise<import("./channel.js").Channel>;
                    createChannel: (guildId: bigint, options?: import("../mod.js").CreateGuildChannel | undefined, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                    createStageInstance: (options: import("../mod.js").CreateStageInstance) => Promise<import("./stageInstance.js").StageInstance>;
                    deleteChannel: (channelId: bigint, reason?: string | undefined) => Promise<void>;
                    deleteChannelOverwrite: (channelId: bigint, overwriteId: bigint) => Promise<void>;
                    deleteStageInstance: (channelId: bigint) => Promise<void>;
                    editChannel: (channelId: bigint, options: import("../mod.js").ModifyChannel, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                    editChannelOverwrite: (channelId: bigint, overwrite: import("../mod.js").OverwriteReadable) => Promise<void>;
                    followChannel: (sourceChannelId: bigint, targetChannelId: bigint) => Promise<bigint>;
                    getChannel: (channelId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                    getChannels: (guildId: bigint) => Promise<Collection<bigint, import("./channel.js").Channel>>;
                    getChannelWebhooks: (channelId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                    getPins: (channelId: bigint) => Promise<Message[]>;
                    getStageInstance: (channelId: bigint) => Promise<import("./stageInstance.js").StageInstance>;
                    startTyping: (channelId: bigint) => Promise<void>;
                    swapChannels: (guildId: bigint, channelPositions: import("../mod.js").ModifyGuildChannelPositions[]) => Promise<void>;
                    updateStageInstance: (channelId: bigint, data: import("../types/shared.js").AtLeastOne<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, {
                        topic: Pick<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, "topic">;
                    }>) => Promise<import("./stageInstance.js").StageInstance>;
                    updateBotVoiceState: (guildId: bigint, options: import("../mod.js").UpdateSelfVoiceState) => Promise<void>;
                    updateUserVoiceState: (guildId: bigint, options: import("../mod.js").UpdateOthersVoiceState) => Promise<void>;
                    addDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                    editDiscovery: (guildId: bigint, data: import("../mod.js").ModifyGuildDiscoveryMetadata) => Promise<{
                        guildId: bigint;
                        primaryCategoryId: number;
                        keywords: string[] | undefined;
                        emojiDiscoverabilityEnabled: boolean;
                        partnerActionedTimestamp: number | undefined;
                        partnerApplicationTimestamp: number | undefined;
                        categoryIds: number[];
                    }>;
                    getDiscovery: (guildId: bigint) => Promise<{
                        guildId: bigint;
                        primaryCategoryId: number;
                        keywords: string[] | undefined;
                        emojiDiscoverabilityEnabled: boolean;
                        partnerActionedTimestamp: number | undefined;
                        partnerApplicationTimestamp: number | undefined;
                        categoryIds: number[];
                    }>;
                    getDiscoveryCategories: () => Promise<Collection<number, import("../types/discord.js").DiscordDiscoveryCategory>>;
                    removeDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                    validDiscoveryTerm: (term: string) => Promise<boolean>;
                    createEmoji: (guildId: bigint, options: import("../mod.js").CreateGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                    deleteEmoji: (guildId: bigint, id: bigint, reason?: string | undefined) => Promise<void>;
                    editEmoji: (guildId: bigint, id: bigint, options: import("../mod.js").ModifyGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                    emojiUrl: (id: bigint, animated?: boolean | undefined) => string;
                    getEmoji: (guildId: bigint, emojiId: bigint) => Promise<import("./emoji.js").Emoji>;
                    getEmojis: (guildId: bigint) => Promise<Collection<bigint, import("./emoji.js").Emoji>>;
                    createScheduledEvent: (guildId: bigint, options: import("../mod.js").CreateScheduledEvent) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                    deleteScheduledEvent: (guildId: bigint, eventId: bigint) => Promise<void>;
                    editScheduledEvent: (guildId: bigint, eventId: bigint, options: Partial<import("../mod.js").EditScheduledEvent>) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                    getScheduledEvent: (guildId: bigint, eventId: bigint, options?: {
                        withUserCount?: boolean | undefined;
                    } | undefined) => Promise<import("./scheduledEvent.js").ScheduledEvent | undefined>;
                    getScheduledEvents: (guildId: bigint, options?: import("../mod.js").GetScheduledEvents | undefined) => Promise<Collection<bigint, import("./scheduledEvent.js").ScheduledEvent>>;
                    getScheduledEventUsers: (guildId: bigint, eventId: bigint, options?: (import("../mod.js").GetScheduledEventUsers & {
                        withMember: true;
                    }) | undefined) => Promise<Collection<bigint, {
                        user: User;
                        member: Member;
                    }>>;
                    getAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<import("./automodRule.js").AutoModerationRule>;
                    getAutomodRules: (guildId: bigint) => Promise<Collection<bigint, import("./automodRule.js").AutoModerationRule>>;
                    createAutomodRule: (guildId: bigint, options: import("../mod.js").CreateAutoModerationRuleOptions) => Promise<import("./automodRule.js").AutoModerationRule>;
                    editAutomodRule: (guildId: bigint, options: Partial<import("../mod.js").EditAutoModerationRuleOptions>) => Promise<import("./automodRule.js").AutoModerationRule>;
                    deleteAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<void>;
                    createGuild: (options: import("../mod.js").CreateGuild) => Promise<import("./guild.js").Guild>;
                    deleteGuild: (guildId: bigint) => Promise<void>;
                    editGuild: (guildId: bigint, options: import("../mod.js").ModifyGuild, shardId: number) => Promise<import("./guild.js").Guild>;
                    editWelcomeScreen: (guildId: bigint, options: import("../mod.js").ModifyGuildWelcomeScreen) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                    editWidget: (guildId: bigint, enabled: boolean, channelId?: string | null | undefined) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                    getAuditLogs: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => Promise<{
                        users: User[];
                        webhook: import("./webhook.js").Webhook[];
                        auditLogEntries: import("./auditLogEntry.js").AuditLogEntry[];
                        integrations: {
                            id: bigint | undefined;
                            name: string | undefined;
                            type: "twitch" | "youtube" | "discord" | undefined;
                            enabled: boolean | undefined;
                            syncing: boolean | undefined;
                            roleId: bigint | undefined;
                            enableEmoticons: boolean | undefined;
                            expireBehavior: import("../types/shared.js").IntegrationExpireBehaviors | undefined;
                            expireGracePeriod: number | undefined;
                            user: User | undefined;
                            account: {
                                id: bigint | undefined;
                                name: string | undefined;
                            };
                            syncedAt: number | undefined;
                            subscriberCount: number | undefined;
                            revoked: boolean | undefined;
                            application: {
                                id: bigint;
                                name: string;
                                icon: bigint | undefined;
                                description: string;
                                bot: User | undefined;
                            } | undefined;
                        }[];
                        threads: import("./channel.js").Channel[];
                        scheduledEvents: import("./scheduledEvent.js").ScheduledEvent[] | undefined;
                    }>;
                    getAvailableVoiceRegions: () => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                    getBan: (guildId: bigint, memberId: bigint) => Promise<{
                        reason: string | null;
                        user: User;
                    } | undefined>;
                    getBans: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => Promise<Collection<bigint, {
                        reason?: string | undefined;
                        user: User;
                    }>>;
                    getGuild: (guildId: bigint, options?: {
                        counts?: boolean | undefined;
                    } | undefined) => Promise<import("./guild.js").Guild | undefined>;
                    getGuildPreview: (guildId: bigint) => Promise<{
                        id: bigint;
                        name: string;
                        icon: string | undefined;
                        splash: string | undefined;
                        discoverySplash: string | undefined;
                        emojis: import("./emoji.js").Emoji[];
                        features: import("../types/shared.js").GuildFeatures[];
                        approximateMemberCount: number;
                        approximatePresenceCount: number;
                        description: string | undefined;
                        stickers: import("./sticker.js").Sticker[];
                    }>;
                    getPruneCount: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => Promise<number>;
                    getVanityUrl: (guildId: bigint) => Promise<{
                        uses: number | undefined;
                        code: string | undefined;
                    }>;
                    getVoiceRegions: (guildId: bigint) => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                    getWelcomeScreen: (guildId: bigint) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                    getWidget: (guildId: bigint) => Promise<import("./widget.js").GuildWidget>;
                    getWidgetImageURL: (guildId: bigint, options?: import("../mod.js").GetGuildWidgetImageQuery | undefined) => Promise<string>;
                    getWidgetSettings: (guildId: bigint) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                    guildBannerURL: (id: bigint, options: {
                        banner?: string | bigint | undefined;
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    }) => string | undefined;
                    guildIconURL: (id: bigint, icon: bigint | undefined, options?: {
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    } | undefined) => string | undefined;
                    guildSplashURL: (id: bigint, splash: bigint | undefined, options?: {
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    } | undefined) => string | undefined;
                    leaveGuild: (guildId: bigint) => Promise<void>;
                    deleteIntegration: (guildId: bigint, id: bigint) => Promise<void>;
                    getIntegrations: (guildId: bigint) => Promise<Collection<bigint, import("./integration.js").Integration>>;
                    createApplicationCommand: (options: import("../mod.js").CreateApplicationCommand | import("../mod.js").CreateContextApplicationCommand, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                    makeOptionsForCommand: () => import("../types/discord.js").DiscordApplicationCommandOption[];
                    isContextApplicationCommand: () => boolean;
                    deleteApplicationCommand: (id: bigint, guildId?: bigint | undefined) => Promise<void>;
                    deleteInteractionResponse: (token: string, messageId?: bigint | undefined) => Promise<void>;
                    editApplicationCommandPermissions: (guildId: bigint, commandId: bigint, bearerToken: string, options: import("../mod.js").ApplicationCommandPermissions[]) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                    editInteractionResponse: (token: string, options: import("../mod.js").EditWebhookMessage & {
                        messageId?: bigint | undefined;
                    }) => Promise<Message | undefined>;
                    getApplicationCommand: (commandId: bigint, options?: import("../mod.js").GetApplicationCommand | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                    getApplicationCommandPermission: (guildId: bigint, commandId: bigint) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                    getApplicationCommandPermissions: (guildId: bigint) => Promise<Collection<bigint, import("./applicationCommandPermission.js").ApplicationCommandPermission>>;
                    getApplicationCommands: (guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                    upsertApplicationCommand: (commandId: bigint, options: import("../types/shared.js").AtLeastOne<import("../mod.js").CreateContextApplicationCommand, {
                        type: Pick<import("../mod.js").CreateContextApplicationCommand, "type">;
                        description: Pick<import("../mod.js").CreateContextApplicationCommand, "description">;
                        name: Pick<import("../mod.js").CreateContextApplicationCommand, "name">;
                        nameLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "nameLocalizations"> | undefined;
                        descriptionLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "descriptionLocalizations"> | undefined;
                        defaultMemberPermissions?: Pick<import("../mod.js").CreateContextApplicationCommand, "defaultMemberPermissions"> | undefined;
                        dmPermission?: Pick<import("../mod.js").CreateContextApplicationCommand, "dmPermission"> | undefined;
                    }> | import("../types/shared.js").AtLeastOne<import("../mod.js").CreateApplicationCommand, {
                        name: Pick<import("../mod.js").CreateApplicationCommand, "name">;
                        nameLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "nameLocalizations"> | undefined;
                        description: Pick<import("../mod.js").CreateApplicationCommand, "description">;
                        descriptionLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "descriptionLocalizations"> | undefined;
                        type?: Pick<import("../mod.js").CreateApplicationCommand, "type"> | undefined;
                        options?: Pick<import("../mod.js").CreateApplicationCommand, "options"> | undefined;
                        defaultMemberPermissions?: Pick<import("../mod.js").CreateApplicationCommand, "defaultMemberPermissions"> | undefined;
                        dmPermission?: Pick<import("../mod.js").CreateApplicationCommand, "dmPermission"> | undefined;
                    }>, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                    upsertApplicationCommands: (options: (import("../mod.js").CreateContextApplicationCommand | import("../mod.js").UpsertApplicationCommands)[], guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                    deleteFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<void>;
                    editFollowupMessage: (interactionToken: string, messageId: bigint, options: import("../mod.js").EditWebhookMessage) => Promise<Message>;
                    getFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<Message>;
                    getOriginalInteractionResponse: (token: string) => Promise<Message>;
                    sendInteractionResponse: (id: bigint, token: string, options: import("../mod.js").InteractionResponse) => Promise<Message | undefined>;
                    verifySignature: () => {
                        isValid: boolean;
                        body: string;
                    };
                    createInvite: (channelId: bigint, options?: import("../mod.js").CreateChannelInvite | undefined) => Promise<{
                        code: string;
                        guildId: bigint | undefined;
                        channelId: bigint | undefined;
                        inviter: User | undefined;
                        targetType: import("../types/shared.js").TargetTypes | undefined;
                        targetUser: User | undefined;
                        targetApplicationId: bigint | undefined;
                        approximatePresenceCount: number | undefined;
                        approximateMemberCount: number | undefined;
                        expiresAt: number | undefined;
                    }>;
                    deleteInvite: (inviteCode: string) => Promise<void>;
                    getChannelInvites: (channelId: bigint) => Promise<Collection<string, {
                        uses: number;
                        maxUses: number;
                        maxAge: number;
                        temporary: boolean;
                        createdAt: number;
                    }>>;
                    getInvite: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => Promise<{
                        code: string;
                        guildId: bigint | undefined;
                        channelId: bigint | undefined;
                        inviter: User | undefined;
                        targetType: import("../types/shared.js").TargetTypes | undefined;
                        targetUser: User | undefined;
                        targetApplicationId: bigint | undefined;
                        approximatePresenceCount: number | undefined;
                        approximateMemberCount: number | undefined;
                        expiresAt: number | undefined;
                    }>;
                    getInvites: (guildId: bigint) => Promise<Collection<string, {
                        uses: number;
                        maxUses: number;
                        maxAge: number;
                        temporary: boolean;
                        createdAt: number;
                    }>>;
                    avatarURL: (userId: bigint, discriminator: string, options?: {
                        avatar: bigint | undefined;
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    } | undefined) => string;
                    banMember: (guildId: bigint, id: bigint, options?: import("../mod.js").CreateGuildBan | undefined) => Promise<void>;
                    editBotNickname: (guildId: bigint, options: {
                        nick: string | null;
                        reason?: string | undefined;
                    }) => Promise<string | undefined>;
                    editMember: (guildId: bigint, memberId: bigint, options: import("../mod.js").ModifyGuildMember) => Promise<Member>;
                    fetchMembers: (guildId: bigint, options?: Omit<import("../mod.js").RequestGuildMembers, "guildId"> | undefined) => Promise<void>;
                    getDmChannel: (userId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                    getMember: (guildId: bigint, id: bigint) => Promise<Member | undefined>;
                    getMembers: (guildId: bigint, options: import("../mod.js").ListGuildMembers) => Promise<Collection<bigint, Member>>;
                    kickMember: (guildId: bigint, memberId: bigint, reason?: string | undefined) => Promise<void>;
                    pruneMembers: (guildId: bigint, options: import("../mod.js").BeginGuildPrune) => Promise<number>;
                    searchMembers: (guildId: bigint, query: string, options?: Omit<import("../mod.js").SearchMembers, "query"> | undefined) => Promise<Collection<bigint, Member>>;
                    unbanMember: (guildId: bigint, id: bigint) => Promise<void>;
                    addReaction: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                    addReactions: (channelId: bigint, messageId: bigint, reactions: string[], ordered?: boolean | undefined) => Promise<void>;
                    deleteMessage: (channelId: bigint, messageId: bigint, reason?: string | undefined, delayMilliseconds?: number | undefined) => Promise<void>;
                    deleteMessages: (channelId: bigint, ids: bigint[], reason?: string | undefined) => Promise<void>;
                    editMessage: (channelId: bigint, messageId: bigint, content: import("../mod.js").EditMessage) => Promise<Message>;
                    getMessage: (channelId: bigint, id: bigint) => Promise<Message | undefined>;
                    getMessages: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => Promise<Collection<bigint, Message>>;
                    isGetMessagesAfter: () => boolean;
                    isGetMessagesBefore: () => boolean;
                    isGetMessagesAround: () => boolean;
                    isGetMessagesLimit: () => boolean;
                    getReactions: (channelId: bigint, messageId: bigint, reaction: string, options?: import("../mod.js").GetReactions | undefined) => Promise<Collection<bigint, User>>;
                    pinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                    publishMessage: (channelId: bigint, messageId: bigint) => Promise<Message>;
                    removeAllReactions: (channelId: bigint, messageId: bigint) => Promise<void>;
                    removeReaction: (channelId: bigint, messageId: bigint, reaction: string, options?: {
                        userId?: bigint | undefined;
                    } | undefined) => Promise<void>;
                    removeReactionEmoji: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                    sendMessage: (channelId: bigint, content: import("../mod.js").CreateMessage) => Promise<Message>;
                    unpinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                    editBotProfile: (options: {
                        username?: string | undefined;
                        botAvatarURL?: string | null | undefined;
                    }) => Promise<User>;
                    editBotStatus: (data: import("../mod.js").StatusUpdate) => Promise<void>;
                    editShardStatus: (shardId: number, data: import("../mod.js").StatusUpdate) => void;
                    getGatewayBot: () => Promise<import("./gatewayBot.js").GetGatewayBot>;
                    getUser: (userId: bigint) => Promise<User | undefined>;
                    nitroStickerPacks: () => Promise<import("./sticker.js").StickerPack[]>;
                    getApplicationInfo: () => Promise<import("./application.js").Application>;
                    addRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                    createRole: (guildId: bigint, options: import("../mod.js").CreateGuildRole, reason?: string | undefined) => Promise<Role>;
                    deleteRole: (guildId: bigint, id: bigint) => Promise<void>;
                    editRole: (guildId: bigint, id: bigint, options: import("../mod.js").EditGuildRole) => Promise<Role>;
                    getRoles: (guildId: bigint) => Promise<Collection<bigint, Role>>;
                    modifyRolePositions: (guildId: bigint, options: import("../mod.js").ModifyRolePositions[]) => Promise<Collection<bigint, Role>>;
                    removeRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                    createGuildFromTemplate: (templateCode: string, data: import("../mod.js").CreateGuildFromTemplate) => Promise<import("./guild.js").Guild>;
                    createGuildTemplate: (guildId: bigint, data: import("../mod.js").CreateTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                    deleteGuildTemplate: (guildId: bigint, templateCode: string) => Promise<void>;
                    editGuildTemplate: (guildId: bigint, templateCode: string, data: import("../mod.js").ModifyGuildTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                    getGuildTemplates: (guildId: bigint) => Promise<Collection<string, import("./template.js").Template>>;
                    getTemplate: (templateCode: string) => Promise<import("./template.js").Template>;
                    syncGuildTemplate: (guildId: bigint, templateCode: string) => Promise<import("../types/discord.js").DiscordTemplate>;
                    connectToVoiceChannel: (guildId: bigint, channelId: bigint, options?: import("../types/shared.js").AtLeastOne<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, {
                        selfDeaf: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfDeaf">;
                        selfMute: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfMute">;
                    }> | undefined) => Promise<void>;
                    createWebhook: (channelId: bigint, options: import("../mod.js").CreateWebhook) => Promise<import("./webhook.js").Webhook>;
                    deleteWebhook: (webhookId: bigint, reason?: string | undefined) => Promise<void>;
                    deleteWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").DeleteWebhookMessageOptions | undefined) => Promise<void>;
                    deleteWebhookWithToken: (webhookId: bigint, webhookToken: string) => Promise<void>;
                    editWebhook: (webhookId: bigint, options: import("../mod.js").ModifyWebhook) => Promise<import("./webhook.js").Webhook>;
                    editWebhookMessage: (webhookId: bigint, webhookToken: string, options: import("../mod.js").EditWebhookMessage & {
                        messageId?: bigint | undefined;
                        threadId?: bigint | undefined;
                    }) => Promise<Message>;
                    editWebhookWithToken: (webhookId: bigint, webhookToken: string, options: Omit<import("../mod.js").ModifyWebhook, "channelId">) => Promise<import("./webhook.js").Webhook>;
                    getWebhook: (webhookId: bigint) => Promise<import("./webhook.js").Webhook | undefined>;
                    getWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").GetWebhookMessageOptions | undefined) => Promise<Message>;
                    getWebhooks: (guildId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                    getWebhookWithToken: (webhookId: bigint, token: string) => Promise<import("./webhook.js").Webhook>;
                    sendWebhook: (webhookId: bigint, webhookToken: string, options: import("../mod.js").ExecuteWebhook) => Promise<Message | undefined>;
                };
                rest: {
                    version: number;
                    token: string;
                    debug: (text: string) => unknown;
                    customUrl: string;
                    maxRetryCount: number;
                    secretKey: string;
                    checkRateLimits: typeof import("../mod.js").checkRateLimits;
                    cleanupQueues: typeof import("../mod.js").cleanupQueues;
                    processQueue: typeof import("../mod.js").processQueue;
                    processRateLimitedPaths: typeof import("../mod.js").processRateLimitedPaths;
                    processRequestHeaders: typeof import("../mod.js").processRequestHeaders;
                    processRequest: typeof import("../mod.js").processRequest;
                    createRequestBody: typeof import("../mod.js").createRequestBody;
                    runMethod: typeof import("../mod.js").runMethod;
                    simplifyUrl: typeof import("../mod.js").simplifyUrl;
                    processGlobalQueue: typeof import("../mod.js").processGlobalQueue;
                    convertRestError: typeof import("../mod.js").convertRestError;
                    sendRequest: typeof import("../mod.js").sendRequest;
                    invalidRequests: number;
                    maxInvalidRequests: number;
                    invalidRequestsInterval: number;
                    invalidRequestsTimeoutId: number;
                    invalidRequestsSafetyAmount: number;
                    invalidRequestFrozenAt: number;
                    invalidRequestErrorStatuses: number[];
                    pathQueues: Map<string, {
                        isWaiting: boolean;
                        requests: {
                            request: import("../mod.js").RestRequest;
                            payload: import("../mod.js").RestPayload;
                        }[];
                    }>;
                    processingQueue: boolean;
                    processingRateLimitedPaths: boolean;
                    globallyRateLimited: boolean;
                    globalQueue: {
                        request: import("../mod.js").RestRequest;
                        payload: import("../mod.js").RestPayload;
                        basicURL: string;
                        urlToUse: string;
                    }[];
                    globalQueueProcessing: boolean;
                    rateLimitedPaths: Map<string, import("../mod.js").RestRateLimitedPath>;
                };
                gateway: {
                    stop: (code: number, reason: string) => Promise<void>;
                    gatewayBot: {
                        url: string;
                        shards: number;
                        sessionStartLimit: {
                            total: number;
                            remaining: number;
                            resetAfter: number;
                            maxConcurrency: number;
                        };
                    };
                    spawnShardDelay: number;
                    shardsPerWorker: number;
                    totalWorkers: number;
                    firstShardId: number;
                    lastShardId: number;
                    buckets: Collection<number, {
                        workers: {
                            id: number;
                            queue: number[];
                        }[];
                        leak: import("../util/bucket.js").LeakyBucket;
                    }>;
                    prepareBuckets: () => void;
                    spawnShards: () => void;
                    tellWorkerToIdentify: (workerId: number, shardId: number, bucketId: number) => Promise<void>;
                    debug: (text: import("../mod.js").GatewayDebugEvents, ...args: any[]) => unknown;
                    calculateTotalShards: () => number;
                    calculateWorkerId: (shardId: number) => number;
                    manager: {
                        shards: Collection<number, {
                            gatewayConfig: import("../mod.js").ShardGatewayConfig;
                            heart: import("../mod.js").ShardHeart;
                            id: number;
                            maxRequestsPerRateLimitTick: number;
                            previousSequenceNumber: number | null;
                            rateLimitResetInterval: number;
                            sessionId: string | undefined;
                            socket: import("ws") | undefined;
                            state: import("../mod.js").ShardState;
                            totalShards: number;
                            events: import("../mod.js").ShardEvents;
                            calculateSafeRequests: () => number;
                            close: (code: number, reason: string) => void;
                            connect: () => Promise<void>;
                            identify: () => Promise<void>;
                            isOpen: () => boolean;
                            makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                            resume: () => Promise<void>;
                            send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                            shutdown: () => Promise<void>;
                            bucket: import("../util/bucket.js").LeakyBucket;
                            handleClose: (close: CloseEvent) => Promise<void>;
                            handleMessage: (message: MessageEvent<any>) => Promise<void>;
                            requestIdentify: () => Promise<void>;
                            offlineSendQueue: ((_?: unknown) => void)[];
                            resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                            startHeartbeating: (interval: number) => void;
                            stopHeartbeating: () => void;
                        }>;
                        gatewayConfig: {
                            url?: string | undefined;
                            version?: number | undefined;
                            compress?: boolean | undefined;
                            intents?: number | undefined;
                            properties?: {
                                browser: string;
                                os: string;
                                device: string;
                            } | undefined;
                            token: string;
                        };
                        totalShards: number;
                        createShardOptions: {
                            state?: import("../mod.js").ShardState | undefined;
                            close?: {} | undefined;
                            resume?: {} | undefined;
                            connect?: {} | undefined;
                            calculateSafeRequests?: {} | undefined;
                            handleClose?: {} | undefined;
                            handleMessage?: {} | undefined;
                            identify?: {} | undefined;
                            isOpen?: {} | undefined;
                            makePresence?: {} | undefined;
                            maxRequestsPerRateLimitTick?: number | undefined;
                            previousSequenceNumber?: number | undefined;
                            rateLimitResetInterval?: number | undefined;
                            send?: {} | undefined;
                            shutdown?: {} | undefined;
                            startHeartbeating?: {} | undefined;
                            stopHeartbeating?: {} | undefined;
                            heart?: {
                                intervalId?: number | undefined;
                                lastAck?: number | undefined;
                                lastBeat?: number | undefined;
                                rtt?: number | undefined;
                                timeoutId?: number | undefined;
                                interval: number;
                                acknowledged: boolean;
                            } | undefined;
                            bucket?: {
                                max: number;
                                waiting: ((_?: unknown) => void)[];
                                refillInterval: number;
                                refillAmount: number;
                                tokens: () => number;
                                acquire: (amount: number, highPriority?: boolean | undefined) => Promise<void>;
                                nextRefill: () => number;
                                lastRefill: number;
                                allowAcquire: boolean;
                                tokensState: number;
                            } | undefined;
                            offlineSendQueue?: {
                                d?: unknown;
                                op: import("../types/shared.js").GatewayOpcodes;
                            }[] | undefined;
                            resolves?: {
                                [Symbol.toStringTag]: string;
                                [Symbol.iterator]: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                forEach: (callbackfn: (value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void, key: "READY" | "RESUMED" | "INVALID_SESSION", map: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>) => void, thisArg?: any) => void;
                                entries: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                keys: () => IterableIterator<"READY" | "RESUMED" | "INVALID_SESSION">;
                                values: () => IterableIterator<(payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                set: (key: "READY" | "RESUMED" | "INVALID_SESSION", value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void) => Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                clear: () => void;
                                size: number;
                                get: (key: "READY" | "RESUMED" | "INVALID_SESSION") => ((payload: import("../types/discord.js").DiscordGatewayPayload) => void) | undefined;
                                delete: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                                has: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                            } | undefined;
                            events: {
                                connected?: {} | undefined;
                                connecting?: {} | undefined;
                                disconnected?: {} | undefined;
                                heartbeat?: {} | undefined;
                                heartbeatAck?: {} | undefined;
                                hello?: {} | undefined;
                                invalidSession?: {} | undefined;
                                resuming?: {} | undefined;
                                resumed?: {} | undefined;
                                requestedReconnect?: {} | undefined;
                                identifying?: {} | undefined;
                                identified?: {} | undefined;
                                message: (shard: {
                                    gatewayConfig: import("../mod.js").ShardGatewayConfig;
                                    heart: import("../mod.js").ShardHeart;
                                    id: number;
                                    maxRequestsPerRateLimitTick: number;
                                    previousSequenceNumber: number | null;
                                    rateLimitResetInterval: number;
                                    sessionId: string | undefined;
                                    socket: import("ws") | undefined;
                                    state: import("../mod.js").ShardState;
                                    totalShards: number;
                                    events: import("../mod.js").ShardEvents;
                                    calculateSafeRequests: () => number;
                                    close: (code: number, reason: string) => void;
                                    connect: () => Promise<void>;
                                    identify: () => Promise<void>;
                                    isOpen: () => boolean;
                                    makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                                    resume: () => Promise<void>;
                                    send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                                    shutdown: () => Promise<void>;
                                    bucket: import("../util/bucket.js").LeakyBucket;
                                    handleClose: (close: CloseEvent) => Promise<void>;
                                    handleMessage: (message: MessageEvent<any>) => Promise<void>;
                                    requestIdentify: () => Promise<void>;
                                    offlineSendQueue: ((_?: unknown) => void)[];
                                    resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                    startHeartbeating: (interval: number) => void;
                                    stopHeartbeating: () => void;
                                }, payload: import("../types/discord.js").DiscordGatewayPayload) => unknown;
                            };
                        };
                        requestIdentify: (shardId: number) => Promise<void>;
                        identify: (shardId: number) => Promise<void>;
                        kill: (shardId: number) => Promise<void>;
                    };
                };
                handlers: {
                    READY: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_PINS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_BAN_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_BAN_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_EMOJIS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_INTEGRATIONS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBERS_CHUNK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_ROLE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_ROLE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_ROLE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_USER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_USER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTERACTION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INVITE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INVITE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_DELETE_BULK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_REMOVE_ALL: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_REMOVE_EMOJI: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    PRESENCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    TYPING_START: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    USER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    VOICE_SERVER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    VOICE_STATE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    WEBHOOKS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTEGRATION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTEGRATION_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTEGRATION_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    STAGE_INSTANCE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    STAGE_INSTANCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    STAGE_INSTANCE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_LIST_SYNC: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_MEMBERS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_LOADED_DD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                };
                activeGuildIds: Set<bigint>;
                cache: {
                    unrepliedInteractions: Set<bigint>;
                    fetchAllMembersProcessingRequests: Map<string, Function>;
                };
                enabledPlugins: Set<string>;
            } | undefined;
            intervalId?: number | undefined;
            filter: (value: Member, key: bigint, ...args: any[]) => boolean;
            interval: number;
        } | undefined;
        [Symbol.toStringTag]: string;
        [Symbol.iterator]: () => IterableIterator<[bigint, Member]>;
        every: (callback: (value: Member, key: bigint) => boolean) => boolean;
        some: (callback: (value: Member, key: bigint) => boolean) => boolean;
        forEach: (callbackfn: (value: Member, key: bigint, map: Map<bigint, Member>) => void, thisArg?: any) => void;
        map: <T_2>(callback: (value: Member, key: bigint) => T_2) => T_2[];
        filter: (callback: (value: Member, key: bigint) => boolean) => Collection<bigint, Member>;
        reduce: <T_3>(callback: (accumulator: T_3, value: Member, key: bigint) => T_3, initialValue?: T_3 | undefined) => T_3;
        find: (callback: (value: Member, key: bigint) => boolean) => Member | undefined;
        entries: () => IterableIterator<[bigint, Member]>;
        keys: () => IterableIterator<bigint>;
        values: () => IterableIterator<Member>;
        set: (key: bigint, value: Member) => Collection<bigint, Member>;
        clear: () => void;
        size: number;
        get: (key: bigint) => Member | undefined;
        startSweeper: (options: import("../util/collection.js").CollectionSweeper<bigint, Member>) => number;
        stopSweeper: () => void;
        changeSweeperInterval: (newInterval: number) => void;
        changeSweeperFilter: (newFilter: (value: Member, key: bigint, bot: Bot) => boolean) => void;
        forceSet: (key: bigint, value: Member) => Collection<bigint, Member>;
        array: () => Member[];
        first: () => Member | undefined;
        last: () => Member | undefined;
        random: () => Member | undefined;
        delete: (key: bigint) => boolean;
        has: (key: bigint) => boolean;
    } | undefined;
    channels?: {
        maxSize?: number | undefined;
        sweeper?: {
            bot?: {
                handleDiscordPayload?: {} | undefined;
                botGatewayData?: {
                    url: string;
                    shards: number;
                    sessionStartLimit: {
                        total: number;
                        remaining: number;
                        resetAfter: number;
                        maxConcurrency: number;
                    };
                } | undefined;
                id: bigint;
                constants: {
                    DISCORDENO_VERSION: string;
                    USER_AGENT: string;
                    BASE_URL: string;
                    CDN_URL: string;
                    routes: {
                        GATEWAY_BOT: () => string;
                        AUTOMOD_RULES: (guildId: bigint) => string;
                        AUTOMOD_RULE: (guildId: bigint, ruleId: bigint) => string;
                        CHANNEL: (channelId: bigint) => string;
                        CHANNEL_MESSAGE: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_MESSAGES: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => string;
                        CHANNEL_PIN: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_PINS: (channelId: bigint) => string;
                        CHANNEL_BULK_DELETE: (channelId: bigint) => string;
                        CHANNEL_INVITES: (channelId: bigint) => string;
                        CHANNEL_WEBHOOKS: (channelId: bigint) => string;
                        CHANNEL_MESSAGE_REACTION_ME: (channelId: bigint, messageId: bigint, emoji: string) => string;
                        CHANNEL_MESSAGE_REACTION_USER: (channelId: bigint, messageId: bigint, emoji: string, userId: bigint) => string;
                        CHANNEL_MESSAGE_REACTIONS: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_MESSAGE_REACTION: (channelId: bigint, messageId: bigint, emoji: string, options?: import("../mod.js").GetReactions | undefined) => string;
                        CHANNEL_FOLLOW: (channelId: bigint) => string;
                        CHANNEL_MESSAGE_CROSSPOST: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_OVERWRITE: (channelId: bigint, overwriteId: bigint) => string;
                        CHANNEL_TYPING: (channelId: bigint) => string;
                        THREAD_START_PUBLIC: (channelId: bigint, messageId: bigint) => string;
                        THREAD_START_PRIVATE: (channelId: bigint) => string;
                        THREAD_ACTIVE: (guildId: bigint) => string;
                        THREAD_MEMBERS: (channelId: bigint) => string;
                        THREAD_ME: (channelId: bigint) => string;
                        THREAD_USER: (channelId: bigint, userId: bigint) => string;
                        THREAD_ARCHIVED: (channelId: bigint) => string;
                        THREAD_ARCHIVED_PUBLIC: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                        THREAD_ARCHIVED_PRIVATE: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                        THREAD_ARCHIVED_PRIVATE_JOINED: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                        FORUM_START: (channelId: bigint) => string;
                        GUILD: (guildId: bigint, withCounts?: boolean | undefined) => string;
                        GUILDS: () => string;
                        GUILD_AUDIT_LOGS: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => string;
                        GUILD_BAN: (guildId: bigint, userId: bigint) => string;
                        GUILD_BANS: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => string;
                        GUILD_BANNER: (guildId: bigint, icon: string) => string;
                        GUILD_CHANNELS: (guildId: bigint) => string;
                        GUILD_WIDGET: (guildId: bigint) => string;
                        GUILD_WIDGET_JSON: (guildId: bigint) => string;
                        GUILD_WIDGET_IMAGE: (guildId: bigint, style?: "shield" | "banner1" | "banner2" | "banner3" | "banner4" | undefined) => string;
                        GUILD_EMOJI: (guildId: bigint, emojiId: bigint) => string;
                        GUILD_EMOJIS: (guildId: bigint) => string;
                        GUILD_ICON: (guildId: bigint, icon: string) => string;
                        GUILD_INTEGRATION: (guildId: bigint, integrationId: bigint) => string;
                        GUILD_INTEGRATION_SYNC: (guildId: bigint, integrationId: bigint) => string;
                        GUILD_INTEGRATIONS: (guildId: bigint) => string;
                        GUILD_INVITES: (guildId: bigint) => string;
                        GUILD_LEAVE: (guildId: bigint) => string;
                        GUILD_MEMBER: (guildId: bigint, userId: bigint) => string;
                        GUILD_MEMBERS: (guildId: bigint, options?: import("../mod.js").ListGuildMembers | undefined) => string;
                        GUILD_MEMBER_ROLE: (guildId: bigint, memberId: bigint, roleId: bigint) => string;
                        GUILD_MEMBERS_SEARCH: (guildId: bigint, query: string, options?: {
                            limit?: number | undefined;
                        } | undefined) => string;
                        GUILD_PRUNE: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => string;
                        GUILD_REGIONS: (guildId: bigint) => string;
                        GUILD_ROLE: (guildId: bigint, roleId: bigint) => string;
                        GUILD_ROLES: (guildId: bigint) => string;
                        GUILD_SPLASH: (guildId: bigint, icon: string) => string;
                        GUILD_VANITY_URL: (guildId: bigint) => string;
                        GUILD_WEBHOOKS: (guildId: bigint) => string;
                        TEMPLATE: (code: string) => string;
                        GUILD_TEMPLATE: (guildId: bigint, code: string) => string;
                        GUILD_TEMPLATES: (guildId: bigint) => string;
                        GUILD_PREVIEW: (guildId: bigint) => string;
                        UPDATE_VOICE_STATE: (guildId: bigint, userId?: bigint | undefined) => string;
                        GUILD_WELCOME_SCREEN: (guildId: bigint) => string;
                        GUILD_SCHEDULED_EVENTS: (guildId: bigint, withUserCount?: boolean | undefined) => string;
                        GUILD_SCHEDULED_EVENT: (guildId: bigint, eventId: bigint, withUserCount?: boolean | undefined) => string;
                        GUILD_SCHEDULED_EVENT_USERS: (guildId: bigint, eventId: bigint, options?: import("../mod.js").GetScheduledEventUsers | undefined) => string;
                        VOICE_REGIONS: () => string;
                        INVITE: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => string;
                        WEBHOOK: (webhookId: bigint, token: string, options?: {
                            wait?: boolean | undefined;
                            threadId?: bigint | undefined;
                        } | undefined) => string;
                        WEBHOOK_ID: (webhookId: bigint) => string;
                        WEBHOOK_MESSAGE: (webhookId: bigint, token: string, messageId: bigint, options?: {
                            threadId?: bigint | undefined;
                        } | undefined) => string;
                        WEBHOOK_MESSAGE_ORIGINAL: (webhookId: bigint, token: string, options?: {
                            threadId?: bigint | undefined;
                        } | undefined) => string;
                        WEBHOOK_SLACK: (webhookId: bigint, token: string) => string;
                        WEBHOOK_GITHUB: (webhookId: bigint, token: string) => string;
                        COMMANDS: (applicationId: bigint) => string;
                        COMMANDS_GUILD: (applicationId: bigint, guildId: bigint) => string;
                        COMMANDS_PERMISSIONS: (applicationId: bigint, guildId: bigint) => string;
                        COMMANDS_PERMISSION: (applicationId: bigint, guildId: bigint, commandId: bigint) => string;
                        COMMANDS_ID: (applicationId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                        COMMANDS_GUILD_ID: (applicationId: bigint, guildId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                        INTERACTION_ID_TOKEN: (interactionId: bigint, token: string) => string;
                        INTERACTION_ORIGINAL_ID_TOKEN: (interactionId: bigint, token: string) => string;
                        INTERACTION_ID_TOKEN_MESSAGE_ID: (applicationId: bigint, token: string, messageId: bigint) => string;
                        USER: (userId: bigint) => string;
                        USER_BOT: () => string;
                        USER_GUILDS: () => string;
                        USER_AVATAR: (userId: bigint, icon: string) => string;
                        USER_DEFAULT_AVATAR: (icon: number) => string;
                        USER_DM: () => string;
                        USER_CONNECTIONS: () => string;
                        USER_NICK: (guildId: bigint) => string;
                        DISCOVERY_CATEGORIES: () => string;
                        DISCOVERY_VALID_TERM: (term: string) => string;
                        DISCOVERY_METADATA: (guildId: bigint) => string;
                        DISCOVERY_SUBCATEGORY: (guildId: bigint, categoryId: number) => string;
                        OAUTH2_APPLICATION: () => string;
                        STAGE_INSTANCES: () => string;
                        STAGE_INSTANCE: (channelId: bigint) => string;
                        NITRO_STICKER_PACKS: () => string;
                    };
                    regexes: {
                        SLASH_COMMANDS_NAME_REGEX: RegExp;
                        CONTEXT_MENU_COMMANDS_NAME_REGEX: RegExp;
                        CHANNEL_MENTION_REGEX: RegExp;
                        DISCORD_SNOWFLAKE_REGEX: RegExp;
                    };
                    Errors: {
                        REQUEST_UNKNOWN_ERROR: import("../types/shared.js").Errors.REQUEST_UNKNOWN_ERROR;
                        GUILD_NOT_FOUND: import("../types/shared.js").Errors.GUILD_NOT_FOUND;
                        RULES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.RULES_CHANNEL_CANNOT_BE_DELETED;
                        UPDATES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.UPDATES_CHANNEL_CANNOT_BE_DELETED;
                        NICKNAMES_MAX_LENGTH: import("../types/shared.js").Errors.NICKNAMES_MAX_LENGTH;
                        MEMBER_NOT_IN_VOICE_CHANNEL: import("../types/shared.js").Errors.MEMBER_NOT_IN_VOICE_CHANNEL;
                        MESSAGE_MAX_LENGTH: import("../types/shared.js").Errors.MESSAGE_MAX_LENGTH;
                        BOTS_HIGHEST_ROLE_TOO_LOW: import("../types/shared.js").Errors.BOTS_HIGHEST_ROLE_TOO_LOW;
                        CHANNEL_NOT_FOUND: import("../types/shared.js").Errors.CHANNEL_NOT_FOUND;
                        CHANNEL_NOT_IN_GUILD: import("../types/shared.js").Errors.CHANNEL_NOT_IN_GUILD;
                        CHANNEL_NOT_TEXT_BASED: import("../types/shared.js").Errors.CHANNEL_NOT_TEXT_BASED;
                        CHANNEL_NOT_STAGE_VOICE: import("../types/shared.js").Errors.CHANNEL_NOT_STAGE_VOICE;
                        INVALID_TOPIC_LENGTH: import("../types/shared.js").Errors.INVALID_TOPIC_LENGTH;
                        GUILD_NOT_DISCOVERABLE: import("../types/shared.js").Errors.GUILD_NOT_DISCOVERABLE;
                        GUILD_WIDGET_NOT_ENABLED: import("../types/shared.js").Errors.GUILD_WIDGET_NOT_ENABLED;
                        MEMBER_NOT_FOUND: import("../types/shared.js").Errors.MEMBER_NOT_FOUND;
                        MEMBER_SEARCH_LIMIT_TOO_HIGH: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_HIGH;
                        MEMBER_SEARCH_LIMIT_TOO_LOW: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_LOW;
                        PRUNE_MAX_DAYS: import("../types/shared.js").Errors.PRUNE_MAX_DAYS;
                        ROLE_NOT_FOUND: import("../types/shared.js").Errors.ROLE_NOT_FOUND;
                        INVALID_THREAD_PARENT_CHANNEL_TYPE: import("../types/shared.js").Errors.INVALID_THREAD_PARENT_CHANNEL_TYPE;
                        GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS: import("../types/shared.js").Errors.GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS;
                        NOT_A_THREAD_CHANNEL: import("../types/shared.js").Errors.NOT_A_THREAD_CHANNEL;
                        MISSING_MANAGE_THREADS_AND_NOT_MEMBER: import("../types/shared.js").Errors.MISSING_MANAGE_THREADS_AND_NOT_MEMBER;
                        CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD: import("../types/shared.js").Errors.CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD;
                        HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS: import("../types/shared.js").Errors.HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS;
                        INVALID_GET_MESSAGES_LIMIT: import("../types/shared.js").Errors.INVALID_GET_MESSAGES_LIMIT;
                        DELETE_MESSAGES_MIN: import("../types/shared.js").Errors.DELETE_MESSAGES_MIN;
                        PRUNE_MIN_DAYS: import("../types/shared.js").Errors.PRUNE_MIN_DAYS;
                        INVALID_SLASH_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_DESCRIPTION;
                        INVALID_SLASH_NAME: import("../types/shared.js").Errors.INVALID_SLASH_NAME;
                        INVALID_SLASH_OPTIONS: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS;
                        INVALID_SLASH_OPTIONS_CHOICES: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICES;
                        TOO_MANY_SLASH_OPTIONS: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTIONS;
                        INVALID_SLASH_OPTION_CHOICE_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_CHOICE_NAME;
                        INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE;
                        TOO_MANY_SLASH_OPTION_CHOICES: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTION_CHOICES;
                        ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES: import("../types/shared.js").Errors.ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES;
                        INVALID_SLASH_OPTION_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_NAME;
                        INVALID_SLASH_OPTION_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_DESCRIPTION;
                        INVALID_CONTEXT_MENU_COMMAND_NAME: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_NAME;
                        INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION;
                        INVALID_WEBHOOK_NAME: import("../types/shared.js").Errors.INVALID_WEBHOOK_NAME;
                        INVALID_WEBHOOK_OPTIONS: import("../types/shared.js").Errors.INVALID_WEBHOOK_OPTIONS;
                        MISSING_ADD_REACTIONS: import("../types/shared.js").Errors.MISSING_ADD_REACTIONS;
                        MISSING_ADMINISTRATOR: import("../types/shared.js").Errors.MISSING_ADMINISTRATOR;
                        MISSING_ATTACH_FILES: import("../types/shared.js").Errors.MISSING_ATTACH_FILES;
                        MISSING_BAN_MEMBERS: import("../types/shared.js").Errors.MISSING_BAN_MEMBERS;
                        MISSING_CHANGE_NICKNAME: import("../types/shared.js").Errors.MISSING_CHANGE_NICKNAME;
                        MISSING_CONNECT: import("../types/shared.js").Errors.MISSING_CONNECT;
                        MISSING_CREATE_INSTANT_INVITE: import("../types/shared.js").Errors.MISSING_CREATE_INSTANT_INVITE;
                        MISSING_DEAFEN_MEMBERS: import("../types/shared.js").Errors.MISSING_DEAFEN_MEMBERS;
                        MISSING_EMBED_LINKS: import("../types/shared.js").Errors.MISSING_EMBED_LINKS;
                        MISSING_INTENT_GUILD_MEMBERS: import("../types/shared.js").Errors.MISSING_INTENT_GUILD_MEMBERS;
                        MISSING_KICK_MEMBERS: import("../types/shared.js").Errors.MISSING_KICK_MEMBERS;
                        MISSING_MANAGE_CHANNELS: import("../types/shared.js").Errors.MISSING_MANAGE_CHANNELS;
                        MISSING_MANAGE_EMOJIS: import("../types/shared.js").Errors.MISSING_MANAGE_EMOJIS;
                        MISSING_MANAGE_GUILD: import("../types/shared.js").Errors.MISSING_MANAGE_GUILD;
                        MISSING_MANAGE_MESSAGES: import("../types/shared.js").Errors.MISSING_MANAGE_MESSAGES;
                        MISSING_MANAGE_NICKNAMES: import("../types/shared.js").Errors.MISSING_MANAGE_NICKNAMES;
                        MISSING_MANAGE_ROLES: import("../types/shared.js").Errors.MISSING_MANAGE_ROLES;
                        MISSING_MANAGE_WEBHOOKS: import("../types/shared.js").Errors.MISSING_MANAGE_WEBHOOKS;
                        MISSING_MENTION_EVERYONE: import("../types/shared.js").Errors.MISSING_MENTION_EVERYONE;
                        MISSING_MOVE_MEMBERS: import("../types/shared.js").Errors.MISSING_MOVE_MEMBERS;
                        MISSING_MUTE_MEMBERS: import("../types/shared.js").Errors.MISSING_MUTE_MEMBERS;
                        MISSING_PRIORITY_SPEAKER: import("../types/shared.js").Errors.MISSING_PRIORITY_SPEAKER;
                        MISSING_READ_MESSAGE_HISTORY: import("../types/shared.js").Errors.MISSING_READ_MESSAGE_HISTORY;
                        MISSING_SEND_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_MESSAGES;
                        MISSING_SEND_TTS_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_TTS_MESSAGES;
                        MISSING_SPEAK: import("../types/shared.js").Errors.MISSING_SPEAK;
                        MISSING_STREAM: import("../types/shared.js").Errors.MISSING_STREAM;
                        MISSING_USE_VAD: import("../types/shared.js").Errors.MISSING_USE_VAD;
                        MISSING_USE_EXTERNAL_EMOJIS: import("../types/shared.js").Errors.MISSING_USE_EXTERNAL_EMOJIS;
                        MISSING_VIEW_AUDIT_LOG: import("../types/shared.js").Errors.MISSING_VIEW_AUDIT_LOG;
                        MISSING_VIEW_CHANNEL: import("../types/shared.js").Errors.MISSING_VIEW_CHANNEL;
                        MISSING_VIEW_GUILD_INSIGHTS: import("../types/shared.js").Errors.MISSING_VIEW_GUILD_INSIGHTS;
                        USERNAME_INVALID_CHARACTER: import("../types/shared.js").Errors.USERNAME_INVALID_CHARACTER;
                        USERNAME_INVALID_USERNAME: import("../types/shared.js").Errors.USERNAME_INVALID_USERNAME;
                        USERNAME_MAX_LENGTH: import("../types/shared.js").Errors.USERNAME_MAX_LENGTH;
                        USERNAME_MIN_LENGTH: import("../types/shared.js").Errors.USERNAME_MIN_LENGTH;
                        NONCE_TOO_LONG: import("../types/shared.js").Errors.NONCE_TOO_LONG;
                        INVITE_MAX_AGE_INVALID: import("../types/shared.js").Errors.INVITE_MAX_AGE_INVALID;
                        INVITE_MAX_USES_INVALID: import("../types/shared.js").Errors.INVITE_MAX_USES_INVALID;
                        RATE_LIMIT_RETRY_MAXED: import("../types/shared.js").Errors.RATE_LIMIT_RETRY_MAXED;
                        REQUEST_CLIENT_ERROR: import("../types/shared.js").Errors.REQUEST_CLIENT_ERROR;
                        REQUEST_SERVER_ERROR: import("../types/shared.js").Errors.REQUEST_SERVER_ERROR;
                        TOO_MANY_COMPONENTS: import("../types/shared.js").Errors.TOO_MANY_COMPONENTS;
                        TOO_MANY_ACTION_ROWS: import("../types/shared.js").Errors.TOO_MANY_ACTION_ROWS;
                        LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID: import("../types/shared.js").Errors.LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID;
                        COMPONENT_LABEL_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_LABEL_TOO_BIG;
                        COMPONENT_CUSTOM_ID_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_CUSTOM_ID_TOO_BIG;
                        BUTTON_REQUIRES_CUSTOM_ID: import("../types/shared.js").Errors.BUTTON_REQUIRES_CUSTOM_ID;
                        COMPONENT_SELECT_MUST_BE_ALONE: import("../types/shared.js").Errors.COMPONENT_SELECT_MUST_BE_ALONE;
                        COMPONENT_PLACEHOLDER_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_PLACEHOLDER_TOO_BIG;
                        COMPONENT_SELECT_MIN_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_LOW;
                        COMPONENT_SELECT_MIN_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_MANY;
                        COMPONENT_SELECT_MAX_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_LOW;
                        COMPONENT_SELECT_MAX_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_MANY;
                        COMPONENT_SELECT_OPTIONS_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_LOW;
                        COMPONENT_SELECT_OPTIONS_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_MANY;
                        SELECT_OPTION_LABEL_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_LABEL_TOO_BIG;
                        SELECT_OPTION_VALUE_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_VALUE_TOO_BIG;
                        SELECT_OPTION_TOO_MANY_DEFAULTS: import("../types/shared.js").Errors.SELECT_OPTION_TOO_MANY_DEFAULTS;
                        COMPONENT_SELECT_MIN_HIGHER_THAN_MAX: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_HIGHER_THAN_MAX;
                        CANNOT_ADD_USER_TO_ARCHIVED_THREADS: import("../types/shared.js").Errors.CANNOT_ADD_USER_TO_ARCHIVED_THREADS;
                        CANNOT_LEAVE_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_LEAVE_ARCHIVED_THREAD;
                        CANNOT_REMOVE_FROM_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_REMOVE_FROM_ARCHIVED_THREAD;
                        YOU_CAN_NOT_DM_THE_BOT_ITSELF: import("../types/shared.js").Errors.YOU_CAN_NOT_DM_THE_BOT_ITSELF;
                    };
                };
                events: import("../bot.js").EventHandlers;
                applicationId: bigint;
                token: string;
                intents: import("../types/shared.js").GatewayIntents;
                urlWSS: string;
                utils: {
                    snowflakeToBigint: typeof import("../mod.js").snowflakeToBigint;
                    bigintToSnowflake: typeof import("../mod.js").bigintToSnowflake;
                    calculateShardId: typeof import("../mod.js").calculateShardId;
                    delay: typeof import("../mod.js").delay;
                    iconHashToBigInt: typeof import("../mod.js").iconHashToBigInt;
                    iconBigintToHash: typeof import("../mod.js").iconBigintToHash;
                    validateLength: typeof import("../mod.js").validateLength;
                    urlToBase64: typeof import("../util/urlToBase64.js").urlToBase64;
                    formatImageURL: typeof import("../mod.js").formatImageURL;
                    calculateBits: typeof import("../util/permissions.js").calculateBits;
                    calculatePermissions: typeof import("../util/permissions.js").calculatePermissions;
                };
                transformers: import("../bot.js").Transformers;
                helpers: {
                    addToThread: (threadId: bigint, userId: bigint) => Promise<void>;
                    getActiveThreads: (guildId: bigint) => Promise<{
                        threads: Collection<bigint, import("./channel.js").Channel>;
                        members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                    }>;
                    getArchivedThreads: (channelId: bigint, options?: (import("../mod.js").ListArchivedThreads & {
                        type?: "private" | "public" | "privateJoinedThreads" | undefined;
                    }) | undefined) => Promise<{
                        threads: Collection<bigint, import("./channel.js").Channel>;
                        members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                        hasMore: boolean;
                    }>;
                    getThreadMember: (threadId: bigint, userId: bigint) => Promise<{
                        id: bigint | undefined;
                        userId: bigint | undefined;
                        joinTimestamp: number;
                        flags: number;
                    }>;
                    getThreadMembers: (threadId: bigint) => Promise<Collection<bigint | undefined, import("./threadMember.js").ThreadMember>>;
                    joinThread: (threadId: bigint) => Promise<void>;
                    leaveThread: (threadId: bigint) => Promise<void>;
                    removeThreadMember: (threadId: bigint, userId: bigint) => Promise<void>;
                    startThreadWithMessage: (channelId: bigint, messageId: bigint, options: import("../mod.js").StartThreadWithMessage) => Promise<import("./channel.js").Channel>;
                    startThreadWithoutMessage: (channelId: bigint, options: import("../mod.js").StartThreadWithoutMessage) => Promise<import("./channel.js").Channel>;
                    createForumPost: (channelId: bigint, options: import("../mod.js").CreateForumPostWithMessage) => Promise<import("./channel.js").Channel>;
                    createChannel: (guildId: bigint, options?: import("../mod.js").CreateGuildChannel | undefined, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                    createStageInstance: (options: import("../mod.js").CreateStageInstance) => Promise<import("./stageInstance.js").StageInstance>;
                    deleteChannel: (channelId: bigint, reason?: string | undefined) => Promise<void>;
                    deleteChannelOverwrite: (channelId: bigint, overwriteId: bigint) => Promise<void>;
                    deleteStageInstance: (channelId: bigint) => Promise<void>;
                    editChannel: (channelId: bigint, options: import("../mod.js").ModifyChannel, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                    editChannelOverwrite: (channelId: bigint, overwrite: import("../mod.js").OverwriteReadable) => Promise<void>;
                    followChannel: (sourceChannelId: bigint, targetChannelId: bigint) => Promise<bigint>;
                    getChannel: (channelId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                    getChannels: (guildId: bigint) => Promise<Collection<bigint, import("./channel.js").Channel>>;
                    getChannelWebhooks: (channelId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                    getPins: (channelId: bigint) => Promise<Message[]>;
                    getStageInstance: (channelId: bigint) => Promise<import("./stageInstance.js").StageInstance>;
                    startTyping: (channelId: bigint) => Promise<void>;
                    swapChannels: (guildId: bigint, channelPositions: import("../mod.js").ModifyGuildChannelPositions[]) => Promise<void>;
                    updateStageInstance: (channelId: bigint, data: import("../types/shared.js").AtLeastOne<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, {
                        topic: Pick<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, "topic">;
                    }>) => Promise<import("./stageInstance.js").StageInstance>;
                    updateBotVoiceState: (guildId: bigint, options: import("../mod.js").UpdateSelfVoiceState) => Promise<void>;
                    updateUserVoiceState: (guildId: bigint, options: import("../mod.js").UpdateOthersVoiceState) => Promise<void>;
                    addDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                    editDiscovery: (guildId: bigint, data: import("../mod.js").ModifyGuildDiscoveryMetadata) => Promise<{
                        guildId: bigint;
                        primaryCategoryId: number;
                        keywords: string[] | undefined;
                        emojiDiscoverabilityEnabled: boolean;
                        partnerActionedTimestamp: number | undefined;
                        partnerApplicationTimestamp: number | undefined;
                        categoryIds: number[];
                    }>;
                    getDiscovery: (guildId: bigint) => Promise<{
                        guildId: bigint;
                        primaryCategoryId: number;
                        keywords: string[] | undefined;
                        emojiDiscoverabilityEnabled: boolean;
                        partnerActionedTimestamp: number | undefined;
                        partnerApplicationTimestamp: number | undefined;
                        categoryIds: number[];
                    }>;
                    getDiscoveryCategories: () => Promise<Collection<number, import("../types/discord.js").DiscordDiscoveryCategory>>;
                    removeDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                    validDiscoveryTerm: (term: string) => Promise<boolean>;
                    createEmoji: (guildId: bigint, options: import("../mod.js").CreateGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                    deleteEmoji: (guildId: bigint, id: bigint, reason?: string | undefined) => Promise<void>;
                    editEmoji: (guildId: bigint, id: bigint, options: import("../mod.js").ModifyGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                    emojiUrl: (id: bigint, animated?: boolean | undefined) => string;
                    getEmoji: (guildId: bigint, emojiId: bigint) => Promise<import("./emoji.js").Emoji>;
                    getEmojis: (guildId: bigint) => Promise<Collection<bigint, import("./emoji.js").Emoji>>;
                    createScheduledEvent: (guildId: bigint, options: import("../mod.js").CreateScheduledEvent) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                    deleteScheduledEvent: (guildId: bigint, eventId: bigint) => Promise<void>;
                    editScheduledEvent: (guildId: bigint, eventId: bigint, options: Partial<import("../mod.js").EditScheduledEvent>) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                    getScheduledEvent: (guildId: bigint, eventId: bigint, options?: {
                        withUserCount?: boolean | undefined;
                    } | undefined) => Promise<import("./scheduledEvent.js").ScheduledEvent | undefined>;
                    getScheduledEvents: (guildId: bigint, options?: import("../mod.js").GetScheduledEvents | undefined) => Promise<Collection<bigint, import("./scheduledEvent.js").ScheduledEvent>>;
                    getScheduledEventUsers: (guildId: bigint, eventId: bigint, options?: (import("../mod.js").GetScheduledEventUsers & {
                        withMember: true;
                    }) | undefined) => Promise<Collection<bigint, {
                        user: User;
                        member: Member;
                    }>>;
                    getAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<import("./automodRule.js").AutoModerationRule>;
                    getAutomodRules: (guildId: bigint) => Promise<Collection<bigint, import("./automodRule.js").AutoModerationRule>>;
                    createAutomodRule: (guildId: bigint, options: import("../mod.js").CreateAutoModerationRuleOptions) => Promise<import("./automodRule.js").AutoModerationRule>;
                    editAutomodRule: (guildId: bigint, options: Partial<import("../mod.js").EditAutoModerationRuleOptions>) => Promise<import("./automodRule.js").AutoModerationRule>;
                    deleteAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<void>;
                    createGuild: (options: import("../mod.js").CreateGuild) => Promise<import("./guild.js").Guild>;
                    deleteGuild: (guildId: bigint) => Promise<void>;
                    editGuild: (guildId: bigint, options: import("../mod.js").ModifyGuild, shardId: number) => Promise<import("./guild.js").Guild>;
                    editWelcomeScreen: (guildId: bigint, options: import("../mod.js").ModifyGuildWelcomeScreen) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                    editWidget: (guildId: bigint, enabled: boolean, channelId?: string | null | undefined) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                    getAuditLogs: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => Promise<{
                        users: User[];
                        webhook: import("./webhook.js").Webhook[];
                        auditLogEntries: import("./auditLogEntry.js").AuditLogEntry[];
                        integrations: {
                            id: bigint | undefined;
                            name: string | undefined;
                            type: "twitch" | "youtube" | "discord" | undefined;
                            enabled: boolean | undefined;
                            syncing: boolean | undefined;
                            roleId: bigint | undefined;
                            enableEmoticons: boolean | undefined;
                            expireBehavior: import("../types/shared.js").IntegrationExpireBehaviors | undefined;
                            expireGracePeriod: number | undefined;
                            user: User | undefined;
                            account: {
                                id: bigint | undefined;
                                name: string | undefined;
                            };
                            syncedAt: number | undefined;
                            subscriberCount: number | undefined;
                            revoked: boolean | undefined;
                            application: {
                                id: bigint;
                                name: string;
                                icon: bigint | undefined;
                                description: string;
                                bot: User | undefined;
                            } | undefined;
                        }[];
                        threads: import("./channel.js").Channel[];
                        scheduledEvents: import("./scheduledEvent.js").ScheduledEvent[] | undefined;
                    }>;
                    getAvailableVoiceRegions: () => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                    getBan: (guildId: bigint, memberId: bigint) => Promise<{
                        reason: string | null;
                        user: User;
                    } | undefined>;
                    getBans: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => Promise<Collection<bigint, {
                        reason?: string | undefined;
                        user: User;
                    }>>;
                    getGuild: (guildId: bigint, options?: {
                        counts?: boolean | undefined;
                    } | undefined) => Promise<import("./guild.js").Guild | undefined>;
                    getGuildPreview: (guildId: bigint) => Promise<{
                        id: bigint;
                        name: string;
                        icon: string | undefined;
                        splash: string | undefined;
                        discoverySplash: string | undefined;
                        emojis: import("./emoji.js").Emoji[];
                        features: import("../types/shared.js").GuildFeatures[];
                        approximateMemberCount: number;
                        approximatePresenceCount: number;
                        description: string | undefined;
                        stickers: import("./sticker.js").Sticker[];
                    }>;
                    getPruneCount: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => Promise<number>;
                    getVanityUrl: (guildId: bigint) => Promise<{
                        uses: number | undefined;
                        code: string | undefined;
                    }>;
                    getVoiceRegions: (guildId: bigint) => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                    getWelcomeScreen: (guildId: bigint) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                    getWidget: (guildId: bigint) => Promise<import("./widget.js").GuildWidget>;
                    getWidgetImageURL: (guildId: bigint, options?: import("../mod.js").GetGuildWidgetImageQuery | undefined) => Promise<string>;
                    getWidgetSettings: (guildId: bigint) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                    guildBannerURL: (id: bigint, options: {
                        banner?: string | bigint | undefined;
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    }) => string | undefined;
                    guildIconURL: (id: bigint, icon: bigint | undefined, options?: {
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    } | undefined) => string | undefined;
                    guildSplashURL: (id: bigint, splash: bigint | undefined, options?: {
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    } | undefined) => string | undefined;
                    leaveGuild: (guildId: bigint) => Promise<void>;
                    deleteIntegration: (guildId: bigint, id: bigint) => Promise<void>;
                    getIntegrations: (guildId: bigint) => Promise<Collection<bigint, import("./integration.js").Integration>>;
                    createApplicationCommand: (options: import("../mod.js").CreateApplicationCommand | import("../mod.js").CreateContextApplicationCommand, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                    makeOptionsForCommand: () => import("../types/discord.js").DiscordApplicationCommandOption[];
                    isContextApplicationCommand: () => boolean;
                    deleteApplicationCommand: (id: bigint, guildId?: bigint | undefined) => Promise<void>;
                    deleteInteractionResponse: (token: string, messageId?: bigint | undefined) => Promise<void>;
                    editApplicationCommandPermissions: (guildId: bigint, commandId: bigint, bearerToken: string, options: import("../mod.js").ApplicationCommandPermissions[]) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                    editInteractionResponse: (token: string, options: import("../mod.js").EditWebhookMessage & {
                        messageId?: bigint | undefined;
                    }) => Promise<Message | undefined>;
                    getApplicationCommand: (commandId: bigint, options?: import("../mod.js").GetApplicationCommand | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                    getApplicationCommandPermission: (guildId: bigint, commandId: bigint) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                    getApplicationCommandPermissions: (guildId: bigint) => Promise<Collection<bigint, import("./applicationCommandPermission.js").ApplicationCommandPermission>>;
                    getApplicationCommands: (guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                    upsertApplicationCommand: (commandId: bigint, options: import("../types/shared.js").AtLeastOne<import("../mod.js").CreateContextApplicationCommand, {
                        type: Pick<import("../mod.js").CreateContextApplicationCommand, "type">;
                        description: Pick<import("../mod.js").CreateContextApplicationCommand, "description">;
                        name: Pick<import("../mod.js").CreateContextApplicationCommand, "name">;
                        nameLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "nameLocalizations"> | undefined;
                        descriptionLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "descriptionLocalizations"> | undefined;
                        defaultMemberPermissions?: Pick<import("../mod.js").CreateContextApplicationCommand, "defaultMemberPermissions"> | undefined;
                        dmPermission?: Pick<import("../mod.js").CreateContextApplicationCommand, "dmPermission"> | undefined;
                    }> | import("../types/shared.js").AtLeastOne<import("../mod.js").CreateApplicationCommand, {
                        name: Pick<import("../mod.js").CreateApplicationCommand, "name">;
                        nameLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "nameLocalizations"> | undefined;
                        description: Pick<import("../mod.js").CreateApplicationCommand, "description">;
                        descriptionLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "descriptionLocalizations"> | undefined;
                        type?: Pick<import("../mod.js").CreateApplicationCommand, "type"> | undefined;
                        options?: Pick<import("../mod.js").CreateApplicationCommand, "options"> | undefined;
                        defaultMemberPermissions?: Pick<import("../mod.js").CreateApplicationCommand, "defaultMemberPermissions"> | undefined;
                        dmPermission?: Pick<import("../mod.js").CreateApplicationCommand, "dmPermission"> | undefined;
                    }>, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                    upsertApplicationCommands: (options: (import("../mod.js").CreateContextApplicationCommand | import("../mod.js").UpsertApplicationCommands)[], guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                    deleteFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<void>;
                    editFollowupMessage: (interactionToken: string, messageId: bigint, options: import("../mod.js").EditWebhookMessage) => Promise<Message>;
                    getFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<Message>;
                    getOriginalInteractionResponse: (token: string) => Promise<Message>;
                    sendInteractionResponse: (id: bigint, token: string, options: import("../mod.js").InteractionResponse) => Promise<Message | undefined>;
                    verifySignature: () => {
                        isValid: boolean;
                        body: string;
                    };
                    createInvite: (channelId: bigint, options?: import("../mod.js").CreateChannelInvite | undefined) => Promise<{
                        code: string;
                        guildId: bigint | undefined;
                        channelId: bigint | undefined;
                        inviter: User | undefined;
                        targetType: import("../types/shared.js").TargetTypes | undefined;
                        targetUser: User | undefined;
                        targetApplicationId: bigint | undefined;
                        approximatePresenceCount: number | undefined;
                        approximateMemberCount: number | undefined;
                        expiresAt: number | undefined;
                    }>;
                    deleteInvite: (inviteCode: string) => Promise<void>;
                    getChannelInvites: (channelId: bigint) => Promise<Collection<string, {
                        uses: number;
                        maxUses: number;
                        maxAge: number;
                        temporary: boolean;
                        createdAt: number;
                    }>>;
                    getInvite: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => Promise<{
                        code: string;
                        guildId: bigint | undefined;
                        channelId: bigint | undefined;
                        inviter: User | undefined;
                        targetType: import("../types/shared.js").TargetTypes | undefined;
                        targetUser: User | undefined;
                        targetApplicationId: bigint | undefined;
                        approximatePresenceCount: number | undefined;
                        approximateMemberCount: number | undefined;
                        expiresAt: number | undefined;
                    }>;
                    getInvites: (guildId: bigint) => Promise<Collection<string, {
                        uses: number;
                        maxUses: number;
                        maxAge: number;
                        temporary: boolean;
                        createdAt: number;
                    }>>;
                    avatarURL: (userId: bigint, discriminator: string, options?: {
                        avatar: bigint | undefined;
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    } | undefined) => string;
                    banMember: (guildId: bigint, id: bigint, options?: import("../mod.js").CreateGuildBan | undefined) => Promise<void>;
                    editBotNickname: (guildId: bigint, options: {
                        nick: string | null;
                        reason?: string | undefined;
                    }) => Promise<string | undefined>;
                    editMember: (guildId: bigint, memberId: bigint, options: import("../mod.js").ModifyGuildMember) => Promise<Member>;
                    fetchMembers: (guildId: bigint, options?: Omit<import("../mod.js").RequestGuildMembers, "guildId"> | undefined) => Promise<void>;
                    getDmChannel: (userId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                    getMember: (guildId: bigint, id: bigint) => Promise<Member | undefined>;
                    getMembers: (guildId: bigint, options: import("../mod.js").ListGuildMembers) => Promise<Collection<bigint, Member>>;
                    kickMember: (guildId: bigint, memberId: bigint, reason?: string | undefined) => Promise<void>;
                    pruneMembers: (guildId: bigint, options: import("../mod.js").BeginGuildPrune) => Promise<number>;
                    searchMembers: (guildId: bigint, query: string, options?: Omit<import("../mod.js").SearchMembers, "query"> | undefined) => Promise<Collection<bigint, Member>>;
                    unbanMember: (guildId: bigint, id: bigint) => Promise<void>;
                    addReaction: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                    addReactions: (channelId: bigint, messageId: bigint, reactions: string[], ordered?: boolean | undefined) => Promise<void>;
                    deleteMessage: (channelId: bigint, messageId: bigint, reason?: string | undefined, delayMilliseconds?: number | undefined) => Promise<void>;
                    deleteMessages: (channelId: bigint, ids: bigint[], reason?: string | undefined) => Promise<void>;
                    editMessage: (channelId: bigint, messageId: bigint, content: import("../mod.js").EditMessage) => Promise<Message>;
                    getMessage: (channelId: bigint, id: bigint) => Promise<Message | undefined>;
                    getMessages: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => Promise<Collection<bigint, Message>>;
                    isGetMessagesAfter: () => boolean;
                    isGetMessagesBefore: () => boolean;
                    isGetMessagesAround: () => boolean;
                    isGetMessagesLimit: () => boolean;
                    getReactions: (channelId: bigint, messageId: bigint, reaction: string, options?: import("../mod.js").GetReactions | undefined) => Promise<Collection<bigint, User>>;
                    pinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                    publishMessage: (channelId: bigint, messageId: bigint) => Promise<Message>;
                    removeAllReactions: (channelId: bigint, messageId: bigint) => Promise<void>;
                    removeReaction: (channelId: bigint, messageId: bigint, reaction: string, options?: {
                        userId?: bigint | undefined;
                    } | undefined) => Promise<void>;
                    removeReactionEmoji: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                    sendMessage: (channelId: bigint, content: import("../mod.js").CreateMessage) => Promise<Message>;
                    unpinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                    editBotProfile: (options: {
                        username?: string | undefined;
                        botAvatarURL?: string | null | undefined;
                    }) => Promise<User>;
                    editBotStatus: (data: import("../mod.js").StatusUpdate) => Promise<void>;
                    editShardStatus: (shardId: number, data: import("../mod.js").StatusUpdate) => void;
                    getGatewayBot: () => Promise<import("./gatewayBot.js").GetGatewayBot>;
                    getUser: (userId: bigint) => Promise<User | undefined>;
                    nitroStickerPacks: () => Promise<import("./sticker.js").StickerPack[]>;
                    getApplicationInfo: () => Promise<import("./application.js").Application>;
                    addRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                    createRole: (guildId: bigint, options: import("../mod.js").CreateGuildRole, reason?: string | undefined) => Promise<Role>;
                    deleteRole: (guildId: bigint, id: bigint) => Promise<void>;
                    editRole: (guildId: bigint, id: bigint, options: import("../mod.js").EditGuildRole) => Promise<Role>;
                    getRoles: (guildId: bigint) => Promise<Collection<bigint, Role>>;
                    modifyRolePositions: (guildId: bigint, options: import("../mod.js").ModifyRolePositions[]) => Promise<Collection<bigint, Role>>;
                    removeRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                    createGuildFromTemplate: (templateCode: string, data: import("../mod.js").CreateGuildFromTemplate) => Promise<import("./guild.js").Guild>;
                    createGuildTemplate: (guildId: bigint, data: import("../mod.js").CreateTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                    deleteGuildTemplate: (guildId: bigint, templateCode: string) => Promise<void>;
                    editGuildTemplate: (guildId: bigint, templateCode: string, data: import("../mod.js").ModifyGuildTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                    getGuildTemplates: (guildId: bigint) => Promise<Collection<string, import("./template.js").Template>>;
                    getTemplate: (templateCode: string) => Promise<import("./template.js").Template>;
                    syncGuildTemplate: (guildId: bigint, templateCode: string) => Promise<import("../types/discord.js").DiscordTemplate>;
                    connectToVoiceChannel: (guildId: bigint, channelId: bigint, options?: import("../types/shared.js").AtLeastOne<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, {
                        selfDeaf: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfDeaf">;
                        selfMute: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfMute">;
                    }> | undefined) => Promise<void>;
                    createWebhook: (channelId: bigint, options: import("../mod.js").CreateWebhook) => Promise<import("./webhook.js").Webhook>;
                    deleteWebhook: (webhookId: bigint, reason?: string | undefined) => Promise<void>;
                    deleteWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").DeleteWebhookMessageOptions | undefined) => Promise<void>;
                    deleteWebhookWithToken: (webhookId: bigint, webhookToken: string) => Promise<void>;
                    editWebhook: (webhookId: bigint, options: import("../mod.js").ModifyWebhook) => Promise<import("./webhook.js").Webhook>;
                    editWebhookMessage: (webhookId: bigint, webhookToken: string, options: import("../mod.js").EditWebhookMessage & {
                        messageId?: bigint | undefined;
                        threadId?: bigint | undefined;
                    }) => Promise<Message>;
                    editWebhookWithToken: (webhookId: bigint, webhookToken: string, options: Omit<import("../mod.js").ModifyWebhook, "channelId">) => Promise<import("./webhook.js").Webhook>;
                    getWebhook: (webhookId: bigint) => Promise<import("./webhook.js").Webhook | undefined>;
                    getWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").GetWebhookMessageOptions | undefined) => Promise<Message>;
                    getWebhooks: (guildId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                    getWebhookWithToken: (webhookId: bigint, token: string) => Promise<import("./webhook.js").Webhook>;
                    sendWebhook: (webhookId: bigint, webhookToken: string, options: import("../mod.js").ExecuteWebhook) => Promise<Message | undefined>;
                };
                rest: {
                    version: number;
                    token: string;
                    debug: (text: string) => unknown;
                    customUrl: string;
                    maxRetryCount: number;
                    secretKey: string;
                    checkRateLimits: typeof import("../mod.js").checkRateLimits;
                    cleanupQueues: typeof import("../mod.js").cleanupQueues;
                    processQueue: typeof import("../mod.js").processQueue;
                    processRateLimitedPaths: typeof import("../mod.js").processRateLimitedPaths;
                    processRequestHeaders: typeof import("../mod.js").processRequestHeaders;
                    processRequest: typeof import("../mod.js").processRequest;
                    createRequestBody: typeof import("../mod.js").createRequestBody;
                    runMethod: typeof import("../mod.js").runMethod;
                    simplifyUrl: typeof import("../mod.js").simplifyUrl;
                    processGlobalQueue: typeof import("../mod.js").processGlobalQueue;
                    convertRestError: typeof import("../mod.js").convertRestError;
                    sendRequest: typeof import("../mod.js").sendRequest;
                    invalidRequests: number;
                    maxInvalidRequests: number;
                    invalidRequestsInterval: number;
                    invalidRequestsTimeoutId: number;
                    invalidRequestsSafetyAmount: number;
                    invalidRequestFrozenAt: number;
                    invalidRequestErrorStatuses: number[];
                    pathQueues: Map<string, {
                        isWaiting: boolean;
                        requests: {
                            request: import("../mod.js").RestRequest;
                            payload: import("../mod.js").RestPayload;
                        }[];
                    }>;
                    processingQueue: boolean;
                    processingRateLimitedPaths: boolean;
                    globallyRateLimited: boolean;
                    globalQueue: {
                        request: import("../mod.js").RestRequest;
                        payload: import("../mod.js").RestPayload;
                        basicURL: string;
                        urlToUse: string;
                    }[];
                    globalQueueProcessing: boolean;
                    rateLimitedPaths: Map<string, import("../mod.js").RestRateLimitedPath>;
                };
                gateway: {
                    stop: (code: number, reason: string) => Promise<void>;
                    gatewayBot: {
                        url: string;
                        shards: number;
                        sessionStartLimit: {
                            total: number;
                            remaining: number;
                            resetAfter: number;
                            maxConcurrency: number;
                        };
                    };
                    spawnShardDelay: number;
                    shardsPerWorker: number;
                    totalWorkers: number;
                    firstShardId: number;
                    lastShardId: number;
                    buckets: Collection<number, {
                        workers: {
                            id: number;
                            queue: number[];
                        }[];
                        leak: import("../util/bucket.js").LeakyBucket;
                    }>;
                    prepareBuckets: () => void;
                    spawnShards: () => void;
                    tellWorkerToIdentify: (workerId: number, shardId: number, bucketId: number) => Promise<void>;
                    debug: (text: import("../mod.js").GatewayDebugEvents, ...args: any[]) => unknown;
                    calculateTotalShards: () => number;
                    calculateWorkerId: (shardId: number) => number;
                    manager: {
                        shards: Collection<number, {
                            gatewayConfig: import("../mod.js").ShardGatewayConfig;
                            heart: import("../mod.js").ShardHeart;
                            id: number;
                            maxRequestsPerRateLimitTick: number;
                            previousSequenceNumber: number | null;
                            rateLimitResetInterval: number;
                            sessionId: string | undefined;
                            socket: import("ws") | undefined;
                            state: import("../mod.js").ShardState;
                            totalShards: number;
                            events: import("../mod.js").ShardEvents;
                            calculateSafeRequests: () => number;
                            close: (code: number, reason: string) => void;
                            connect: () => Promise<void>;
                            identify: () => Promise<void>;
                            isOpen: () => boolean;
                            makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                            resume: () => Promise<void>;
                            send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                            shutdown: () => Promise<void>;
                            bucket: import("../util/bucket.js").LeakyBucket;
                            handleClose: (close: CloseEvent) => Promise<void>;
                            handleMessage: (message: MessageEvent<any>) => Promise<void>;
                            requestIdentify: () => Promise<void>;
                            offlineSendQueue: ((_?: unknown) => void)[];
                            resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                            startHeartbeating: (interval: number) => void;
                            stopHeartbeating: () => void;
                        }>;
                        gatewayConfig: {
                            url?: string | undefined;
                            version?: number | undefined;
                            compress?: boolean | undefined;
                            intents?: number | undefined;
                            properties?: {
                                browser: string;
                                os: string;
                                device: string;
                            } | undefined;
                            token: string;
                        };
                        totalShards: number;
                        createShardOptions: {
                            state?: import("../mod.js").ShardState | undefined;
                            close?: {} | undefined;
                            resume?: {} | undefined;
                            connect?: {} | undefined;
                            calculateSafeRequests?: {} | undefined;
                            handleClose?: {} | undefined;
                            handleMessage?: {} | undefined;
                            identify?: {} | undefined;
                            isOpen?: {} | undefined;
                            makePresence?: {} | undefined;
                            maxRequestsPerRateLimitTick?: number | undefined;
                            previousSequenceNumber?: number | undefined;
                            rateLimitResetInterval?: number | undefined;
                            send?: {} | undefined;
                            shutdown?: {} | undefined;
                            startHeartbeating?: {} | undefined;
                            stopHeartbeating?: {} | undefined;
                            heart?: {
                                intervalId?: number | undefined;
                                lastAck?: number | undefined;
                                lastBeat?: number | undefined;
                                rtt?: number | undefined;
                                timeoutId?: number | undefined;
                                interval: number;
                                acknowledged: boolean;
                            } | undefined;
                            bucket?: {
                                max: number;
                                waiting: ((_?: unknown) => void)[];
                                refillInterval: number;
                                refillAmount: number;
                                tokens: () => number;
                                acquire: (amount: number, highPriority?: boolean | undefined) => Promise<void>;
                                nextRefill: () => number;
                                lastRefill: number;
                                allowAcquire: boolean;
                                tokensState: number;
                            } | undefined;
                            offlineSendQueue?: {
                                d?: unknown;
                                op: import("../types/shared.js").GatewayOpcodes;
                            }[] | undefined;
                            resolves?: {
                                [Symbol.toStringTag]: string;
                                [Symbol.iterator]: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                forEach: (callbackfn: (value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void, key: "READY" | "RESUMED" | "INVALID_SESSION", map: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>) => void, thisArg?: any) => void;
                                entries: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                keys: () => IterableIterator<"READY" | "RESUMED" | "INVALID_SESSION">;
                                values: () => IterableIterator<(payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                set: (key: "READY" | "RESUMED" | "INVALID_SESSION", value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void) => Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                clear: () => void;
                                size: number;
                                get: (key: "READY" | "RESUMED" | "INVALID_SESSION") => ((payload: import("../types/discord.js").DiscordGatewayPayload) => void) | undefined;
                                delete: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                                has: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                            } | undefined;
                            events: {
                                connected?: {} | undefined;
                                connecting?: {} | undefined;
                                disconnected?: {} | undefined;
                                heartbeat?: {} | undefined;
                                heartbeatAck?: {} | undefined;
                                hello?: {} | undefined;
                                invalidSession?: {} | undefined;
                                resuming?: {} | undefined;
                                resumed?: {} | undefined;
                                requestedReconnect?: {} | undefined;
                                identifying?: {} | undefined;
                                identified?: {} | undefined;
                                message: (shard: {
                                    gatewayConfig: import("../mod.js").ShardGatewayConfig;
                                    heart: import("../mod.js").ShardHeart;
                                    id: number;
                                    maxRequestsPerRateLimitTick: number;
                                    previousSequenceNumber: number | null;
                                    rateLimitResetInterval: number;
                                    sessionId: string | undefined;
                                    socket: import("ws") | undefined;
                                    state: import("../mod.js").ShardState;
                                    totalShards: number;
                                    events: import("../mod.js").ShardEvents;
                                    calculateSafeRequests: () => number;
                                    close: (code: number, reason: string) => void;
                                    connect: () => Promise<void>;
                                    identify: () => Promise<void>;
                                    isOpen: () => boolean;
                                    makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                                    resume: () => Promise<void>;
                                    send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                                    shutdown: () => Promise<void>;
                                    bucket: import("../util/bucket.js").LeakyBucket;
                                    handleClose: (close: CloseEvent) => Promise<void>;
                                    handleMessage: (message: MessageEvent<any>) => Promise<void>;
                                    requestIdentify: () => Promise<void>;
                                    offlineSendQueue: ((_?: unknown) => void)[];
                                    resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                    startHeartbeating: (interval: number) => void;
                                    stopHeartbeating: () => void;
                                }, payload: import("../types/discord.js").DiscordGatewayPayload) => unknown;
                            };
                        };
                        requestIdentify: (shardId: number) => Promise<void>;
                        identify: (shardId: number) => Promise<void>;
                        kill: (shardId: number) => Promise<void>;
                    };
                };
                handlers: {
                    READY: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_PINS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_BAN_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_BAN_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_EMOJIS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_INTEGRATIONS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBERS_CHUNK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_ROLE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_ROLE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_ROLE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_USER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_USER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTERACTION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INVITE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INVITE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_DELETE_BULK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_REMOVE_ALL: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_REMOVE_EMOJI: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    PRESENCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    TYPING_START: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    USER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    VOICE_SERVER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    VOICE_STATE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    WEBHOOKS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTEGRATION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTEGRATION_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTEGRATION_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    STAGE_INSTANCE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    STAGE_INSTANCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    STAGE_INSTANCE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_LIST_SYNC: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_MEMBERS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_LOADED_DD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                };
                activeGuildIds: Set<bigint>;
                cache: {
                    unrepliedInteractions: Set<bigint>;
                    fetchAllMembersProcessingRequests: Map<string, Function>;
                };
                enabledPlugins: Set<string>;
            } | undefined;
            intervalId?: number | undefined;
            filter: (value: {
                id: bigint;
                name: string;
                type: ChannelTypes;
                permissions: bigint;
            }, key: bigint, ...args: any[]) => boolean;
            interval: number;
        } | undefined;
        [Symbol.toStringTag]: string;
        [Symbol.iterator]: () => IterableIterator<[bigint, {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        }]>;
        every: (callback: (value: {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        }, key: bigint) => boolean) => boolean;
        some: (callback: (value: {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        }, key: bigint) => boolean) => boolean;
        forEach: (callbackfn: (value: {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        }, key: bigint, map: Map<bigint, {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        }>) => void, thisArg?: any) => void;
        map: <T_4>(callback: (value: {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        }, key: bigint) => T_4) => T_4[];
        filter: (callback: (value: {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        }, key: bigint) => boolean) => Collection<bigint, {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        }>;
        reduce: <T_5>(callback: (accumulator: T_5, value: {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        }, key: bigint) => T_5, initialValue?: T_5 | undefined) => T_5;
        find: (callback: (value: {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        }, key: bigint) => boolean) => {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        } | undefined;
        entries: () => IterableIterator<[bigint, {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        }]>;
        keys: () => IterableIterator<bigint>;
        values: () => IterableIterator<{
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        }>;
        set: (key: bigint, value: {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        }) => Collection<bigint, {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        }>;
        clear: () => void;
        size: number;
        get: (key: bigint) => {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        } | undefined;
        startSweeper: (options: import("../util/collection.js").CollectionSweeper<bigint, {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        }>) => number;
        stopSweeper: () => void;
        changeSweeperInterval: (newInterval: number) => void;
        changeSweeperFilter: (newFilter: (value: {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        }, key: bigint, bot: Bot) => boolean) => void;
        forceSet: (key: bigint, value: {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        }) => Collection<bigint, {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        }>;
        array: () => {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        }[];
        first: () => {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        } | undefined;
        last: () => {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        } | undefined;
        random: () => {
            id: bigint;
            name: string;
            type: ChannelTypes;
            permissions: bigint;
        } | undefined;
        delete: (key: bigint) => boolean;
        has: (key: bigint) => boolean;
    } | undefined;
    attachments?: {
        maxSize?: number | undefined;
        sweeper?: {
            bot?: {
                handleDiscordPayload?: {} | undefined;
                botGatewayData?: {
                    url: string;
                    shards: number;
                    sessionStartLimit: {
                        total: number;
                        remaining: number;
                        resetAfter: number;
                        maxConcurrency: number;
                    };
                } | undefined;
                id: bigint;
                constants: {
                    DISCORDENO_VERSION: string;
                    USER_AGENT: string;
                    BASE_URL: string;
                    CDN_URL: string;
                    routes: {
                        GATEWAY_BOT: () => string;
                        AUTOMOD_RULES: (guildId: bigint) => string;
                        AUTOMOD_RULE: (guildId: bigint, ruleId: bigint) => string;
                        CHANNEL: (channelId: bigint) => string;
                        CHANNEL_MESSAGE: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_MESSAGES: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => string;
                        CHANNEL_PIN: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_PINS: (channelId: bigint) => string;
                        CHANNEL_BULK_DELETE: (channelId: bigint) => string;
                        CHANNEL_INVITES: (channelId: bigint) => string;
                        CHANNEL_WEBHOOKS: (channelId: bigint) => string;
                        CHANNEL_MESSAGE_REACTION_ME: (channelId: bigint, messageId: bigint, emoji: string) => string;
                        CHANNEL_MESSAGE_REACTION_USER: (channelId: bigint, messageId: bigint, emoji: string, userId: bigint) => string;
                        CHANNEL_MESSAGE_REACTIONS: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_MESSAGE_REACTION: (channelId: bigint, messageId: bigint, emoji: string, options?: import("../mod.js").GetReactions | undefined) => string;
                        CHANNEL_FOLLOW: (channelId: bigint) => string;
                        CHANNEL_MESSAGE_CROSSPOST: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_OVERWRITE: (channelId: bigint, overwriteId: bigint) => string;
                        CHANNEL_TYPING: (channelId: bigint) => string;
                        THREAD_START_PUBLIC: (channelId: bigint, messageId: bigint) => string;
                        THREAD_START_PRIVATE: (channelId: bigint) => string;
                        THREAD_ACTIVE: (guildId: bigint) => string;
                        THREAD_MEMBERS: (channelId: bigint) => string;
                        THREAD_ME: (channelId: bigint) => string;
                        THREAD_USER: (channelId: bigint, userId: bigint) => string;
                        THREAD_ARCHIVED: (channelId: bigint) => string;
                        THREAD_ARCHIVED_PUBLIC: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                        THREAD_ARCHIVED_PRIVATE: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                        THREAD_ARCHIVED_PRIVATE_JOINED: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                        FORUM_START: (channelId: bigint) => string;
                        GUILD: (guildId: bigint, withCounts?: boolean | undefined) => string;
                        GUILDS: () => string;
                        GUILD_AUDIT_LOGS: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => string;
                        GUILD_BAN: (guildId: bigint, userId: bigint) => string;
                        GUILD_BANS: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => string;
                        GUILD_BANNER: (guildId: bigint, icon: string) => string;
                        GUILD_CHANNELS: (guildId: bigint) => string;
                        GUILD_WIDGET: (guildId: bigint) => string;
                        GUILD_WIDGET_JSON: (guildId: bigint) => string;
                        GUILD_WIDGET_IMAGE: (guildId: bigint, style?: "shield" | "banner1" | "banner2" | "banner3" | "banner4" | undefined) => string;
                        GUILD_EMOJI: (guildId: bigint, emojiId: bigint) => string;
                        GUILD_EMOJIS: (guildId: bigint) => string;
                        GUILD_ICON: (guildId: bigint, icon: string) => string;
                        GUILD_INTEGRATION: (guildId: bigint, integrationId: bigint) => string;
                        GUILD_INTEGRATION_SYNC: (guildId: bigint, integrationId: bigint) => string;
                        GUILD_INTEGRATIONS: (guildId: bigint) => string;
                        GUILD_INVITES: (guildId: bigint) => string;
                        GUILD_LEAVE: (guildId: bigint) => string;
                        GUILD_MEMBER: (guildId: bigint, userId: bigint) => string;
                        GUILD_MEMBERS: (guildId: bigint, options?: import("../mod.js").ListGuildMembers | undefined) => string;
                        GUILD_MEMBER_ROLE: (guildId: bigint, memberId: bigint, roleId: bigint) => string;
                        GUILD_MEMBERS_SEARCH: (guildId: bigint, query: string, options?: {
                            limit?: number | undefined;
                        } | undefined) => string;
                        GUILD_PRUNE: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => string;
                        GUILD_REGIONS: (guildId: bigint) => string;
                        GUILD_ROLE: (guildId: bigint, roleId: bigint) => string;
                        GUILD_ROLES: (guildId: bigint) => string;
                        GUILD_SPLASH: (guildId: bigint, icon: string) => string;
                        GUILD_VANITY_URL: (guildId: bigint) => string;
                        GUILD_WEBHOOKS: (guildId: bigint) => string;
                        TEMPLATE: (code: string) => string;
                        GUILD_TEMPLATE: (guildId: bigint, code: string) => string;
                        GUILD_TEMPLATES: (guildId: bigint) => string;
                        GUILD_PREVIEW: (guildId: bigint) => string;
                        UPDATE_VOICE_STATE: (guildId: bigint, userId?: bigint | undefined) => string;
                        GUILD_WELCOME_SCREEN: (guildId: bigint) => string;
                        GUILD_SCHEDULED_EVENTS: (guildId: bigint, withUserCount?: boolean | undefined) => string;
                        GUILD_SCHEDULED_EVENT: (guildId: bigint, eventId: bigint, withUserCount?: boolean | undefined) => string;
                        GUILD_SCHEDULED_EVENT_USERS: (guildId: bigint, eventId: bigint, options?: import("../mod.js").GetScheduledEventUsers | undefined) => string;
                        VOICE_REGIONS: () => string;
                        INVITE: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => string;
                        WEBHOOK: (webhookId: bigint, token: string, options?: {
                            wait?: boolean | undefined;
                            threadId?: bigint | undefined;
                        } | undefined) => string;
                        WEBHOOK_ID: (webhookId: bigint) => string;
                        WEBHOOK_MESSAGE: (webhookId: bigint, token: string, messageId: bigint, options?: {
                            threadId?: bigint | undefined;
                        } | undefined) => string;
                        WEBHOOK_MESSAGE_ORIGINAL: (webhookId: bigint, token: string, options?: {
                            threadId?: bigint | undefined;
                        } | undefined) => string;
                        WEBHOOK_SLACK: (webhookId: bigint, token: string) => string;
                        WEBHOOK_GITHUB: (webhookId: bigint, token: string) => string;
                        COMMANDS: (applicationId: bigint) => string;
                        COMMANDS_GUILD: (applicationId: bigint, guildId: bigint) => string;
                        COMMANDS_PERMISSIONS: (applicationId: bigint, guildId: bigint) => string;
                        COMMANDS_PERMISSION: (applicationId: bigint, guildId: bigint, commandId: bigint) => string;
                        COMMANDS_ID: (applicationId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                        COMMANDS_GUILD_ID: (applicationId: bigint, guildId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                        INTERACTION_ID_TOKEN: (interactionId: bigint, token: string) => string;
                        INTERACTION_ORIGINAL_ID_TOKEN: (interactionId: bigint, token: string) => string;
                        INTERACTION_ID_TOKEN_MESSAGE_ID: (applicationId: bigint, token: string, messageId: bigint) => string;
                        USER: (userId: bigint) => string;
                        USER_BOT: () => string;
                        USER_GUILDS: () => string;
                        USER_AVATAR: (userId: bigint, icon: string) => string;
                        USER_DEFAULT_AVATAR: (icon: number) => string;
                        USER_DM: () => string;
                        USER_CONNECTIONS: () => string;
                        USER_NICK: (guildId: bigint) => string;
                        DISCOVERY_CATEGORIES: () => string;
                        DISCOVERY_VALID_TERM: (term: string) => string;
                        DISCOVERY_METADATA: (guildId: bigint) => string;
                        DISCOVERY_SUBCATEGORY: (guildId: bigint, categoryId: number) => string;
                        OAUTH2_APPLICATION: () => string;
                        STAGE_INSTANCES: () => string;
                        STAGE_INSTANCE: (channelId: bigint) => string;
                        NITRO_STICKER_PACKS: () => string;
                    };
                    regexes: {
                        SLASH_COMMANDS_NAME_REGEX: RegExp;
                        CONTEXT_MENU_COMMANDS_NAME_REGEX: RegExp;
                        CHANNEL_MENTION_REGEX: RegExp;
                        DISCORD_SNOWFLAKE_REGEX: RegExp;
                    };
                    Errors: {
                        REQUEST_UNKNOWN_ERROR: import("../types/shared.js").Errors.REQUEST_UNKNOWN_ERROR;
                        GUILD_NOT_FOUND: import("../types/shared.js").Errors.GUILD_NOT_FOUND;
                        RULES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.RULES_CHANNEL_CANNOT_BE_DELETED;
                        UPDATES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.UPDATES_CHANNEL_CANNOT_BE_DELETED;
                        NICKNAMES_MAX_LENGTH: import("../types/shared.js").Errors.NICKNAMES_MAX_LENGTH;
                        MEMBER_NOT_IN_VOICE_CHANNEL: import("../types/shared.js").Errors.MEMBER_NOT_IN_VOICE_CHANNEL;
                        MESSAGE_MAX_LENGTH: import("../types/shared.js").Errors.MESSAGE_MAX_LENGTH;
                        BOTS_HIGHEST_ROLE_TOO_LOW: import("../types/shared.js").Errors.BOTS_HIGHEST_ROLE_TOO_LOW;
                        CHANNEL_NOT_FOUND: import("../types/shared.js").Errors.CHANNEL_NOT_FOUND;
                        CHANNEL_NOT_IN_GUILD: import("../types/shared.js").Errors.CHANNEL_NOT_IN_GUILD;
                        CHANNEL_NOT_TEXT_BASED: import("../types/shared.js").Errors.CHANNEL_NOT_TEXT_BASED;
                        CHANNEL_NOT_STAGE_VOICE: import("../types/shared.js").Errors.CHANNEL_NOT_STAGE_VOICE;
                        INVALID_TOPIC_LENGTH: import("../types/shared.js").Errors.INVALID_TOPIC_LENGTH;
                        GUILD_NOT_DISCOVERABLE: import("../types/shared.js").Errors.GUILD_NOT_DISCOVERABLE;
                        GUILD_WIDGET_NOT_ENABLED: import("../types/shared.js").Errors.GUILD_WIDGET_NOT_ENABLED;
                        MEMBER_NOT_FOUND: import("../types/shared.js").Errors.MEMBER_NOT_FOUND;
                        MEMBER_SEARCH_LIMIT_TOO_HIGH: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_HIGH;
                        MEMBER_SEARCH_LIMIT_TOO_LOW: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_LOW;
                        PRUNE_MAX_DAYS: import("../types/shared.js").Errors.PRUNE_MAX_DAYS;
                        ROLE_NOT_FOUND: import("../types/shared.js").Errors.ROLE_NOT_FOUND;
                        INVALID_THREAD_PARENT_CHANNEL_TYPE: import("../types/shared.js").Errors.INVALID_THREAD_PARENT_CHANNEL_TYPE;
                        GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS: import("../types/shared.js").Errors.GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS;
                        NOT_A_THREAD_CHANNEL: import("../types/shared.js").Errors.NOT_A_THREAD_CHANNEL;
                        MISSING_MANAGE_THREADS_AND_NOT_MEMBER: import("../types/shared.js").Errors.MISSING_MANAGE_THREADS_AND_NOT_MEMBER;
                        CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD: import("../types/shared.js").Errors.CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD;
                        HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS: import("../types/shared.js").Errors.HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS;
                        INVALID_GET_MESSAGES_LIMIT: import("../types/shared.js").Errors.INVALID_GET_MESSAGES_LIMIT;
                        DELETE_MESSAGES_MIN: import("../types/shared.js").Errors.DELETE_MESSAGES_MIN;
                        PRUNE_MIN_DAYS: import("../types/shared.js").Errors.PRUNE_MIN_DAYS;
                        INVALID_SLASH_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_DESCRIPTION;
                        INVALID_SLASH_NAME: import("../types/shared.js").Errors.INVALID_SLASH_NAME;
                        INVALID_SLASH_OPTIONS: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS;
                        INVALID_SLASH_OPTIONS_CHOICES: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICES;
                        TOO_MANY_SLASH_OPTIONS: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTIONS;
                        INVALID_SLASH_OPTION_CHOICE_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_CHOICE_NAME;
                        INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE;
                        TOO_MANY_SLASH_OPTION_CHOICES: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTION_CHOICES;
                        ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES: import("../types/shared.js").Errors.ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES;
                        INVALID_SLASH_OPTION_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_NAME;
                        INVALID_SLASH_OPTION_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_DESCRIPTION;
                        INVALID_CONTEXT_MENU_COMMAND_NAME: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_NAME;
                        INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION;
                        INVALID_WEBHOOK_NAME: import("../types/shared.js").Errors.INVALID_WEBHOOK_NAME;
                        INVALID_WEBHOOK_OPTIONS: import("../types/shared.js").Errors.INVALID_WEBHOOK_OPTIONS;
                        MISSING_ADD_REACTIONS: import("../types/shared.js").Errors.MISSING_ADD_REACTIONS;
                        MISSING_ADMINISTRATOR: import("../types/shared.js").Errors.MISSING_ADMINISTRATOR;
                        MISSING_ATTACH_FILES: import("../types/shared.js").Errors.MISSING_ATTACH_FILES;
                        MISSING_BAN_MEMBERS: import("../types/shared.js").Errors.MISSING_BAN_MEMBERS;
                        MISSING_CHANGE_NICKNAME: import("../types/shared.js").Errors.MISSING_CHANGE_NICKNAME;
                        MISSING_CONNECT: import("../types/shared.js").Errors.MISSING_CONNECT;
                        MISSING_CREATE_INSTANT_INVITE: import("../types/shared.js").Errors.MISSING_CREATE_INSTANT_INVITE;
                        MISSING_DEAFEN_MEMBERS: import("../types/shared.js").Errors.MISSING_DEAFEN_MEMBERS;
                        MISSING_EMBED_LINKS: import("../types/shared.js").Errors.MISSING_EMBED_LINKS;
                        MISSING_INTENT_GUILD_MEMBERS: import("../types/shared.js").Errors.MISSING_INTENT_GUILD_MEMBERS;
                        MISSING_KICK_MEMBERS: import("../types/shared.js").Errors.MISSING_KICK_MEMBERS;
                        MISSING_MANAGE_CHANNELS: import("../types/shared.js").Errors.MISSING_MANAGE_CHANNELS;
                        MISSING_MANAGE_EMOJIS: import("../types/shared.js").Errors.MISSING_MANAGE_EMOJIS;
                        MISSING_MANAGE_GUILD: import("../types/shared.js").Errors.MISSING_MANAGE_GUILD;
                        MISSING_MANAGE_MESSAGES: import("../types/shared.js").Errors.MISSING_MANAGE_MESSAGES;
                        MISSING_MANAGE_NICKNAMES: import("../types/shared.js").Errors.MISSING_MANAGE_NICKNAMES;
                        MISSING_MANAGE_ROLES: import("../types/shared.js").Errors.MISSING_MANAGE_ROLES;
                        MISSING_MANAGE_WEBHOOKS: import("../types/shared.js").Errors.MISSING_MANAGE_WEBHOOKS;
                        MISSING_MENTION_EVERYONE: import("../types/shared.js").Errors.MISSING_MENTION_EVERYONE;
                        MISSING_MOVE_MEMBERS: import("../types/shared.js").Errors.MISSING_MOVE_MEMBERS;
                        MISSING_MUTE_MEMBERS: import("../types/shared.js").Errors.MISSING_MUTE_MEMBERS;
                        MISSING_PRIORITY_SPEAKER: import("../types/shared.js").Errors.MISSING_PRIORITY_SPEAKER;
                        MISSING_READ_MESSAGE_HISTORY: import("../types/shared.js").Errors.MISSING_READ_MESSAGE_HISTORY;
                        MISSING_SEND_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_MESSAGES;
                        MISSING_SEND_TTS_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_TTS_MESSAGES;
                        MISSING_SPEAK: import("../types/shared.js").Errors.MISSING_SPEAK;
                        MISSING_STREAM: import("../types/shared.js").Errors.MISSING_STREAM;
                        MISSING_USE_VAD: import("../types/shared.js").Errors.MISSING_USE_VAD;
                        MISSING_USE_EXTERNAL_EMOJIS: import("../types/shared.js").Errors.MISSING_USE_EXTERNAL_EMOJIS;
                        MISSING_VIEW_AUDIT_LOG: import("../types/shared.js").Errors.MISSING_VIEW_AUDIT_LOG;
                        MISSING_VIEW_CHANNEL: import("../types/shared.js").Errors.MISSING_VIEW_CHANNEL;
                        MISSING_VIEW_GUILD_INSIGHTS: import("../types/shared.js").Errors.MISSING_VIEW_GUILD_INSIGHTS;
                        USERNAME_INVALID_CHARACTER: import("../types/shared.js").Errors.USERNAME_INVALID_CHARACTER;
                        USERNAME_INVALID_USERNAME: import("../types/shared.js").Errors.USERNAME_INVALID_USERNAME;
                        USERNAME_MAX_LENGTH: import("../types/shared.js").Errors.USERNAME_MAX_LENGTH;
                        USERNAME_MIN_LENGTH: import("../types/shared.js").Errors.USERNAME_MIN_LENGTH;
                        NONCE_TOO_LONG: import("../types/shared.js").Errors.NONCE_TOO_LONG;
                        INVITE_MAX_AGE_INVALID: import("../types/shared.js").Errors.INVITE_MAX_AGE_INVALID;
                        INVITE_MAX_USES_INVALID: import("../types/shared.js").Errors.INVITE_MAX_USES_INVALID;
                        RATE_LIMIT_RETRY_MAXED: import("../types/shared.js").Errors.RATE_LIMIT_RETRY_MAXED;
                        REQUEST_CLIENT_ERROR: import("../types/shared.js").Errors.REQUEST_CLIENT_ERROR;
                        REQUEST_SERVER_ERROR: import("../types/shared.js").Errors.REQUEST_SERVER_ERROR;
                        TOO_MANY_COMPONENTS: import("../types/shared.js").Errors.TOO_MANY_COMPONENTS;
                        TOO_MANY_ACTION_ROWS: import("../types/shared.js").Errors.TOO_MANY_ACTION_ROWS;
                        LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID: import("../types/shared.js").Errors.LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID;
                        COMPONENT_LABEL_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_LABEL_TOO_BIG;
                        COMPONENT_CUSTOM_ID_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_CUSTOM_ID_TOO_BIG;
                        BUTTON_REQUIRES_CUSTOM_ID: import("../types/shared.js").Errors.BUTTON_REQUIRES_CUSTOM_ID;
                        COMPONENT_SELECT_MUST_BE_ALONE: import("../types/shared.js").Errors.COMPONENT_SELECT_MUST_BE_ALONE;
                        COMPONENT_PLACEHOLDER_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_PLACEHOLDER_TOO_BIG;
                        COMPONENT_SELECT_MIN_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_LOW;
                        COMPONENT_SELECT_MIN_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_MANY;
                        COMPONENT_SELECT_MAX_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_LOW;
                        COMPONENT_SELECT_MAX_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_MANY;
                        COMPONENT_SELECT_OPTIONS_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_LOW;
                        COMPONENT_SELECT_OPTIONS_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_MANY;
                        SELECT_OPTION_LABEL_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_LABEL_TOO_BIG;
                        SELECT_OPTION_VALUE_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_VALUE_TOO_BIG;
                        SELECT_OPTION_TOO_MANY_DEFAULTS: import("../types/shared.js").Errors.SELECT_OPTION_TOO_MANY_DEFAULTS;
                        COMPONENT_SELECT_MIN_HIGHER_THAN_MAX: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_HIGHER_THAN_MAX;
                        CANNOT_ADD_USER_TO_ARCHIVED_THREADS: import("../types/shared.js").Errors.CANNOT_ADD_USER_TO_ARCHIVED_THREADS;
                        CANNOT_LEAVE_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_LEAVE_ARCHIVED_THREAD;
                        CANNOT_REMOVE_FROM_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_REMOVE_FROM_ARCHIVED_THREAD;
                        YOU_CAN_NOT_DM_THE_BOT_ITSELF: import("../types/shared.js").Errors.YOU_CAN_NOT_DM_THE_BOT_ITSELF;
                    };
                };
                events: import("../bot.js").EventHandlers;
                applicationId: bigint;
                token: string;
                intents: import("../types/shared.js").GatewayIntents;
                urlWSS: string;
                utils: {
                    snowflakeToBigint: typeof import("../mod.js").snowflakeToBigint;
                    bigintToSnowflake: typeof import("../mod.js").bigintToSnowflake;
                    calculateShardId: typeof import("../mod.js").calculateShardId;
                    delay: typeof import("../mod.js").delay;
                    iconHashToBigInt: typeof import("../mod.js").iconHashToBigInt;
                    iconBigintToHash: typeof import("../mod.js").iconBigintToHash;
                    validateLength: typeof import("../mod.js").validateLength;
                    urlToBase64: typeof import("../util/urlToBase64.js").urlToBase64;
                    formatImageURL: typeof import("../mod.js").formatImageURL;
                    calculateBits: typeof import("../util/permissions.js").calculateBits;
                    calculatePermissions: typeof import("../util/permissions.js").calculatePermissions;
                };
                transformers: import("../bot.js").Transformers;
                helpers: {
                    addToThread: (threadId: bigint, userId: bigint) => Promise<void>;
                    getActiveThreads: (guildId: bigint) => Promise<{
                        threads: Collection<bigint, import("./channel.js").Channel>;
                        members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                    }>;
                    getArchivedThreads: (channelId: bigint, options?: (import("../mod.js").ListArchivedThreads & {
                        type?: "private" | "public" | "privateJoinedThreads" | undefined;
                    }) | undefined) => Promise<{
                        threads: Collection<bigint, import("./channel.js").Channel>;
                        members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                        hasMore: boolean;
                    }>;
                    getThreadMember: (threadId: bigint, userId: bigint) => Promise<{
                        id: bigint | undefined;
                        userId: bigint | undefined;
                        joinTimestamp: number;
                        flags: number;
                    }>;
                    getThreadMembers: (threadId: bigint) => Promise<Collection<bigint | undefined, import("./threadMember.js").ThreadMember>>;
                    joinThread: (threadId: bigint) => Promise<void>;
                    leaveThread: (threadId: bigint) => Promise<void>;
                    removeThreadMember: (threadId: bigint, userId: bigint) => Promise<void>;
                    startThreadWithMessage: (channelId: bigint, messageId: bigint, options: import("../mod.js").StartThreadWithMessage) => Promise<import("./channel.js").Channel>;
                    startThreadWithoutMessage: (channelId: bigint, options: import("../mod.js").StartThreadWithoutMessage) => Promise<import("./channel.js").Channel>;
                    createForumPost: (channelId: bigint, options: import("../mod.js").CreateForumPostWithMessage) => Promise<import("./channel.js").Channel>;
                    createChannel: (guildId: bigint, options?: import("../mod.js").CreateGuildChannel | undefined, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                    createStageInstance: (options: import("../mod.js").CreateStageInstance) => Promise<import("./stageInstance.js").StageInstance>;
                    deleteChannel: (channelId: bigint, reason?: string | undefined) => Promise<void>;
                    deleteChannelOverwrite: (channelId: bigint, overwriteId: bigint) => Promise<void>;
                    deleteStageInstance: (channelId: bigint) => Promise<void>;
                    editChannel: (channelId: bigint, options: import("../mod.js").ModifyChannel, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                    editChannelOverwrite: (channelId: bigint, overwrite: import("../mod.js").OverwriteReadable) => Promise<void>;
                    followChannel: (sourceChannelId: bigint, targetChannelId: bigint) => Promise<bigint>;
                    getChannel: (channelId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                    getChannels: (guildId: bigint) => Promise<Collection<bigint, import("./channel.js").Channel>>;
                    getChannelWebhooks: (channelId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                    getPins: (channelId: bigint) => Promise<Message[]>;
                    getStageInstance: (channelId: bigint) => Promise<import("./stageInstance.js").StageInstance>;
                    startTyping: (channelId: bigint) => Promise<void>;
                    swapChannels: (guildId: bigint, channelPositions: import("../mod.js").ModifyGuildChannelPositions[]) => Promise<void>;
                    updateStageInstance: (channelId: bigint, data: import("../types/shared.js").AtLeastOne<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, {
                        topic: Pick<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, "topic">;
                    }>) => Promise<import("./stageInstance.js").StageInstance>;
                    updateBotVoiceState: (guildId: bigint, options: import("../mod.js").UpdateSelfVoiceState) => Promise<void>;
                    updateUserVoiceState: (guildId: bigint, options: import("../mod.js").UpdateOthersVoiceState) => Promise<void>;
                    addDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                    editDiscovery: (guildId: bigint, data: import("../mod.js").ModifyGuildDiscoveryMetadata) => Promise<{
                        guildId: bigint;
                        primaryCategoryId: number;
                        keywords: string[] | undefined;
                        emojiDiscoverabilityEnabled: boolean;
                        partnerActionedTimestamp: number | undefined;
                        partnerApplicationTimestamp: number | undefined;
                        categoryIds: number[];
                    }>;
                    getDiscovery: (guildId: bigint) => Promise<{
                        guildId: bigint;
                        primaryCategoryId: number;
                        keywords: string[] | undefined;
                        emojiDiscoverabilityEnabled: boolean;
                        partnerActionedTimestamp: number | undefined;
                        partnerApplicationTimestamp: number | undefined;
                        categoryIds: number[];
                    }>;
                    getDiscoveryCategories: () => Promise<Collection<number, import("../types/discord.js").DiscordDiscoveryCategory>>;
                    removeDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                    validDiscoveryTerm: (term: string) => Promise<boolean>;
                    createEmoji: (guildId: bigint, options: import("../mod.js").CreateGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                    deleteEmoji: (guildId: bigint, id: bigint, reason?: string | undefined) => Promise<void>;
                    editEmoji: (guildId: bigint, id: bigint, options: import("../mod.js").ModifyGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                    emojiUrl: (id: bigint, animated?: boolean | undefined) => string;
                    getEmoji: (guildId: bigint, emojiId: bigint) => Promise<import("./emoji.js").Emoji>;
                    getEmojis: (guildId: bigint) => Promise<Collection<bigint, import("./emoji.js").Emoji>>;
                    createScheduledEvent: (guildId: bigint, options: import("../mod.js").CreateScheduledEvent) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                    deleteScheduledEvent: (guildId: bigint, eventId: bigint) => Promise<void>;
                    editScheduledEvent: (guildId: bigint, eventId: bigint, options: Partial<import("../mod.js").EditScheduledEvent>) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                    getScheduledEvent: (guildId: bigint, eventId: bigint, options?: {
                        withUserCount?: boolean | undefined;
                    } | undefined) => Promise<import("./scheduledEvent.js").ScheduledEvent | undefined>;
                    getScheduledEvents: (guildId: bigint, options?: import("../mod.js").GetScheduledEvents | undefined) => Promise<Collection<bigint, import("./scheduledEvent.js").ScheduledEvent>>;
                    getScheduledEventUsers: (guildId: bigint, eventId: bigint, options?: (import("../mod.js").GetScheduledEventUsers & {
                        withMember: true;
                    }) | undefined) => Promise<Collection<bigint, {
                        user: User;
                        member: Member;
                    }>>;
                    getAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<import("./automodRule.js").AutoModerationRule>;
                    getAutomodRules: (guildId: bigint) => Promise<Collection<bigint, import("./automodRule.js").AutoModerationRule>>;
                    createAutomodRule: (guildId: bigint, options: import("../mod.js").CreateAutoModerationRuleOptions) => Promise<import("./automodRule.js").AutoModerationRule>;
                    editAutomodRule: (guildId: bigint, options: Partial<import("../mod.js").EditAutoModerationRuleOptions>) => Promise<import("./automodRule.js").AutoModerationRule>;
                    deleteAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<void>;
                    createGuild: (options: import("../mod.js").CreateGuild) => Promise<import("./guild.js").Guild>;
                    deleteGuild: (guildId: bigint) => Promise<void>;
                    editGuild: (guildId: bigint, options: import("../mod.js").ModifyGuild, shardId: number) => Promise<import("./guild.js").Guild>;
                    editWelcomeScreen: (guildId: bigint, options: import("../mod.js").ModifyGuildWelcomeScreen) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                    editWidget: (guildId: bigint, enabled: boolean, channelId?: string | null | undefined) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                    getAuditLogs: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => Promise<{
                        users: User[];
                        webhook: import("./webhook.js").Webhook[];
                        auditLogEntries: import("./auditLogEntry.js").AuditLogEntry[];
                        integrations: {
                            id: bigint | undefined;
                            name: string | undefined;
                            type: "twitch" | "youtube" | "discord" | undefined;
                            enabled: boolean | undefined;
                            syncing: boolean | undefined;
                            roleId: bigint | undefined;
                            enableEmoticons: boolean | undefined;
                            expireBehavior: import("../types/shared.js").IntegrationExpireBehaviors | undefined;
                            expireGracePeriod: number | undefined;
                            user: User | undefined;
                            account: {
                                id: bigint | undefined;
                                name: string | undefined;
                            };
                            syncedAt: number | undefined;
                            subscriberCount: number | undefined;
                            revoked: boolean | undefined;
                            application: {
                                id: bigint;
                                name: string;
                                icon: bigint | undefined;
                                description: string;
                                bot: User | undefined;
                            } | undefined;
                        }[];
                        threads: import("./channel.js").Channel[];
                        scheduledEvents: import("./scheduledEvent.js").ScheduledEvent[] | undefined;
                    }>;
                    getAvailableVoiceRegions: () => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                    getBan: (guildId: bigint, memberId: bigint) => Promise<{
                        reason: string | null;
                        user: User;
                    } | undefined>;
                    getBans: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => Promise<Collection<bigint, {
                        reason?: string | undefined;
                        user: User;
                    }>>;
                    getGuild: (guildId: bigint, options?: {
                        counts?: boolean | undefined;
                    } | undefined) => Promise<import("./guild.js").Guild | undefined>;
                    getGuildPreview: (guildId: bigint) => Promise<{
                        id: bigint;
                        name: string;
                        icon: string | undefined;
                        splash: string | undefined;
                        discoverySplash: string | undefined;
                        emojis: import("./emoji.js").Emoji[];
                        features: import("../types/shared.js").GuildFeatures[];
                        approximateMemberCount: number;
                        approximatePresenceCount: number;
                        description: string | undefined;
                        stickers: import("./sticker.js").Sticker[];
                    }>;
                    getPruneCount: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => Promise<number>;
                    getVanityUrl: (guildId: bigint) => Promise<{
                        uses: number | undefined;
                        code: string | undefined;
                    }>;
                    getVoiceRegions: (guildId: bigint) => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                    getWelcomeScreen: (guildId: bigint) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                    getWidget: (guildId: bigint) => Promise<import("./widget.js").GuildWidget>;
                    getWidgetImageURL: (guildId: bigint, options?: import("../mod.js").GetGuildWidgetImageQuery | undefined) => Promise<string>;
                    getWidgetSettings: (guildId: bigint) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                    guildBannerURL: (id: bigint, options: {
                        banner?: string | bigint | undefined;
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    }) => string | undefined;
                    guildIconURL: (id: bigint, icon: bigint | undefined, options?: {
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    } | undefined) => string | undefined;
                    guildSplashURL: (id: bigint, splash: bigint | undefined, options?: {
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    } | undefined) => string | undefined;
                    leaveGuild: (guildId: bigint) => Promise<void>;
                    deleteIntegration: (guildId: bigint, id: bigint) => Promise<void>;
                    getIntegrations: (guildId: bigint) => Promise<Collection<bigint, import("./integration.js").Integration>>;
                    createApplicationCommand: (options: import("../mod.js").CreateApplicationCommand | import("../mod.js").CreateContextApplicationCommand, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                    makeOptionsForCommand: () => import("../types/discord.js").DiscordApplicationCommandOption[];
                    isContextApplicationCommand: () => boolean;
                    deleteApplicationCommand: (id: bigint, guildId?: bigint | undefined) => Promise<void>;
                    deleteInteractionResponse: (token: string, messageId?: bigint | undefined) => Promise<void>;
                    editApplicationCommandPermissions: (guildId: bigint, commandId: bigint, bearerToken: string, options: import("../mod.js").ApplicationCommandPermissions[]) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                    editInteractionResponse: (token: string, options: import("../mod.js").EditWebhookMessage & {
                        messageId?: bigint | undefined;
                    }) => Promise<Message | undefined>;
                    getApplicationCommand: (commandId: bigint, options?: import("../mod.js").GetApplicationCommand | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                    getApplicationCommandPermission: (guildId: bigint, commandId: bigint) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                    getApplicationCommandPermissions: (guildId: bigint) => Promise<Collection<bigint, import("./applicationCommandPermission.js").ApplicationCommandPermission>>;
                    getApplicationCommands: (guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                    upsertApplicationCommand: (commandId: bigint, options: import("../types/shared.js").AtLeastOne<import("../mod.js").CreateContextApplicationCommand, {
                        type: Pick<import("../mod.js").CreateContextApplicationCommand, "type">;
                        description: Pick<import("../mod.js").CreateContextApplicationCommand, "description">;
                        name: Pick<import("../mod.js").CreateContextApplicationCommand, "name">;
                        nameLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "nameLocalizations"> | undefined;
                        descriptionLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "descriptionLocalizations"> | undefined;
                        defaultMemberPermissions?: Pick<import("../mod.js").CreateContextApplicationCommand, "defaultMemberPermissions"> | undefined;
                        dmPermission?: Pick<import("../mod.js").CreateContextApplicationCommand, "dmPermission"> | undefined;
                    }> | import("../types/shared.js").AtLeastOne<import("../mod.js").CreateApplicationCommand, {
                        name: Pick<import("../mod.js").CreateApplicationCommand, "name">;
                        nameLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "nameLocalizations"> | undefined;
                        description: Pick<import("../mod.js").CreateApplicationCommand, "description">;
                        descriptionLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "descriptionLocalizations"> | undefined;
                        type?: Pick<import("../mod.js").CreateApplicationCommand, "type"> | undefined;
                        options?: Pick<import("../mod.js").CreateApplicationCommand, "options"> | undefined;
                        defaultMemberPermissions?: Pick<import("../mod.js").CreateApplicationCommand, "defaultMemberPermissions"> | undefined;
                        dmPermission?: Pick<import("../mod.js").CreateApplicationCommand, "dmPermission"> | undefined;
                    }>, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                    upsertApplicationCommands: (options: (import("../mod.js").CreateContextApplicationCommand | import("../mod.js").UpsertApplicationCommands)[], guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                    deleteFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<void>;
                    editFollowupMessage: (interactionToken: string, messageId: bigint, options: import("../mod.js").EditWebhookMessage) => Promise<Message>;
                    getFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<Message>;
                    getOriginalInteractionResponse: (token: string) => Promise<Message>;
                    sendInteractionResponse: (id: bigint, token: string, options: import("../mod.js").InteractionResponse) => Promise<Message | undefined>;
                    verifySignature: () => {
                        isValid: boolean;
                        body: string;
                    };
                    createInvite: (channelId: bigint, options?: import("../mod.js").CreateChannelInvite | undefined) => Promise<{
                        code: string;
                        guildId: bigint | undefined;
                        channelId: bigint | undefined;
                        inviter: User | undefined;
                        targetType: import("../types/shared.js").TargetTypes | undefined;
                        targetUser: User | undefined;
                        targetApplicationId: bigint | undefined;
                        approximatePresenceCount: number | undefined;
                        approximateMemberCount: number | undefined;
                        expiresAt: number | undefined;
                    }>;
                    deleteInvite: (inviteCode: string) => Promise<void>;
                    getChannelInvites: (channelId: bigint) => Promise<Collection<string, {
                        uses: number;
                        maxUses: number;
                        maxAge: number;
                        temporary: boolean;
                        createdAt: number;
                    }>>;
                    getInvite: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => Promise<{
                        code: string;
                        guildId: bigint | undefined;
                        channelId: bigint | undefined;
                        inviter: User | undefined;
                        targetType: import("../types/shared.js").TargetTypes | undefined;
                        targetUser: User | undefined;
                        targetApplicationId: bigint | undefined;
                        approximatePresenceCount: number | undefined;
                        approximateMemberCount: number | undefined;
                        expiresAt: number | undefined;
                    }>;
                    getInvites: (guildId: bigint) => Promise<Collection<string, {
                        uses: number;
                        maxUses: number;
                        maxAge: number;
                        temporary: boolean;
                        createdAt: number;
                    }>>;
                    avatarURL: (userId: bigint, discriminator: string, options?: {
                        avatar: bigint | undefined;
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    } | undefined) => string;
                    banMember: (guildId: bigint, id: bigint, options?: import("../mod.js").CreateGuildBan | undefined) => Promise<void>;
                    editBotNickname: (guildId: bigint, options: {
                        nick: string | null;
                        reason?: string | undefined;
                    }) => Promise<string | undefined>;
                    editMember: (guildId: bigint, memberId: bigint, options: import("../mod.js").ModifyGuildMember) => Promise<Member>;
                    fetchMembers: (guildId: bigint, options?: Omit<import("../mod.js").RequestGuildMembers, "guildId"> | undefined) => Promise<void>;
                    getDmChannel: (userId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                    getMember: (guildId: bigint, id: bigint) => Promise<Member | undefined>;
                    getMembers: (guildId: bigint, options: import("../mod.js").ListGuildMembers) => Promise<Collection<bigint, Member>>;
                    kickMember: (guildId: bigint, memberId: bigint, reason?: string | undefined) => Promise<void>;
                    pruneMembers: (guildId: bigint, options: import("../mod.js").BeginGuildPrune) => Promise<number>;
                    searchMembers: (guildId: bigint, query: string, options?: Omit<import("../mod.js").SearchMembers, "query"> | undefined) => Promise<Collection<bigint, Member>>;
                    unbanMember: (guildId: bigint, id: bigint) => Promise<void>;
                    addReaction: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                    addReactions: (channelId: bigint, messageId: bigint, reactions: string[], ordered?: boolean | undefined) => Promise<void>;
                    deleteMessage: (channelId: bigint, messageId: bigint, reason?: string | undefined, delayMilliseconds?: number | undefined) => Promise<void>;
                    deleteMessages: (channelId: bigint, ids: bigint[], reason?: string | undefined) => Promise<void>;
                    editMessage: (channelId: bigint, messageId: bigint, content: import("../mod.js").EditMessage) => Promise<Message>;
                    getMessage: (channelId: bigint, id: bigint) => Promise<Message | undefined>;
                    getMessages: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => Promise<Collection<bigint, Message>>;
                    isGetMessagesAfter: () => boolean;
                    isGetMessagesBefore: () => boolean;
                    isGetMessagesAround: () => boolean;
                    isGetMessagesLimit: () => boolean;
                    getReactions: (channelId: bigint, messageId: bigint, reaction: string, options?: import("../mod.js").GetReactions | undefined) => Promise<Collection<bigint, User>>;
                    pinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                    publishMessage: (channelId: bigint, messageId: bigint) => Promise<Message>;
                    removeAllReactions: (channelId: bigint, messageId: bigint) => Promise<void>;
                    removeReaction: (channelId: bigint, messageId: bigint, reaction: string, options?: {
                        userId?: bigint | undefined;
                    } | undefined) => Promise<void>;
                    removeReactionEmoji: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                    sendMessage: (channelId: bigint, content: import("../mod.js").CreateMessage) => Promise<Message>;
                    unpinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                    editBotProfile: (options: {
                        username?: string | undefined;
                        botAvatarURL?: string | null | undefined;
                    }) => Promise<User>;
                    editBotStatus: (data: import("../mod.js").StatusUpdate) => Promise<void>;
                    editShardStatus: (shardId: number, data: import("../mod.js").StatusUpdate) => void;
                    getGatewayBot: () => Promise<import("./gatewayBot.js").GetGatewayBot>;
                    getUser: (userId: bigint) => Promise<User | undefined>;
                    nitroStickerPacks: () => Promise<import("./sticker.js").StickerPack[]>;
                    getApplicationInfo: () => Promise<import("./application.js").Application>;
                    addRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                    createRole: (guildId: bigint, options: import("../mod.js").CreateGuildRole, reason?: string | undefined) => Promise<Role>;
                    deleteRole: (guildId: bigint, id: bigint) => Promise<void>;
                    editRole: (guildId: bigint, id: bigint, options: import("../mod.js").EditGuildRole) => Promise<Role>;
                    getRoles: (guildId: bigint) => Promise<Collection<bigint, Role>>;
                    modifyRolePositions: (guildId: bigint, options: import("../mod.js").ModifyRolePositions[]) => Promise<Collection<bigint, Role>>;
                    removeRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                    createGuildFromTemplate: (templateCode: string, data: import("../mod.js").CreateGuildFromTemplate) => Promise<import("./guild.js").Guild>;
                    createGuildTemplate: (guildId: bigint, data: import("../mod.js").CreateTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                    deleteGuildTemplate: (guildId: bigint, templateCode: string) => Promise<void>;
                    editGuildTemplate: (guildId: bigint, templateCode: string, data: import("../mod.js").ModifyGuildTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                    getGuildTemplates: (guildId: bigint) => Promise<Collection<string, import("./template.js").Template>>;
                    getTemplate: (templateCode: string) => Promise<import("./template.js").Template>;
                    syncGuildTemplate: (guildId: bigint, templateCode: string) => Promise<import("../types/discord.js").DiscordTemplate>;
                    connectToVoiceChannel: (guildId: bigint, channelId: bigint, options?: import("../types/shared.js").AtLeastOne<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, {
                        selfDeaf: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfDeaf">;
                        selfMute: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfMute">;
                    }> | undefined) => Promise<void>;
                    createWebhook: (channelId: bigint, options: import("../mod.js").CreateWebhook) => Promise<import("./webhook.js").Webhook>;
                    deleteWebhook: (webhookId: bigint, reason?: string | undefined) => Promise<void>;
                    deleteWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").DeleteWebhookMessageOptions | undefined) => Promise<void>;
                    deleteWebhookWithToken: (webhookId: bigint, webhookToken: string) => Promise<void>;
                    editWebhook: (webhookId: bigint, options: import("../mod.js").ModifyWebhook) => Promise<import("./webhook.js").Webhook>;
                    editWebhookMessage: (webhookId: bigint, webhookToken: string, options: import("../mod.js").EditWebhookMessage & {
                        messageId?: bigint | undefined;
                        threadId?: bigint | undefined;
                    }) => Promise<Message>;
                    editWebhookWithToken: (webhookId: bigint, webhookToken: string, options: Omit<import("../mod.js").ModifyWebhook, "channelId">) => Promise<import("./webhook.js").Webhook>;
                    getWebhook: (webhookId: bigint) => Promise<import("./webhook.js").Webhook | undefined>;
                    getWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").GetWebhookMessageOptions | undefined) => Promise<Message>;
                    getWebhooks: (guildId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                    getWebhookWithToken: (webhookId: bigint, token: string) => Promise<import("./webhook.js").Webhook>;
                    sendWebhook: (webhookId: bigint, webhookToken: string, options: import("../mod.js").ExecuteWebhook) => Promise<Message | undefined>;
                };
                rest: {
                    version: number;
                    token: string;
                    debug: (text: string) => unknown;
                    customUrl: string;
                    maxRetryCount: number;
                    secretKey: string;
                    checkRateLimits: typeof import("../mod.js").checkRateLimits;
                    cleanupQueues: typeof import("../mod.js").cleanupQueues;
                    processQueue: typeof import("../mod.js").processQueue;
                    processRateLimitedPaths: typeof import("../mod.js").processRateLimitedPaths;
                    processRequestHeaders: typeof import("../mod.js").processRequestHeaders;
                    processRequest: typeof import("../mod.js").processRequest;
                    createRequestBody: typeof import("../mod.js").createRequestBody;
                    runMethod: typeof import("../mod.js").runMethod;
                    simplifyUrl: typeof import("../mod.js").simplifyUrl;
                    processGlobalQueue: typeof import("../mod.js").processGlobalQueue;
                    convertRestError: typeof import("../mod.js").convertRestError;
                    sendRequest: typeof import("../mod.js").sendRequest;
                    invalidRequests: number;
                    maxInvalidRequests: number;
                    invalidRequestsInterval: number;
                    invalidRequestsTimeoutId: number;
                    invalidRequestsSafetyAmount: number;
                    invalidRequestFrozenAt: number;
                    invalidRequestErrorStatuses: number[];
                    pathQueues: Map<string, {
                        isWaiting: boolean;
                        requests: {
                            request: import("../mod.js").RestRequest;
                            payload: import("../mod.js").RestPayload;
                        }[];
                    }>;
                    processingQueue: boolean;
                    processingRateLimitedPaths: boolean;
                    globallyRateLimited: boolean;
                    globalQueue: {
                        request: import("../mod.js").RestRequest;
                        payload: import("../mod.js").RestPayload;
                        basicURL: string;
                        urlToUse: string;
                    }[];
                    globalQueueProcessing: boolean;
                    rateLimitedPaths: Map<string, import("../mod.js").RestRateLimitedPath>;
                };
                gateway: {
                    stop: (code: number, reason: string) => Promise<void>;
                    gatewayBot: {
                        url: string;
                        shards: number;
                        sessionStartLimit: {
                            total: number;
                            remaining: number;
                            resetAfter: number;
                            maxConcurrency: number;
                        };
                    };
                    spawnShardDelay: number;
                    shardsPerWorker: number;
                    totalWorkers: number;
                    firstShardId: number;
                    lastShardId: number;
                    buckets: Collection<number, {
                        workers: {
                            id: number;
                            queue: number[];
                        }[];
                        leak: import("../util/bucket.js").LeakyBucket;
                    }>;
                    prepareBuckets: () => void;
                    spawnShards: () => void;
                    tellWorkerToIdentify: (workerId: number, shardId: number, bucketId: number) => Promise<void>;
                    debug: (text: import("../mod.js").GatewayDebugEvents, ...args: any[]) => unknown;
                    calculateTotalShards: () => number;
                    calculateWorkerId: (shardId: number) => number;
                    manager: {
                        shards: Collection<number, {
                            gatewayConfig: import("../mod.js").ShardGatewayConfig;
                            heart: import("../mod.js").ShardHeart;
                            id: number;
                            maxRequestsPerRateLimitTick: number;
                            previousSequenceNumber: number | null;
                            rateLimitResetInterval: number;
                            sessionId: string | undefined;
                            socket: import("ws") | undefined;
                            state: import("../mod.js").ShardState;
                            totalShards: number;
                            events: import("../mod.js").ShardEvents;
                            calculateSafeRequests: () => number;
                            close: (code: number, reason: string) => void;
                            connect: () => Promise<void>;
                            identify: () => Promise<void>;
                            isOpen: () => boolean;
                            makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                            resume: () => Promise<void>;
                            send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                            shutdown: () => Promise<void>;
                            bucket: import("../util/bucket.js").LeakyBucket;
                            handleClose: (close: CloseEvent) => Promise<void>;
                            handleMessage: (message: MessageEvent<any>) => Promise<void>;
                            requestIdentify: () => Promise<void>;
                            offlineSendQueue: ((_?: unknown) => void)[];
                            resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                            startHeartbeating: (interval: number) => void;
                            stopHeartbeating: () => void;
                        }>;
                        gatewayConfig: {
                            url?: string | undefined;
                            version?: number | undefined;
                            compress?: boolean | undefined;
                            intents?: number | undefined;
                            properties?: {
                                browser: string;
                                os: string;
                                device: string;
                            } | undefined;
                            token: string;
                        };
                        totalShards: number;
                        createShardOptions: {
                            state?: import("../mod.js").ShardState | undefined;
                            close?: {} | undefined;
                            resume?: {} | undefined;
                            connect?: {} | undefined;
                            calculateSafeRequests?: {} | undefined;
                            handleClose?: {} | undefined;
                            handleMessage?: {} | undefined;
                            identify?: {} | undefined;
                            isOpen?: {} | undefined;
                            makePresence?: {} | undefined;
                            maxRequestsPerRateLimitTick?: number | undefined;
                            previousSequenceNumber?: number | undefined;
                            rateLimitResetInterval?: number | undefined;
                            send?: {} | undefined;
                            shutdown?: {} | undefined;
                            startHeartbeating?: {} | undefined;
                            stopHeartbeating?: {} | undefined;
                            heart?: {
                                intervalId?: number | undefined;
                                lastAck?: number | undefined;
                                lastBeat?: number | undefined;
                                rtt?: number | undefined;
                                timeoutId?: number | undefined;
                                interval: number;
                                acknowledged: boolean;
                            } | undefined;
                            bucket?: {
                                max: number;
                                waiting: ((_?: unknown) => void)[];
                                refillInterval: number;
                                refillAmount: number;
                                tokens: () => number;
                                acquire: (amount: number, highPriority?: boolean | undefined) => Promise<void>;
                                nextRefill: () => number;
                                lastRefill: number;
                                allowAcquire: boolean;
                                tokensState: number;
                            } | undefined;
                            offlineSendQueue?: {
                                d?: unknown;
                                op: import("../types/shared.js").GatewayOpcodes;
                            }[] | undefined;
                            resolves?: {
                                [Symbol.toStringTag]: string;
                                [Symbol.iterator]: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                forEach: (callbackfn: (value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void, key: "READY" | "RESUMED" | "INVALID_SESSION", map: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>) => void, thisArg?: any) => void;
                                entries: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                keys: () => IterableIterator<"READY" | "RESUMED" | "INVALID_SESSION">;
                                values: () => IterableIterator<(payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                set: (key: "READY" | "RESUMED" | "INVALID_SESSION", value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void) => Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                clear: () => void;
                                size: number;
                                get: (key: "READY" | "RESUMED" | "INVALID_SESSION") => ((payload: import("../types/discord.js").DiscordGatewayPayload) => void) | undefined;
                                delete: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                                has: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                            } | undefined;
                            events: {
                                connected?: {} | undefined;
                                connecting?: {} | undefined;
                                disconnected?: {} | undefined;
                                heartbeat?: {} | undefined;
                                heartbeatAck?: {} | undefined;
                                hello?: {} | undefined;
                                invalidSession?: {} | undefined;
                                resuming?: {} | undefined;
                                resumed?: {} | undefined;
                                requestedReconnect?: {} | undefined;
                                identifying?: {} | undefined;
                                identified?: {} | undefined;
                                message: (shard: {
                                    gatewayConfig: import("../mod.js").ShardGatewayConfig;
                                    heart: import("../mod.js").ShardHeart;
                                    id: number;
                                    maxRequestsPerRateLimitTick: number;
                                    previousSequenceNumber: number | null;
                                    rateLimitResetInterval: number;
                                    sessionId: string | undefined;
                                    socket: import("ws") | undefined;
                                    state: import("../mod.js").ShardState;
                                    totalShards: number;
                                    events: import("../mod.js").ShardEvents;
                                    calculateSafeRequests: () => number;
                                    close: (code: number, reason: string) => void;
                                    connect: () => Promise<void>;
                                    identify: () => Promise<void>;
                                    isOpen: () => boolean;
                                    makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                                    resume: () => Promise<void>;
                                    send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                                    shutdown: () => Promise<void>;
                                    bucket: import("../util/bucket.js").LeakyBucket;
                                    handleClose: (close: CloseEvent) => Promise<void>;
                                    handleMessage: (message: MessageEvent<any>) => Promise<void>;
                                    requestIdentify: () => Promise<void>;
                                    offlineSendQueue: ((_?: unknown) => void)[];
                                    resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                    startHeartbeating: (interval: number) => void;
                                    stopHeartbeating: () => void;
                                }, payload: import("../types/discord.js").DiscordGatewayPayload) => unknown;
                            };
                        };
                        requestIdentify: (shardId: number) => Promise<void>;
                        identify: (shardId: number) => Promise<void>;
                        kill: (shardId: number) => Promise<void>;
                    };
                };
                handlers: {
                    READY: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_PINS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_BAN_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_BAN_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_EMOJIS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_INTEGRATIONS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBERS_CHUNK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_ROLE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_ROLE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_ROLE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_USER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_USER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTERACTION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INVITE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INVITE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_DELETE_BULK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_REMOVE_ALL: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_REMOVE_EMOJI: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    PRESENCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    TYPING_START: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    USER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    VOICE_SERVER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    VOICE_STATE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    WEBHOOKS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTEGRATION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTEGRATION_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTEGRATION_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    STAGE_INSTANCE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    STAGE_INSTANCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    STAGE_INSTANCE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_LIST_SYNC: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_MEMBERS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_LOADED_DD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                };
                activeGuildIds: Set<bigint>;
                cache: {
                    unrepliedInteractions: Set<bigint>;
                    fetchAllMembersProcessingRequests: Map<string, Function>;
                };
                enabledPlugins: Set<string>;
            } | undefined;
            intervalId?: number | undefined;
            filter: (value: Attachment, key: bigint, ...args: any[]) => boolean;
            interval: number;
        } | undefined;
        [Symbol.toStringTag]: string;
        [Symbol.iterator]: () => IterableIterator<[bigint, Attachment]>;
        every: (callback: (value: Attachment, key: bigint) => boolean) => boolean;
        some: (callback: (value: Attachment, key: bigint) => boolean) => boolean;
        forEach: (callbackfn: (value: Attachment, key: bigint, map: Map<bigint, Attachment>) => void, thisArg?: any) => void;
        map: <T_6>(callback: (value: Attachment, key: bigint) => T_6) => T_6[];
        filter: (callback: (value: Attachment, key: bigint) => boolean) => Collection<bigint, Attachment>;
        reduce: <T_7>(callback: (accumulator: T_7, value: Attachment, key: bigint) => T_7, initialValue?: T_7 | undefined) => T_7;
        find: (callback: (value: Attachment, key: bigint) => boolean) => Attachment | undefined;
        entries: () => IterableIterator<[bigint, Attachment]>;
        keys: () => IterableIterator<bigint>;
        values: () => IterableIterator<Attachment>;
        set: (key: bigint, value: Attachment) => Collection<bigint, Attachment>;
        clear: () => void;
        size: number;
        get: (key: bigint) => Attachment | undefined;
        startSweeper: (options: import("../util/collection.js").CollectionSweeper<bigint, Attachment>) => number;
        stopSweeper: () => void;
        changeSweeperInterval: (newInterval: number) => void;
        changeSweeperFilter: (newFilter: (value: Attachment, key: bigint, bot: Bot) => boolean) => void;
        forceSet: (key: bigint, value: Attachment) => Collection<bigint, Attachment>;
        array: () => Attachment[];
        first: () => Attachment | undefined;
        last: () => Attachment | undefined;
        random: () => Attachment | undefined;
        delete: (key: bigint) => boolean;
        has: (key: bigint) => boolean;
    } | undefined;
    messages?: {
        maxSize?: number | undefined;
        sweeper?: {
            bot?: {
                handleDiscordPayload?: {} | undefined;
                botGatewayData?: {
                    url: string;
                    shards: number;
                    sessionStartLimit: {
                        total: number;
                        remaining: number;
                        resetAfter: number;
                        maxConcurrency: number;
                    };
                } | undefined;
                id: bigint;
                constants: {
                    DISCORDENO_VERSION: string;
                    USER_AGENT: string;
                    BASE_URL: string;
                    CDN_URL: string;
                    routes: {
                        GATEWAY_BOT: () => string;
                        AUTOMOD_RULES: (guildId: bigint) => string;
                        AUTOMOD_RULE: (guildId: bigint, ruleId: bigint) => string;
                        CHANNEL: (channelId: bigint) => string;
                        CHANNEL_MESSAGE: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_MESSAGES: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => string;
                        CHANNEL_PIN: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_PINS: (channelId: bigint) => string;
                        CHANNEL_BULK_DELETE: (channelId: bigint) => string;
                        CHANNEL_INVITES: (channelId: bigint) => string;
                        CHANNEL_WEBHOOKS: (channelId: bigint) => string;
                        CHANNEL_MESSAGE_REACTION_ME: (channelId: bigint, messageId: bigint, emoji: string) => string;
                        CHANNEL_MESSAGE_REACTION_USER: (channelId: bigint, messageId: bigint, emoji: string, userId: bigint) => string;
                        CHANNEL_MESSAGE_REACTIONS: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_MESSAGE_REACTION: (channelId: bigint, messageId: bigint, emoji: string, options?: import("../mod.js").GetReactions | undefined) => string;
                        CHANNEL_FOLLOW: (channelId: bigint) => string;
                        CHANNEL_MESSAGE_CROSSPOST: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_OVERWRITE: (channelId: bigint, overwriteId: bigint) => string;
                        CHANNEL_TYPING: (channelId: bigint) => string;
                        THREAD_START_PUBLIC: (channelId: bigint, messageId: bigint) => string;
                        THREAD_START_PRIVATE: (channelId: bigint) => string;
                        THREAD_ACTIVE: (guildId: bigint) => string;
                        THREAD_MEMBERS: (channelId: bigint) => string;
                        THREAD_ME: (channelId: bigint) => string;
                        THREAD_USER: (channelId: bigint, userId: bigint) => string;
                        THREAD_ARCHIVED: (channelId: bigint) => string;
                        THREAD_ARCHIVED_PUBLIC: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                        THREAD_ARCHIVED_PRIVATE: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                        THREAD_ARCHIVED_PRIVATE_JOINED: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                        FORUM_START: (channelId: bigint) => string;
                        GUILD: (guildId: bigint, withCounts?: boolean | undefined) => string;
                        GUILDS: () => string;
                        GUILD_AUDIT_LOGS: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => string;
                        GUILD_BAN: (guildId: bigint, userId: bigint) => string;
                        GUILD_BANS: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => string;
                        GUILD_BANNER: (guildId: bigint, icon: string) => string;
                        GUILD_CHANNELS: (guildId: bigint) => string;
                        GUILD_WIDGET: (guildId: bigint) => string;
                        GUILD_WIDGET_JSON: (guildId: bigint) => string;
                        GUILD_WIDGET_IMAGE: (guildId: bigint, style?: "shield" | "banner1" | "banner2" | "banner3" | "banner4" | undefined) => string;
                        GUILD_EMOJI: (guildId: bigint, emojiId: bigint) => string;
                        GUILD_EMOJIS: (guildId: bigint) => string;
                        GUILD_ICON: (guildId: bigint, icon: string) => string;
                        GUILD_INTEGRATION: (guildId: bigint, integrationId: bigint) => string;
                        GUILD_INTEGRATION_SYNC: (guildId: bigint, integrationId: bigint) => string;
                        GUILD_INTEGRATIONS: (guildId: bigint) => string;
                        GUILD_INVITES: (guildId: bigint) => string;
                        GUILD_LEAVE: (guildId: bigint) => string;
                        GUILD_MEMBER: (guildId: bigint, userId: bigint) => string;
                        GUILD_MEMBERS: (guildId: bigint, options?: import("../mod.js").ListGuildMembers | undefined) => string;
                        GUILD_MEMBER_ROLE: (guildId: bigint, memberId: bigint, roleId: bigint) => string;
                        GUILD_MEMBERS_SEARCH: (guildId: bigint, query: string, options?: {
                            limit?: number | undefined;
                        } | undefined) => string;
                        GUILD_PRUNE: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => string;
                        GUILD_REGIONS: (guildId: bigint) => string;
                        GUILD_ROLE: (guildId: bigint, roleId: bigint) => string;
                        GUILD_ROLES: (guildId: bigint) => string;
                        GUILD_SPLASH: (guildId: bigint, icon: string) => string;
                        GUILD_VANITY_URL: (guildId: bigint) => string;
                        GUILD_WEBHOOKS: (guildId: bigint) => string;
                        TEMPLATE: (code: string) => string;
                        GUILD_TEMPLATE: (guildId: bigint, code: string) => string;
                        GUILD_TEMPLATES: (guildId: bigint) => string;
                        GUILD_PREVIEW: (guildId: bigint) => string;
                        UPDATE_VOICE_STATE: (guildId: bigint, userId?: bigint | undefined) => string;
                        GUILD_WELCOME_SCREEN: (guildId: bigint) => string;
                        GUILD_SCHEDULED_EVENTS: (guildId: bigint, withUserCount?: boolean | undefined) => string;
                        GUILD_SCHEDULED_EVENT: (guildId: bigint, eventId: bigint, withUserCount?: boolean | undefined) => string;
                        GUILD_SCHEDULED_EVENT_USERS: (guildId: bigint, eventId: bigint, options?: import("../mod.js").GetScheduledEventUsers | undefined) => string;
                        VOICE_REGIONS: () => string;
                        INVITE: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => string;
                        WEBHOOK: (webhookId: bigint, token: string, options?: {
                            wait?: boolean | undefined;
                            threadId?: bigint | undefined;
                        } | undefined) => string;
                        WEBHOOK_ID: (webhookId: bigint) => string;
                        WEBHOOK_MESSAGE: (webhookId: bigint, token: string, messageId: bigint, options?: {
                            threadId?: bigint | undefined;
                        } | undefined) => string;
                        WEBHOOK_MESSAGE_ORIGINAL: (webhookId: bigint, token: string, options?: {
                            threadId?: bigint | undefined;
                        } | undefined) => string;
                        WEBHOOK_SLACK: (webhookId: bigint, token: string) => string;
                        WEBHOOK_GITHUB: (webhookId: bigint, token: string) => string;
                        COMMANDS: (applicationId: bigint) => string;
                        COMMANDS_GUILD: (applicationId: bigint, guildId: bigint) => string;
                        COMMANDS_PERMISSIONS: (applicationId: bigint, guildId: bigint) => string;
                        COMMANDS_PERMISSION: (applicationId: bigint, guildId: bigint, commandId: bigint) => string;
                        COMMANDS_ID: (applicationId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                        COMMANDS_GUILD_ID: (applicationId: bigint, guildId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                        INTERACTION_ID_TOKEN: (interactionId: bigint, token: string) => string;
                        INTERACTION_ORIGINAL_ID_TOKEN: (interactionId: bigint, token: string) => string;
                        INTERACTION_ID_TOKEN_MESSAGE_ID: (applicationId: bigint, token: string, messageId: bigint) => string;
                        USER: (userId: bigint) => string;
                        USER_BOT: () => string;
                        USER_GUILDS: () => string;
                        USER_AVATAR: (userId: bigint, icon: string) => string;
                        USER_DEFAULT_AVATAR: (icon: number) => string;
                        USER_DM: () => string;
                        USER_CONNECTIONS: () => string;
                        USER_NICK: (guildId: bigint) => string;
                        DISCOVERY_CATEGORIES: () => string;
                        DISCOVERY_VALID_TERM: (term: string) => string;
                        DISCOVERY_METADATA: (guildId: bigint) => string;
                        DISCOVERY_SUBCATEGORY: (guildId: bigint, categoryId: number) => string;
                        OAUTH2_APPLICATION: () => string;
                        STAGE_INSTANCES: () => string;
                        STAGE_INSTANCE: (channelId: bigint) => string;
                        NITRO_STICKER_PACKS: () => string;
                    };
                    regexes: {
                        SLASH_COMMANDS_NAME_REGEX: RegExp;
                        CONTEXT_MENU_COMMANDS_NAME_REGEX: RegExp;
                        CHANNEL_MENTION_REGEX: RegExp;
                        DISCORD_SNOWFLAKE_REGEX: RegExp;
                    };
                    Errors: {
                        REQUEST_UNKNOWN_ERROR: import("../types/shared.js").Errors.REQUEST_UNKNOWN_ERROR;
                        GUILD_NOT_FOUND: import("../types/shared.js").Errors.GUILD_NOT_FOUND;
                        RULES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.RULES_CHANNEL_CANNOT_BE_DELETED;
                        UPDATES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.UPDATES_CHANNEL_CANNOT_BE_DELETED;
                        NICKNAMES_MAX_LENGTH: import("../types/shared.js").Errors.NICKNAMES_MAX_LENGTH;
                        MEMBER_NOT_IN_VOICE_CHANNEL: import("../types/shared.js").Errors.MEMBER_NOT_IN_VOICE_CHANNEL;
                        MESSAGE_MAX_LENGTH: import("../types/shared.js").Errors.MESSAGE_MAX_LENGTH;
                        BOTS_HIGHEST_ROLE_TOO_LOW: import("../types/shared.js").Errors.BOTS_HIGHEST_ROLE_TOO_LOW;
                        CHANNEL_NOT_FOUND: import("../types/shared.js").Errors.CHANNEL_NOT_FOUND;
                        CHANNEL_NOT_IN_GUILD: import("../types/shared.js").Errors.CHANNEL_NOT_IN_GUILD;
                        CHANNEL_NOT_TEXT_BASED: import("../types/shared.js").Errors.CHANNEL_NOT_TEXT_BASED;
                        CHANNEL_NOT_STAGE_VOICE: import("../types/shared.js").Errors.CHANNEL_NOT_STAGE_VOICE;
                        INVALID_TOPIC_LENGTH: import("../types/shared.js").Errors.INVALID_TOPIC_LENGTH;
                        GUILD_NOT_DISCOVERABLE: import("../types/shared.js").Errors.GUILD_NOT_DISCOVERABLE;
                        GUILD_WIDGET_NOT_ENABLED: import("../types/shared.js").Errors.GUILD_WIDGET_NOT_ENABLED;
                        MEMBER_NOT_FOUND: import("../types/shared.js").Errors.MEMBER_NOT_FOUND;
                        MEMBER_SEARCH_LIMIT_TOO_HIGH: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_HIGH;
                        MEMBER_SEARCH_LIMIT_TOO_LOW: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_LOW;
                        PRUNE_MAX_DAYS: import("../types/shared.js").Errors.PRUNE_MAX_DAYS;
                        ROLE_NOT_FOUND: import("../types/shared.js").Errors.ROLE_NOT_FOUND;
                        INVALID_THREAD_PARENT_CHANNEL_TYPE: import("../types/shared.js").Errors.INVALID_THREAD_PARENT_CHANNEL_TYPE;
                        GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS: import("../types/shared.js").Errors.GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS;
                        NOT_A_THREAD_CHANNEL: import("../types/shared.js").Errors.NOT_A_THREAD_CHANNEL;
                        MISSING_MANAGE_THREADS_AND_NOT_MEMBER: import("../types/shared.js").Errors.MISSING_MANAGE_THREADS_AND_NOT_MEMBER;
                        CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD: import("../types/shared.js").Errors.CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD;
                        HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS: import("../types/shared.js").Errors.HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS;
                        INVALID_GET_MESSAGES_LIMIT: import("../types/shared.js").Errors.INVALID_GET_MESSAGES_LIMIT;
                        DELETE_MESSAGES_MIN: import("../types/shared.js").Errors.DELETE_MESSAGES_MIN;
                        PRUNE_MIN_DAYS: import("../types/shared.js").Errors.PRUNE_MIN_DAYS;
                        INVALID_SLASH_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_DESCRIPTION;
                        INVALID_SLASH_NAME: import("../types/shared.js").Errors.INVALID_SLASH_NAME;
                        INVALID_SLASH_OPTIONS: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS;
                        INVALID_SLASH_OPTIONS_CHOICES: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICES;
                        TOO_MANY_SLASH_OPTIONS: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTIONS;
                        INVALID_SLASH_OPTION_CHOICE_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_CHOICE_NAME;
                        INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE;
                        TOO_MANY_SLASH_OPTION_CHOICES: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTION_CHOICES;
                        ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES: import("../types/shared.js").Errors.ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES;
                        INVALID_SLASH_OPTION_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_NAME;
                        INVALID_SLASH_OPTION_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_DESCRIPTION;
                        INVALID_CONTEXT_MENU_COMMAND_NAME: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_NAME;
                        INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION;
                        INVALID_WEBHOOK_NAME: import("../types/shared.js").Errors.INVALID_WEBHOOK_NAME;
                        INVALID_WEBHOOK_OPTIONS: import("../types/shared.js").Errors.INVALID_WEBHOOK_OPTIONS;
                        MISSING_ADD_REACTIONS: import("../types/shared.js").Errors.MISSING_ADD_REACTIONS;
                        MISSING_ADMINISTRATOR: import("../types/shared.js").Errors.MISSING_ADMINISTRATOR;
                        MISSING_ATTACH_FILES: import("../types/shared.js").Errors.MISSING_ATTACH_FILES;
                        MISSING_BAN_MEMBERS: import("../types/shared.js").Errors.MISSING_BAN_MEMBERS;
                        MISSING_CHANGE_NICKNAME: import("../types/shared.js").Errors.MISSING_CHANGE_NICKNAME;
                        MISSING_CONNECT: import("../types/shared.js").Errors.MISSING_CONNECT;
                        MISSING_CREATE_INSTANT_INVITE: import("../types/shared.js").Errors.MISSING_CREATE_INSTANT_INVITE;
                        MISSING_DEAFEN_MEMBERS: import("../types/shared.js").Errors.MISSING_DEAFEN_MEMBERS;
                        MISSING_EMBED_LINKS: import("../types/shared.js").Errors.MISSING_EMBED_LINKS;
                        MISSING_INTENT_GUILD_MEMBERS: import("../types/shared.js").Errors.MISSING_INTENT_GUILD_MEMBERS;
                        MISSING_KICK_MEMBERS: import("../types/shared.js").Errors.MISSING_KICK_MEMBERS;
                        MISSING_MANAGE_CHANNELS: import("../types/shared.js").Errors.MISSING_MANAGE_CHANNELS;
                        MISSING_MANAGE_EMOJIS: import("../types/shared.js").Errors.MISSING_MANAGE_EMOJIS;
                        MISSING_MANAGE_GUILD: import("../types/shared.js").Errors.MISSING_MANAGE_GUILD;
                        MISSING_MANAGE_MESSAGES: import("../types/shared.js").Errors.MISSING_MANAGE_MESSAGES;
                        MISSING_MANAGE_NICKNAMES: import("../types/shared.js").Errors.MISSING_MANAGE_NICKNAMES;
                        MISSING_MANAGE_ROLES: import("../types/shared.js").Errors.MISSING_MANAGE_ROLES;
                        MISSING_MANAGE_WEBHOOKS: import("../types/shared.js").Errors.MISSING_MANAGE_WEBHOOKS;
                        MISSING_MENTION_EVERYONE: import("../types/shared.js").Errors.MISSING_MENTION_EVERYONE;
                        MISSING_MOVE_MEMBERS: import("../types/shared.js").Errors.MISSING_MOVE_MEMBERS;
                        MISSING_MUTE_MEMBERS: import("../types/shared.js").Errors.MISSING_MUTE_MEMBERS;
                        MISSING_PRIORITY_SPEAKER: import("../types/shared.js").Errors.MISSING_PRIORITY_SPEAKER;
                        MISSING_READ_MESSAGE_HISTORY: import("../types/shared.js").Errors.MISSING_READ_MESSAGE_HISTORY;
                        MISSING_SEND_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_MESSAGES;
                        MISSING_SEND_TTS_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_TTS_MESSAGES;
                        MISSING_SPEAK: import("../types/shared.js").Errors.MISSING_SPEAK;
                        MISSING_STREAM: import("../types/shared.js").Errors.MISSING_STREAM;
                        MISSING_USE_VAD: import("../types/shared.js").Errors.MISSING_USE_VAD;
                        MISSING_USE_EXTERNAL_EMOJIS: import("../types/shared.js").Errors.MISSING_USE_EXTERNAL_EMOJIS;
                        MISSING_VIEW_AUDIT_LOG: import("../types/shared.js").Errors.MISSING_VIEW_AUDIT_LOG;
                        MISSING_VIEW_CHANNEL: import("../types/shared.js").Errors.MISSING_VIEW_CHANNEL;
                        MISSING_VIEW_GUILD_INSIGHTS: import("../types/shared.js").Errors.MISSING_VIEW_GUILD_INSIGHTS;
                        USERNAME_INVALID_CHARACTER: import("../types/shared.js").Errors.USERNAME_INVALID_CHARACTER;
                        USERNAME_INVALID_USERNAME: import("../types/shared.js").Errors.USERNAME_INVALID_USERNAME;
                        USERNAME_MAX_LENGTH: import("../types/shared.js").Errors.USERNAME_MAX_LENGTH;
                        USERNAME_MIN_LENGTH: import("../types/shared.js").Errors.USERNAME_MIN_LENGTH;
                        NONCE_TOO_LONG: import("../types/shared.js").Errors.NONCE_TOO_LONG;
                        INVITE_MAX_AGE_INVALID: import("../types/shared.js").Errors.INVITE_MAX_AGE_INVALID;
                        INVITE_MAX_USES_INVALID: import("../types/shared.js").Errors.INVITE_MAX_USES_INVALID;
                        RATE_LIMIT_RETRY_MAXED: import("../types/shared.js").Errors.RATE_LIMIT_RETRY_MAXED;
                        REQUEST_CLIENT_ERROR: import("../types/shared.js").Errors.REQUEST_CLIENT_ERROR;
                        REQUEST_SERVER_ERROR: import("../types/shared.js").Errors.REQUEST_SERVER_ERROR;
                        TOO_MANY_COMPONENTS: import("../types/shared.js").Errors.TOO_MANY_COMPONENTS;
                        TOO_MANY_ACTION_ROWS: import("../types/shared.js").Errors.TOO_MANY_ACTION_ROWS;
                        LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID: import("../types/shared.js").Errors.LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID;
                        COMPONENT_LABEL_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_LABEL_TOO_BIG;
                        COMPONENT_CUSTOM_ID_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_CUSTOM_ID_TOO_BIG;
                        BUTTON_REQUIRES_CUSTOM_ID: import("../types/shared.js").Errors.BUTTON_REQUIRES_CUSTOM_ID;
                        COMPONENT_SELECT_MUST_BE_ALONE: import("../types/shared.js").Errors.COMPONENT_SELECT_MUST_BE_ALONE;
                        COMPONENT_PLACEHOLDER_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_PLACEHOLDER_TOO_BIG;
                        COMPONENT_SELECT_MIN_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_LOW;
                        COMPONENT_SELECT_MIN_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_MANY;
                        COMPONENT_SELECT_MAX_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_LOW;
                        COMPONENT_SELECT_MAX_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_MANY;
                        COMPONENT_SELECT_OPTIONS_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_LOW;
                        COMPONENT_SELECT_OPTIONS_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_MANY;
                        SELECT_OPTION_LABEL_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_LABEL_TOO_BIG;
                        SELECT_OPTION_VALUE_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_VALUE_TOO_BIG;
                        SELECT_OPTION_TOO_MANY_DEFAULTS: import("../types/shared.js").Errors.SELECT_OPTION_TOO_MANY_DEFAULTS;
                        COMPONENT_SELECT_MIN_HIGHER_THAN_MAX: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_HIGHER_THAN_MAX;
                        CANNOT_ADD_USER_TO_ARCHIVED_THREADS: import("../types/shared.js").Errors.CANNOT_ADD_USER_TO_ARCHIVED_THREADS;
                        CANNOT_LEAVE_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_LEAVE_ARCHIVED_THREAD;
                        CANNOT_REMOVE_FROM_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_REMOVE_FROM_ARCHIVED_THREAD;
                        YOU_CAN_NOT_DM_THE_BOT_ITSELF: import("../types/shared.js").Errors.YOU_CAN_NOT_DM_THE_BOT_ITSELF;
                    };
                };
                events: import("../bot.js").EventHandlers;
                applicationId: bigint;
                token: string;
                intents: import("../types/shared.js").GatewayIntents;
                urlWSS: string;
                utils: {
                    snowflakeToBigint: typeof import("../mod.js").snowflakeToBigint;
                    bigintToSnowflake: typeof import("../mod.js").bigintToSnowflake;
                    calculateShardId: typeof import("../mod.js").calculateShardId;
                    delay: typeof import("../mod.js").delay;
                    iconHashToBigInt: typeof import("../mod.js").iconHashToBigInt;
                    iconBigintToHash: typeof import("../mod.js").iconBigintToHash;
                    validateLength: typeof import("../mod.js").validateLength;
                    urlToBase64: typeof import("../util/urlToBase64.js").urlToBase64;
                    formatImageURL: typeof import("../mod.js").formatImageURL;
                    calculateBits: typeof import("../util/permissions.js").calculateBits;
                    calculatePermissions: typeof import("../util/permissions.js").calculatePermissions;
                };
                transformers: import("../bot.js").Transformers;
                helpers: {
                    addToThread: (threadId: bigint, userId: bigint) => Promise<void>;
                    getActiveThreads: (guildId: bigint) => Promise<{
                        threads: Collection<bigint, import("./channel.js").Channel>;
                        members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                    }>;
                    getArchivedThreads: (channelId: bigint, options?: (import("../mod.js").ListArchivedThreads & {
                        type?: "private" | "public" | "privateJoinedThreads" | undefined;
                    }) | undefined) => Promise<{
                        threads: Collection<bigint, import("./channel.js").Channel>;
                        members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                        hasMore: boolean;
                    }>;
                    getThreadMember: (threadId: bigint, userId: bigint) => Promise<{
                        id: bigint | undefined;
                        userId: bigint | undefined;
                        joinTimestamp: number;
                        flags: number;
                    }>;
                    getThreadMembers: (threadId: bigint) => Promise<Collection<bigint | undefined, import("./threadMember.js").ThreadMember>>;
                    joinThread: (threadId: bigint) => Promise<void>;
                    leaveThread: (threadId: bigint) => Promise<void>;
                    removeThreadMember: (threadId: bigint, userId: bigint) => Promise<void>;
                    startThreadWithMessage: (channelId: bigint, messageId: bigint, options: import("../mod.js").StartThreadWithMessage) => Promise<import("./channel.js").Channel>;
                    startThreadWithoutMessage: (channelId: bigint, options: import("../mod.js").StartThreadWithoutMessage) => Promise<import("./channel.js").Channel>;
                    createForumPost: (channelId: bigint, options: import("../mod.js").CreateForumPostWithMessage) => Promise<import("./channel.js").Channel>;
                    createChannel: (guildId: bigint, options?: import("../mod.js").CreateGuildChannel | undefined, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                    createStageInstance: (options: import("../mod.js").CreateStageInstance) => Promise<import("./stageInstance.js").StageInstance>;
                    deleteChannel: (channelId: bigint, reason?: string | undefined) => Promise<void>;
                    deleteChannelOverwrite: (channelId: bigint, overwriteId: bigint) => Promise<void>;
                    deleteStageInstance: (channelId: bigint) => Promise<void>;
                    editChannel: (channelId: bigint, options: import("../mod.js").ModifyChannel, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                    editChannelOverwrite: (channelId: bigint, overwrite: import("../mod.js").OverwriteReadable) => Promise<void>;
                    followChannel: (sourceChannelId: bigint, targetChannelId: bigint) => Promise<bigint>;
                    getChannel: (channelId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                    getChannels: (guildId: bigint) => Promise<Collection<bigint, import("./channel.js").Channel>>;
                    getChannelWebhooks: (channelId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                    getPins: (channelId: bigint) => Promise<Message[]>;
                    getStageInstance: (channelId: bigint) => Promise<import("./stageInstance.js").StageInstance>;
                    startTyping: (channelId: bigint) => Promise<void>;
                    swapChannels: (guildId: bigint, channelPositions: import("../mod.js").ModifyGuildChannelPositions[]) => Promise<void>;
                    updateStageInstance: (channelId: bigint, data: import("../types/shared.js").AtLeastOne<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, {
                        topic: Pick<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, "topic">;
                    }>) => Promise<import("./stageInstance.js").StageInstance>;
                    updateBotVoiceState: (guildId: bigint, options: import("../mod.js").UpdateSelfVoiceState) => Promise<void>;
                    updateUserVoiceState: (guildId: bigint, options: import("../mod.js").UpdateOthersVoiceState) => Promise<void>;
                    addDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                    editDiscovery: (guildId: bigint, data: import("../mod.js").ModifyGuildDiscoveryMetadata) => Promise<{
                        guildId: bigint;
                        primaryCategoryId: number;
                        keywords: string[] | undefined;
                        emojiDiscoverabilityEnabled: boolean;
                        partnerActionedTimestamp: number | undefined;
                        partnerApplicationTimestamp: number | undefined;
                        categoryIds: number[];
                    }>;
                    getDiscovery: (guildId: bigint) => Promise<{
                        guildId: bigint;
                        primaryCategoryId: number;
                        keywords: string[] | undefined;
                        emojiDiscoverabilityEnabled: boolean;
                        partnerActionedTimestamp: number | undefined;
                        partnerApplicationTimestamp: number | undefined;
                        categoryIds: number[];
                    }>;
                    getDiscoveryCategories: () => Promise<Collection<number, import("../types/discord.js").DiscordDiscoveryCategory>>;
                    removeDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                    validDiscoveryTerm: (term: string) => Promise<boolean>;
                    createEmoji: (guildId: bigint, options: import("../mod.js").CreateGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                    deleteEmoji: (guildId: bigint, id: bigint, reason?: string | undefined) => Promise<void>;
                    editEmoji: (guildId: bigint, id: bigint, options: import("../mod.js").ModifyGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                    emojiUrl: (id: bigint, animated?: boolean | undefined) => string;
                    getEmoji: (guildId: bigint, emojiId: bigint) => Promise<import("./emoji.js").Emoji>;
                    getEmojis: (guildId: bigint) => Promise<Collection<bigint, import("./emoji.js").Emoji>>;
                    createScheduledEvent: (guildId: bigint, options: import("../mod.js").CreateScheduledEvent) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                    deleteScheduledEvent: (guildId: bigint, eventId: bigint) => Promise<void>;
                    editScheduledEvent: (guildId: bigint, eventId: bigint, options: Partial<import("../mod.js").EditScheduledEvent>) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                    getScheduledEvent: (guildId: bigint, eventId: bigint, options?: {
                        withUserCount?: boolean | undefined;
                    } | undefined) => Promise<import("./scheduledEvent.js").ScheduledEvent | undefined>;
                    getScheduledEvents: (guildId: bigint, options?: import("../mod.js").GetScheduledEvents | undefined) => Promise<Collection<bigint, import("./scheduledEvent.js").ScheduledEvent>>;
                    getScheduledEventUsers: (guildId: bigint, eventId: bigint, options?: (import("../mod.js").GetScheduledEventUsers & {
                        withMember: true;
                    }) | undefined) => Promise<Collection<bigint, {
                        user: User;
                        member: Member;
                    }>>;
                    getAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<import("./automodRule.js").AutoModerationRule>;
                    getAutomodRules: (guildId: bigint) => Promise<Collection<bigint, import("./automodRule.js").AutoModerationRule>>;
                    createAutomodRule: (guildId: bigint, options: import("../mod.js").CreateAutoModerationRuleOptions) => Promise<import("./automodRule.js").AutoModerationRule>;
                    editAutomodRule: (guildId: bigint, options: Partial<import("../mod.js").EditAutoModerationRuleOptions>) => Promise<import("./automodRule.js").AutoModerationRule>;
                    deleteAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<void>;
                    createGuild: (options: import("../mod.js").CreateGuild) => Promise<import("./guild.js").Guild>;
                    deleteGuild: (guildId: bigint) => Promise<void>;
                    editGuild: (guildId: bigint, options: import("../mod.js").ModifyGuild, shardId: number) => Promise<import("./guild.js").Guild>;
                    editWelcomeScreen: (guildId: bigint, options: import("../mod.js").ModifyGuildWelcomeScreen) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                    editWidget: (guildId: bigint, enabled: boolean, channelId?: string | null | undefined) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                    getAuditLogs: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => Promise<{
                        users: User[];
                        webhook: import("./webhook.js").Webhook[];
                        auditLogEntries: import("./auditLogEntry.js").AuditLogEntry[];
                        integrations: {
                            id: bigint | undefined;
                            name: string | undefined;
                            type: "twitch" | "youtube" | "discord" | undefined;
                            enabled: boolean | undefined;
                            syncing: boolean | undefined;
                            roleId: bigint | undefined;
                            enableEmoticons: boolean | undefined;
                            expireBehavior: import("../types/shared.js").IntegrationExpireBehaviors | undefined;
                            expireGracePeriod: number | undefined;
                            user: User | undefined;
                            account: {
                                id: bigint | undefined;
                                name: string | undefined;
                            };
                            syncedAt: number | undefined;
                            subscriberCount: number | undefined;
                            revoked: boolean | undefined;
                            application: {
                                id: bigint;
                                name: string;
                                icon: bigint | undefined;
                                description: string;
                                bot: User | undefined;
                            } | undefined;
                        }[];
                        threads: import("./channel.js").Channel[];
                        scheduledEvents: import("./scheduledEvent.js").ScheduledEvent[] | undefined;
                    }>;
                    getAvailableVoiceRegions: () => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                    getBan: (guildId: bigint, memberId: bigint) => Promise<{
                        reason: string | null;
                        user: User;
                    } | undefined>;
                    getBans: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => Promise<Collection<bigint, {
                        reason?: string | undefined;
                        user: User;
                    }>>;
                    getGuild: (guildId: bigint, options?: {
                        counts?: boolean | undefined;
                    } | undefined) => Promise<import("./guild.js").Guild | undefined>;
                    getGuildPreview: (guildId: bigint) => Promise<{
                        id: bigint;
                        name: string;
                        icon: string | undefined;
                        splash: string | undefined;
                        discoverySplash: string | undefined;
                        emojis: import("./emoji.js").Emoji[];
                        features: import("../types/shared.js").GuildFeatures[];
                        approximateMemberCount: number;
                        approximatePresenceCount: number;
                        description: string | undefined;
                        stickers: import("./sticker.js").Sticker[];
                    }>;
                    getPruneCount: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => Promise<number>;
                    getVanityUrl: (guildId: bigint) => Promise<{
                        uses: number | undefined;
                        code: string | undefined;
                    }>;
                    getVoiceRegions: (guildId: bigint) => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                    getWelcomeScreen: (guildId: bigint) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                    getWidget: (guildId: bigint) => Promise<import("./widget.js").GuildWidget>;
                    getWidgetImageURL: (guildId: bigint, options?: import("../mod.js").GetGuildWidgetImageQuery | undefined) => Promise<string>;
                    getWidgetSettings: (guildId: bigint) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                    guildBannerURL: (id: bigint, options: {
                        banner?: string | bigint | undefined;
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    }) => string | undefined;
                    guildIconURL: (id: bigint, icon: bigint | undefined, options?: {
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    } | undefined) => string | undefined;
                    guildSplashURL: (id: bigint, splash: bigint | undefined, options?: {
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    } | undefined) => string | undefined;
                    leaveGuild: (guildId: bigint) => Promise<void>;
                    deleteIntegration: (guildId: bigint, id: bigint) => Promise<void>;
                    getIntegrations: (guildId: bigint) => Promise<Collection<bigint, import("./integration.js").Integration>>;
                    createApplicationCommand: (options: import("../mod.js").CreateApplicationCommand | import("../mod.js").CreateContextApplicationCommand, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                    makeOptionsForCommand: () => import("../types/discord.js").DiscordApplicationCommandOption[];
                    isContextApplicationCommand: () => boolean;
                    deleteApplicationCommand: (id: bigint, guildId?: bigint | undefined) => Promise<void>;
                    deleteInteractionResponse: (token: string, messageId?: bigint | undefined) => Promise<void>;
                    editApplicationCommandPermissions: (guildId: bigint, commandId: bigint, bearerToken: string, options: import("../mod.js").ApplicationCommandPermissions[]) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                    editInteractionResponse: (token: string, options: import("../mod.js").EditWebhookMessage & {
                        messageId?: bigint | undefined;
                    }) => Promise<Message | undefined>;
                    getApplicationCommand: (commandId: bigint, options?: import("../mod.js").GetApplicationCommand | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                    getApplicationCommandPermission: (guildId: bigint, commandId: bigint) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                    getApplicationCommandPermissions: (guildId: bigint) => Promise<Collection<bigint, import("./applicationCommandPermission.js").ApplicationCommandPermission>>;
                    getApplicationCommands: (guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                    upsertApplicationCommand: (commandId: bigint, options: import("../types/shared.js").AtLeastOne<import("../mod.js").CreateContextApplicationCommand, {
                        type: Pick<import("../mod.js").CreateContextApplicationCommand, "type">;
                        description: Pick<import("../mod.js").CreateContextApplicationCommand, "description">;
                        name: Pick<import("../mod.js").CreateContextApplicationCommand, "name">;
                        nameLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "nameLocalizations"> | undefined;
                        descriptionLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "descriptionLocalizations"> | undefined;
                        defaultMemberPermissions?: Pick<import("../mod.js").CreateContextApplicationCommand, "defaultMemberPermissions"> | undefined;
                        dmPermission?: Pick<import("../mod.js").CreateContextApplicationCommand, "dmPermission"> | undefined;
                    }> | import("../types/shared.js").AtLeastOne<import("../mod.js").CreateApplicationCommand, {
                        name: Pick<import("../mod.js").CreateApplicationCommand, "name">;
                        nameLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "nameLocalizations"> | undefined;
                        description: Pick<import("../mod.js").CreateApplicationCommand, "description">;
                        descriptionLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "descriptionLocalizations"> | undefined;
                        type?: Pick<import("../mod.js").CreateApplicationCommand, "type"> | undefined;
                        options?: Pick<import("../mod.js").CreateApplicationCommand, "options"> | undefined;
                        defaultMemberPermissions?: Pick<import("../mod.js").CreateApplicationCommand, "defaultMemberPermissions"> | undefined;
                        dmPermission?: Pick<import("../mod.js").CreateApplicationCommand, "dmPermission"> | undefined;
                    }>, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                    upsertApplicationCommands: (options: (import("../mod.js").CreateContextApplicationCommand | import("../mod.js").UpsertApplicationCommands)[], guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                    deleteFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<void>;
                    editFollowupMessage: (interactionToken: string, messageId: bigint, options: import("../mod.js").EditWebhookMessage) => Promise<Message>;
                    getFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<Message>;
                    getOriginalInteractionResponse: (token: string) => Promise<Message>;
                    sendInteractionResponse: (id: bigint, token: string, options: import("../mod.js").InteractionResponse) => Promise<Message | undefined>;
                    verifySignature: () => {
                        isValid: boolean;
                        body: string;
                    };
                    createInvite: (channelId: bigint, options?: import("../mod.js").CreateChannelInvite | undefined) => Promise<{
                        code: string;
                        guildId: bigint | undefined;
                        channelId: bigint | undefined;
                        inviter: User | undefined;
                        targetType: import("../types/shared.js").TargetTypes | undefined;
                        targetUser: User | undefined;
                        targetApplicationId: bigint | undefined;
                        approximatePresenceCount: number | undefined;
                        approximateMemberCount: number | undefined;
                        expiresAt: number | undefined;
                    }>;
                    deleteInvite: (inviteCode: string) => Promise<void>;
                    getChannelInvites: (channelId: bigint) => Promise<Collection<string, {
                        uses: number;
                        maxUses: number;
                        maxAge: number;
                        temporary: boolean;
                        createdAt: number;
                    }>>;
                    getInvite: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => Promise<{
                        code: string;
                        guildId: bigint | undefined;
                        channelId: bigint | undefined;
                        inviter: User | undefined;
                        targetType: import("../types/shared.js").TargetTypes | undefined;
                        targetUser: User | undefined;
                        targetApplicationId: bigint | undefined;
                        approximatePresenceCount: number | undefined;
                        approximateMemberCount: number | undefined;
                        expiresAt: number | undefined;
                    }>;
                    getInvites: (guildId: bigint) => Promise<Collection<string, {
                        uses: number;
                        maxUses: number;
                        maxAge: number;
                        temporary: boolean;
                        createdAt: number;
                    }>>;
                    avatarURL: (userId: bigint, discriminator: string, options?: {
                        avatar: bigint | undefined;
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    } | undefined) => string;
                    banMember: (guildId: bigint, id: bigint, options?: import("../mod.js").CreateGuildBan | undefined) => Promise<void>;
                    editBotNickname: (guildId: bigint, options: {
                        nick: string | null;
                        reason?: string | undefined;
                    }) => Promise<string | undefined>;
                    editMember: (guildId: bigint, memberId: bigint, options: import("../mod.js").ModifyGuildMember) => Promise<Member>;
                    fetchMembers: (guildId: bigint, options?: Omit<import("../mod.js").RequestGuildMembers, "guildId"> | undefined) => Promise<void>;
                    getDmChannel: (userId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                    getMember: (guildId: bigint, id: bigint) => Promise<Member | undefined>;
                    getMembers: (guildId: bigint, options: import("../mod.js").ListGuildMembers) => Promise<Collection<bigint, Member>>;
                    kickMember: (guildId: bigint, memberId: bigint, reason?: string | undefined) => Promise<void>;
                    pruneMembers: (guildId: bigint, options: import("../mod.js").BeginGuildPrune) => Promise<number>;
                    searchMembers: (guildId: bigint, query: string, options?: Omit<import("../mod.js").SearchMembers, "query"> | undefined) => Promise<Collection<bigint, Member>>;
                    unbanMember: (guildId: bigint, id: bigint) => Promise<void>;
                    addReaction: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                    addReactions: (channelId: bigint, messageId: bigint, reactions: string[], ordered?: boolean | undefined) => Promise<void>;
                    deleteMessage: (channelId: bigint, messageId: bigint, reason?: string | undefined, delayMilliseconds?: number | undefined) => Promise<void>;
                    deleteMessages: (channelId: bigint, ids: bigint[], reason?: string | undefined) => Promise<void>;
                    editMessage: (channelId: bigint, messageId: bigint, content: import("../mod.js").EditMessage) => Promise<Message>;
                    getMessage: (channelId: bigint, id: bigint) => Promise<Message | undefined>;
                    getMessages: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => Promise<Collection<bigint, Message>>;
                    isGetMessagesAfter: () => boolean;
                    isGetMessagesBefore: () => boolean;
                    isGetMessagesAround: () => boolean;
                    isGetMessagesLimit: () => boolean;
                    getReactions: (channelId: bigint, messageId: bigint, reaction: string, options?: import("../mod.js").GetReactions | undefined) => Promise<Collection<bigint, User>>;
                    pinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                    publishMessage: (channelId: bigint, messageId: bigint) => Promise<Message>;
                    removeAllReactions: (channelId: bigint, messageId: bigint) => Promise<void>;
                    removeReaction: (channelId: bigint, messageId: bigint, reaction: string, options?: {
                        userId?: bigint | undefined;
                    } | undefined) => Promise<void>;
                    removeReactionEmoji: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                    sendMessage: (channelId: bigint, content: import("../mod.js").CreateMessage) => Promise<Message>;
                    unpinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                    editBotProfile: (options: {
                        username?: string | undefined;
                        botAvatarURL?: string | null | undefined;
                    }) => Promise<User>;
                    editBotStatus: (data: import("../mod.js").StatusUpdate) => Promise<void>;
                    editShardStatus: (shardId: number, data: import("../mod.js").StatusUpdate) => void;
                    getGatewayBot: () => Promise<import("./gatewayBot.js").GetGatewayBot>;
                    getUser: (userId: bigint) => Promise<User | undefined>;
                    nitroStickerPacks: () => Promise<import("./sticker.js").StickerPack[]>;
                    getApplicationInfo: () => Promise<import("./application.js").Application>;
                    addRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                    createRole: (guildId: bigint, options: import("../mod.js").CreateGuildRole, reason?: string | undefined) => Promise<Role>;
                    deleteRole: (guildId: bigint, id: bigint) => Promise<void>;
                    editRole: (guildId: bigint, id: bigint, options: import("../mod.js").EditGuildRole) => Promise<Role>;
                    getRoles: (guildId: bigint) => Promise<Collection<bigint, Role>>;
                    modifyRolePositions: (guildId: bigint, options: import("../mod.js").ModifyRolePositions[]) => Promise<Collection<bigint, Role>>;
                    removeRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                    createGuildFromTemplate: (templateCode: string, data: import("../mod.js").CreateGuildFromTemplate) => Promise<import("./guild.js").Guild>;
                    createGuildTemplate: (guildId: bigint, data: import("../mod.js").CreateTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                    deleteGuildTemplate: (guildId: bigint, templateCode: string) => Promise<void>;
                    editGuildTemplate: (guildId: bigint, templateCode: string, data: import("../mod.js").ModifyGuildTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                    getGuildTemplates: (guildId: bigint) => Promise<Collection<string, import("./template.js").Template>>;
                    getTemplate: (templateCode: string) => Promise<import("./template.js").Template>;
                    syncGuildTemplate: (guildId: bigint, templateCode: string) => Promise<import("../types/discord.js").DiscordTemplate>;
                    connectToVoiceChannel: (guildId: bigint, channelId: bigint, options?: import("../types/shared.js").AtLeastOne<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, {
                        selfDeaf: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfDeaf">;
                        selfMute: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfMute">;
                    }> | undefined) => Promise<void>;
                    createWebhook: (channelId: bigint, options: import("../mod.js").CreateWebhook) => Promise<import("./webhook.js").Webhook>;
                    deleteWebhook: (webhookId: bigint, reason?: string | undefined) => Promise<void>;
                    deleteWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").DeleteWebhookMessageOptions | undefined) => Promise<void>;
                    deleteWebhookWithToken: (webhookId: bigint, webhookToken: string) => Promise<void>;
                    editWebhook: (webhookId: bigint, options: import("../mod.js").ModifyWebhook) => Promise<import("./webhook.js").Webhook>;
                    editWebhookMessage: (webhookId: bigint, webhookToken: string, options: import("../mod.js").EditWebhookMessage & {
                        messageId?: bigint | undefined;
                        threadId?: bigint | undefined;
                    }) => Promise<Message>;
                    editWebhookWithToken: (webhookId: bigint, webhookToken: string, options: Omit<import("../mod.js").ModifyWebhook, "channelId">) => Promise<import("./webhook.js").Webhook>;
                    getWebhook: (webhookId: bigint) => Promise<import("./webhook.js").Webhook | undefined>;
                    getWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").GetWebhookMessageOptions | undefined) => Promise<Message>;
                    getWebhooks: (guildId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                    getWebhookWithToken: (webhookId: bigint, token: string) => Promise<import("./webhook.js").Webhook>;
                    sendWebhook: (webhookId: bigint, webhookToken: string, options: import("../mod.js").ExecuteWebhook) => Promise<Message | undefined>;
                };
                rest: {
                    version: number;
                    token: string;
                    debug: (text: string) => unknown;
                    customUrl: string;
                    maxRetryCount: number;
                    secretKey: string;
                    checkRateLimits: typeof import("../mod.js").checkRateLimits;
                    cleanupQueues: typeof import("../mod.js").cleanupQueues;
                    processQueue: typeof import("../mod.js").processQueue;
                    processRateLimitedPaths: typeof import("../mod.js").processRateLimitedPaths;
                    processRequestHeaders: typeof import("../mod.js").processRequestHeaders;
                    processRequest: typeof import("../mod.js").processRequest;
                    createRequestBody: typeof import("../mod.js").createRequestBody;
                    runMethod: typeof import("../mod.js").runMethod;
                    simplifyUrl: typeof import("../mod.js").simplifyUrl;
                    processGlobalQueue: typeof import("../mod.js").processGlobalQueue;
                    convertRestError: typeof import("../mod.js").convertRestError;
                    sendRequest: typeof import("../mod.js").sendRequest;
                    invalidRequests: number;
                    maxInvalidRequests: number;
                    invalidRequestsInterval: number;
                    invalidRequestsTimeoutId: number;
                    invalidRequestsSafetyAmount: number;
                    invalidRequestFrozenAt: number;
                    invalidRequestErrorStatuses: number[];
                    pathQueues: Map<string, {
                        isWaiting: boolean;
                        requests: {
                            request: import("../mod.js").RestRequest;
                            payload: import("../mod.js").RestPayload;
                        }[];
                    }>;
                    processingQueue: boolean;
                    processingRateLimitedPaths: boolean;
                    globallyRateLimited: boolean;
                    globalQueue: {
                        request: import("../mod.js").RestRequest;
                        payload: import("../mod.js").RestPayload;
                        basicURL: string;
                        urlToUse: string;
                    }[];
                    globalQueueProcessing: boolean;
                    rateLimitedPaths: Map<string, import("../mod.js").RestRateLimitedPath>;
                };
                gateway: {
                    stop: (code: number, reason: string) => Promise<void>;
                    gatewayBot: {
                        url: string;
                        shards: number;
                        sessionStartLimit: {
                            total: number;
                            remaining: number;
                            resetAfter: number;
                            maxConcurrency: number;
                        };
                    };
                    spawnShardDelay: number;
                    shardsPerWorker: number;
                    totalWorkers: number;
                    firstShardId: number;
                    lastShardId: number;
                    buckets: Collection<number, {
                        workers: {
                            id: number;
                            queue: number[];
                        }[];
                        leak: import("../util/bucket.js").LeakyBucket;
                    }>;
                    prepareBuckets: () => void;
                    spawnShards: () => void;
                    tellWorkerToIdentify: (workerId: number, shardId: number, bucketId: number) => Promise<void>;
                    debug: (text: import("../mod.js").GatewayDebugEvents, ...args: any[]) => unknown;
                    calculateTotalShards: () => number;
                    calculateWorkerId: (shardId: number) => number;
                    manager: {
                        shards: Collection<number, {
                            gatewayConfig: import("../mod.js").ShardGatewayConfig;
                            heart: import("../mod.js").ShardHeart;
                            id: number;
                            maxRequestsPerRateLimitTick: number;
                            previousSequenceNumber: number | null;
                            rateLimitResetInterval: number;
                            sessionId: string | undefined;
                            socket: import("ws") | undefined;
                            state: import("../mod.js").ShardState;
                            totalShards: number;
                            events: import("../mod.js").ShardEvents;
                            calculateSafeRequests: () => number;
                            close: (code: number, reason: string) => void;
                            connect: () => Promise<void>;
                            identify: () => Promise<void>;
                            isOpen: () => boolean;
                            makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                            resume: () => Promise<void>;
                            send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                            shutdown: () => Promise<void>;
                            bucket: import("../util/bucket.js").LeakyBucket;
                            handleClose: (close: CloseEvent) => Promise<void>;
                            handleMessage: (message: MessageEvent<any>) => Promise<void>;
                            requestIdentify: () => Promise<void>;
                            offlineSendQueue: ((_?: unknown) => void)[];
                            resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                            startHeartbeating: (interval: number) => void;
                            stopHeartbeating: () => void;
                        }>;
                        gatewayConfig: {
                            url?: string | undefined;
                            version?: number | undefined;
                            compress?: boolean | undefined;
                            intents?: number | undefined;
                            properties?: {
                                browser: string;
                                os: string;
                                device: string;
                            } | undefined;
                            token: string;
                        };
                        totalShards: number;
                        createShardOptions: {
                            state?: import("../mod.js").ShardState | undefined;
                            close?: {} | undefined;
                            resume?: {} | undefined;
                            connect?: {} | undefined;
                            calculateSafeRequests?: {} | undefined;
                            handleClose?: {} | undefined;
                            handleMessage?: {} | undefined;
                            identify?: {} | undefined;
                            isOpen?: {} | undefined;
                            makePresence?: {} | undefined;
                            maxRequestsPerRateLimitTick?: number | undefined;
                            previousSequenceNumber?: number | undefined;
                            rateLimitResetInterval?: number | undefined;
                            send?: {} | undefined;
                            shutdown?: {} | undefined;
                            startHeartbeating?: {} | undefined;
                            stopHeartbeating?: {} | undefined;
                            heart?: {
                                intervalId?: number | undefined;
                                lastAck?: number | undefined;
                                lastBeat?: number | undefined;
                                rtt?: number | undefined;
                                timeoutId?: number | undefined;
                                interval: number;
                                acknowledged: boolean;
                            } | undefined;
                            bucket?: {
                                max: number;
                                waiting: ((_?: unknown) => void)[];
                                refillInterval: number;
                                refillAmount: number;
                                tokens: () => number;
                                acquire: (amount: number, highPriority?: boolean | undefined) => Promise<void>;
                                nextRefill: () => number;
                                lastRefill: number;
                                allowAcquire: boolean;
                                tokensState: number;
                            } | undefined;
                            offlineSendQueue?: {
                                d?: unknown;
                                op: import("../types/shared.js").GatewayOpcodes;
                            }[] | undefined;
                            resolves?: {
                                [Symbol.toStringTag]: string;
                                [Symbol.iterator]: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                forEach: (callbackfn: (value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void, key: "READY" | "RESUMED" | "INVALID_SESSION", map: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>) => void, thisArg?: any) => void;
                                entries: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                keys: () => IterableIterator<"READY" | "RESUMED" | "INVALID_SESSION">;
                                values: () => IterableIterator<(payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                set: (key: "READY" | "RESUMED" | "INVALID_SESSION", value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void) => Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                clear: () => void;
                                size: number;
                                get: (key: "READY" | "RESUMED" | "INVALID_SESSION") => ((payload: import("../types/discord.js").DiscordGatewayPayload) => void) | undefined;
                                delete: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                                has: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                            } | undefined;
                            events: {
                                connected?: {} | undefined;
                                connecting?: {} | undefined;
                                disconnected?: {} | undefined;
                                heartbeat?: {} | undefined;
                                heartbeatAck?: {} | undefined;
                                hello?: {} | undefined;
                                invalidSession?: {} | undefined;
                                resuming?: {} | undefined;
                                resumed?: {} | undefined;
                                requestedReconnect?: {} | undefined;
                                identifying?: {} | undefined;
                                identified?: {} | undefined;
                                message: (shard: {
                                    gatewayConfig: import("../mod.js").ShardGatewayConfig;
                                    heart: import("../mod.js").ShardHeart;
                                    id: number;
                                    maxRequestsPerRateLimitTick: number;
                                    previousSequenceNumber: number | null;
                                    rateLimitResetInterval: number;
                                    sessionId: string | undefined;
                                    socket: import("ws") | undefined;
                                    state: import("../mod.js").ShardState;
                                    totalShards: number;
                                    events: import("../mod.js").ShardEvents;
                                    calculateSafeRequests: () => number;
                                    close: (code: number, reason: string) => void;
                                    connect: () => Promise<void>;
                                    identify: () => Promise<void>;
                                    isOpen: () => boolean;
                                    makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                                    resume: () => Promise<void>;
                                    send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                                    shutdown: () => Promise<void>;
                                    bucket: import("../util/bucket.js").LeakyBucket;
                                    handleClose: (close: CloseEvent) => Promise<void>;
                                    handleMessage: (message: MessageEvent<any>) => Promise<void>;
                                    requestIdentify: () => Promise<void>;
                                    offlineSendQueue: ((_?: unknown) => void)[];
                                    resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                    startHeartbeating: (interval: number) => void;
                                    stopHeartbeating: () => void;
                                }, payload: import("../types/discord.js").DiscordGatewayPayload) => unknown;
                            };
                        };
                        requestIdentify: (shardId: number) => Promise<void>;
                        identify: (shardId: number) => Promise<void>;
                        kill: (shardId: number) => Promise<void>;
                    };
                };
                handlers: {
                    READY: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_PINS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_BAN_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_BAN_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_EMOJIS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_INTEGRATIONS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBERS_CHUNK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_ROLE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_ROLE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_ROLE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_USER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_USER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTERACTION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INVITE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INVITE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_DELETE_BULK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_REMOVE_ALL: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_REMOVE_EMOJI: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    PRESENCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    TYPING_START: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    USER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    VOICE_SERVER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    VOICE_STATE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    WEBHOOKS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTEGRATION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTEGRATION_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTEGRATION_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    STAGE_INSTANCE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    STAGE_INSTANCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    STAGE_INSTANCE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_LIST_SYNC: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_MEMBERS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_LOADED_DD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                };
                activeGuildIds: Set<bigint>;
                cache: {
                    unrepliedInteractions: Set<bigint>;
                    fetchAllMembersProcessingRequests: Map<string, Function>;
                };
                enabledPlugins: Set<string>;
            } | undefined;
            intervalId?: number | undefined;
            filter: (value: Message, key: bigint, ...args: any[]) => boolean;
            interval: number;
        } | undefined;
        [Symbol.toStringTag]: string;
        [Symbol.iterator]: () => IterableIterator<[bigint, Message]>;
        every: (callback: (value: Message, key: bigint) => boolean) => boolean;
        some: (callback: (value: Message, key: bigint) => boolean) => boolean;
        forEach: (callbackfn: (value: Message, key: bigint, map: Map<bigint, Message>) => void, thisArg?: any) => void;
        map: <T_8>(callback: (value: Message, key: bigint) => T_8) => T_8[];
        filter: (callback: (value: Message, key: bigint) => boolean) => Collection<bigint, Message>;
        reduce: <T_9>(callback: (accumulator: T_9, value: Message, key: bigint) => T_9, initialValue?: T_9 | undefined) => T_9;
        find: (callback: (value: Message, key: bigint) => boolean) => Message | undefined;
        entries: () => IterableIterator<[bigint, Message]>;
        keys: () => IterableIterator<bigint>;
        values: () => IterableIterator<Message>;
        set: (key: bigint, value: Message) => Collection<bigint, Message>;
        clear: () => void;
        size: number;
        get: (key: bigint) => Message | undefined;
        startSweeper: (options: import("../util/collection.js").CollectionSweeper<bigint, Message>) => number;
        stopSweeper: () => void;
        changeSweeperInterval: (newInterval: number) => void;
        changeSweeperFilter: (newFilter: (value: Message, key: bigint, bot: Bot) => boolean) => void;
        forceSet: (key: bigint, value: Message) => Collection<bigint, Message>;
        array: () => Message[];
        first: () => Message | undefined;
        last: () => Message | undefined;
        random: () => Message | undefined;
        delete: (key: bigint) => boolean;
        has: (key: bigint) => boolean;
    } | undefined;
    users?: {
        maxSize?: number | undefined;
        sweeper?: {
            bot?: {
                handleDiscordPayload?: {} | undefined;
                botGatewayData?: {
                    url: string;
                    shards: number;
                    sessionStartLimit: {
                        total: number;
                        remaining: number;
                        resetAfter: number;
                        maxConcurrency: number;
                    };
                } | undefined;
                id: bigint;
                constants: {
                    DISCORDENO_VERSION: string;
                    USER_AGENT: string;
                    BASE_URL: string;
                    CDN_URL: string;
                    routes: {
                        GATEWAY_BOT: () => string;
                        AUTOMOD_RULES: (guildId: bigint) => string;
                        AUTOMOD_RULE: (guildId: bigint, ruleId: bigint) => string;
                        CHANNEL: (channelId: bigint) => string;
                        CHANNEL_MESSAGE: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_MESSAGES: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => string;
                        CHANNEL_PIN: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_PINS: (channelId: bigint) => string;
                        CHANNEL_BULK_DELETE: (channelId: bigint) => string;
                        CHANNEL_INVITES: (channelId: bigint) => string;
                        CHANNEL_WEBHOOKS: (channelId: bigint) => string;
                        CHANNEL_MESSAGE_REACTION_ME: (channelId: bigint, messageId: bigint, emoji: string) => string;
                        CHANNEL_MESSAGE_REACTION_USER: (channelId: bigint, messageId: bigint, emoji: string, userId: bigint) => string;
                        CHANNEL_MESSAGE_REACTIONS: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_MESSAGE_REACTION: (channelId: bigint, messageId: bigint, emoji: string, options?: import("../mod.js").GetReactions | undefined) => string;
                        CHANNEL_FOLLOW: (channelId: bigint) => string;
                        CHANNEL_MESSAGE_CROSSPOST: (channelId: bigint, messageId: bigint) => string;
                        CHANNEL_OVERWRITE: (channelId: bigint, overwriteId: bigint) => string;
                        CHANNEL_TYPING: (channelId: bigint) => string;
                        THREAD_START_PUBLIC: (channelId: bigint, messageId: bigint) => string;
                        THREAD_START_PRIVATE: (channelId: bigint) => string;
                        THREAD_ACTIVE: (guildId: bigint) => string;
                        THREAD_MEMBERS: (channelId: bigint) => string;
                        THREAD_ME: (channelId: bigint) => string;
                        THREAD_USER: (channelId: bigint, userId: bigint) => string;
                        THREAD_ARCHIVED: (channelId: bigint) => string;
                        THREAD_ARCHIVED_PUBLIC: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                        THREAD_ARCHIVED_PRIVATE: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                        THREAD_ARCHIVED_PRIVATE_JOINED: (channelId: bigint, options?: import("../mod.js").ListArchivedThreads | undefined) => string;
                        FORUM_START: (channelId: bigint) => string;
                        GUILD: (guildId: bigint, withCounts?: boolean | undefined) => string;
                        GUILDS: () => string;
                        GUILD_AUDIT_LOGS: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => string;
                        GUILD_BAN: (guildId: bigint, userId: bigint) => string;
                        GUILD_BANS: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => string;
                        GUILD_BANNER: (guildId: bigint, icon: string) => string;
                        GUILD_CHANNELS: (guildId: bigint) => string;
                        GUILD_WIDGET: (guildId: bigint) => string;
                        GUILD_WIDGET_JSON: (guildId: bigint) => string;
                        GUILD_WIDGET_IMAGE: (guildId: bigint, style?: "shield" | "banner1" | "banner2" | "banner3" | "banner4" | undefined) => string;
                        GUILD_EMOJI: (guildId: bigint, emojiId: bigint) => string;
                        GUILD_EMOJIS: (guildId: bigint) => string;
                        GUILD_ICON: (guildId: bigint, icon: string) => string;
                        GUILD_INTEGRATION: (guildId: bigint, integrationId: bigint) => string;
                        GUILD_INTEGRATION_SYNC: (guildId: bigint, integrationId: bigint) => string;
                        GUILD_INTEGRATIONS: (guildId: bigint) => string;
                        GUILD_INVITES: (guildId: bigint) => string;
                        GUILD_LEAVE: (guildId: bigint) => string;
                        GUILD_MEMBER: (guildId: bigint, userId: bigint) => string;
                        GUILD_MEMBERS: (guildId: bigint, options?: import("../mod.js").ListGuildMembers | undefined) => string;
                        GUILD_MEMBER_ROLE: (guildId: bigint, memberId: bigint, roleId: bigint) => string;
                        GUILD_MEMBERS_SEARCH: (guildId: bigint, query: string, options?: {
                            limit?: number | undefined;
                        } | undefined) => string;
                        GUILD_PRUNE: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => string;
                        GUILD_REGIONS: (guildId: bigint) => string;
                        GUILD_ROLE: (guildId: bigint, roleId: bigint) => string;
                        GUILD_ROLES: (guildId: bigint) => string;
                        GUILD_SPLASH: (guildId: bigint, icon: string) => string;
                        GUILD_VANITY_URL: (guildId: bigint) => string;
                        GUILD_WEBHOOKS: (guildId: bigint) => string;
                        TEMPLATE: (code: string) => string;
                        GUILD_TEMPLATE: (guildId: bigint, code: string) => string;
                        GUILD_TEMPLATES: (guildId: bigint) => string;
                        GUILD_PREVIEW: (guildId: bigint) => string;
                        UPDATE_VOICE_STATE: (guildId: bigint, userId?: bigint | undefined) => string;
                        GUILD_WELCOME_SCREEN: (guildId: bigint) => string;
                        GUILD_SCHEDULED_EVENTS: (guildId: bigint, withUserCount?: boolean | undefined) => string;
                        GUILD_SCHEDULED_EVENT: (guildId: bigint, eventId: bigint, withUserCount?: boolean | undefined) => string;
                        GUILD_SCHEDULED_EVENT_USERS: (guildId: bigint, eventId: bigint, options?: import("../mod.js").GetScheduledEventUsers | undefined) => string;
                        VOICE_REGIONS: () => string;
                        INVITE: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => string;
                        WEBHOOK: (webhookId: bigint, token: string, options?: {
                            wait?: boolean | undefined;
                            threadId?: bigint | undefined;
                        } | undefined) => string;
                        WEBHOOK_ID: (webhookId: bigint) => string;
                        WEBHOOK_MESSAGE: (webhookId: bigint, token: string, messageId: bigint, options?: {
                            threadId?: bigint | undefined;
                        } | undefined) => string;
                        WEBHOOK_MESSAGE_ORIGINAL: (webhookId: bigint, token: string, options?: {
                            threadId?: bigint | undefined;
                        } | undefined) => string;
                        WEBHOOK_SLACK: (webhookId: bigint, token: string) => string;
                        WEBHOOK_GITHUB: (webhookId: bigint, token: string) => string;
                        COMMANDS: (applicationId: bigint) => string;
                        COMMANDS_GUILD: (applicationId: bigint, guildId: bigint) => string;
                        COMMANDS_PERMISSIONS: (applicationId: bigint, guildId: bigint) => string;
                        COMMANDS_PERMISSION: (applicationId: bigint, guildId: bigint, commandId: bigint) => string;
                        COMMANDS_ID: (applicationId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                        COMMANDS_GUILD_ID: (applicationId: bigint, guildId: bigint, commandId: bigint, withLocalizations?: boolean | undefined) => string;
                        INTERACTION_ID_TOKEN: (interactionId: bigint, token: string) => string;
                        INTERACTION_ORIGINAL_ID_TOKEN: (interactionId: bigint, token: string) => string;
                        INTERACTION_ID_TOKEN_MESSAGE_ID: (applicationId: bigint, token: string, messageId: bigint) => string;
                        USER: (userId: bigint) => string;
                        USER_BOT: () => string;
                        USER_GUILDS: () => string;
                        USER_AVATAR: (userId: bigint, icon: string) => string;
                        USER_DEFAULT_AVATAR: (icon: number) => string;
                        USER_DM: () => string;
                        USER_CONNECTIONS: () => string;
                        USER_NICK: (guildId: bigint) => string;
                        DISCOVERY_CATEGORIES: () => string;
                        DISCOVERY_VALID_TERM: (term: string) => string;
                        DISCOVERY_METADATA: (guildId: bigint) => string;
                        DISCOVERY_SUBCATEGORY: (guildId: bigint, categoryId: number) => string;
                        OAUTH2_APPLICATION: () => string;
                        STAGE_INSTANCES: () => string;
                        STAGE_INSTANCE: (channelId: bigint) => string;
                        NITRO_STICKER_PACKS: () => string;
                    };
                    regexes: {
                        SLASH_COMMANDS_NAME_REGEX: RegExp;
                        CONTEXT_MENU_COMMANDS_NAME_REGEX: RegExp;
                        CHANNEL_MENTION_REGEX: RegExp;
                        DISCORD_SNOWFLAKE_REGEX: RegExp;
                    };
                    Errors: {
                        REQUEST_UNKNOWN_ERROR: import("../types/shared.js").Errors.REQUEST_UNKNOWN_ERROR;
                        GUILD_NOT_FOUND: import("../types/shared.js").Errors.GUILD_NOT_FOUND;
                        RULES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.RULES_CHANNEL_CANNOT_BE_DELETED;
                        UPDATES_CHANNEL_CANNOT_BE_DELETED: import("../types/shared.js").Errors.UPDATES_CHANNEL_CANNOT_BE_DELETED;
                        NICKNAMES_MAX_LENGTH: import("../types/shared.js").Errors.NICKNAMES_MAX_LENGTH;
                        MEMBER_NOT_IN_VOICE_CHANNEL: import("../types/shared.js").Errors.MEMBER_NOT_IN_VOICE_CHANNEL;
                        MESSAGE_MAX_LENGTH: import("../types/shared.js").Errors.MESSAGE_MAX_LENGTH;
                        BOTS_HIGHEST_ROLE_TOO_LOW: import("../types/shared.js").Errors.BOTS_HIGHEST_ROLE_TOO_LOW;
                        CHANNEL_NOT_FOUND: import("../types/shared.js").Errors.CHANNEL_NOT_FOUND;
                        CHANNEL_NOT_IN_GUILD: import("../types/shared.js").Errors.CHANNEL_NOT_IN_GUILD;
                        CHANNEL_NOT_TEXT_BASED: import("../types/shared.js").Errors.CHANNEL_NOT_TEXT_BASED;
                        CHANNEL_NOT_STAGE_VOICE: import("../types/shared.js").Errors.CHANNEL_NOT_STAGE_VOICE;
                        INVALID_TOPIC_LENGTH: import("../types/shared.js").Errors.INVALID_TOPIC_LENGTH;
                        GUILD_NOT_DISCOVERABLE: import("../types/shared.js").Errors.GUILD_NOT_DISCOVERABLE;
                        GUILD_WIDGET_NOT_ENABLED: import("../types/shared.js").Errors.GUILD_WIDGET_NOT_ENABLED;
                        MEMBER_NOT_FOUND: import("../types/shared.js").Errors.MEMBER_NOT_FOUND;
                        MEMBER_SEARCH_LIMIT_TOO_HIGH: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_HIGH;
                        MEMBER_SEARCH_LIMIT_TOO_LOW: import("../types/shared.js").Errors.MEMBER_SEARCH_LIMIT_TOO_LOW;
                        PRUNE_MAX_DAYS: import("../types/shared.js").Errors.PRUNE_MAX_DAYS;
                        ROLE_NOT_FOUND: import("../types/shared.js").Errors.ROLE_NOT_FOUND;
                        INVALID_THREAD_PARENT_CHANNEL_TYPE: import("../types/shared.js").Errors.INVALID_THREAD_PARENT_CHANNEL_TYPE;
                        GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS: import("../types/shared.js").Errors.GUILD_NEWS_CHANNEL_ONLY_SUPPORT_PUBLIC_THREADS;
                        NOT_A_THREAD_CHANNEL: import("../types/shared.js").Errors.NOT_A_THREAD_CHANNEL;
                        MISSING_MANAGE_THREADS_AND_NOT_MEMBER: import("../types/shared.js").Errors.MISSING_MANAGE_THREADS_AND_NOT_MEMBER;
                        CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD: import("../types/shared.js").Errors.CANNOT_GET_MEMBERS_OF_AN_UNJOINED_PRIVATE_THREAD;
                        HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS: import("../types/shared.js").Errors.HAVE_TO_BE_THE_CREATOR_OF_THE_THREAD_OR_HAVE_MANAGE_THREADS_TO_REMOVE_MEMBERS;
                        INVALID_GET_MESSAGES_LIMIT: import("../types/shared.js").Errors.INVALID_GET_MESSAGES_LIMIT;
                        DELETE_MESSAGES_MIN: import("../types/shared.js").Errors.DELETE_MESSAGES_MIN;
                        PRUNE_MIN_DAYS: import("../types/shared.js").Errors.PRUNE_MIN_DAYS;
                        INVALID_SLASH_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_DESCRIPTION;
                        INVALID_SLASH_NAME: import("../types/shared.js").Errors.INVALID_SLASH_NAME;
                        INVALID_SLASH_OPTIONS: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS;
                        INVALID_SLASH_OPTIONS_CHOICES: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICES;
                        TOO_MANY_SLASH_OPTIONS: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTIONS;
                        INVALID_SLASH_OPTION_CHOICE_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_CHOICE_NAME;
                        INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE: import("../types/shared.js").Errors.INVALID_SLASH_OPTIONS_CHOICE_VALUE_TYPE;
                        TOO_MANY_SLASH_OPTION_CHOICES: import("../types/shared.js").Errors.TOO_MANY_SLASH_OPTION_CHOICES;
                        ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES: import("../types/shared.js").Errors.ONLY_STRING_OR_INTEGER_OPTIONS_CAN_HAVE_CHOICES;
                        INVALID_SLASH_OPTION_NAME: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_NAME;
                        INVALID_SLASH_OPTION_DESCRIPTION: import("../types/shared.js").Errors.INVALID_SLASH_OPTION_DESCRIPTION;
                        INVALID_CONTEXT_MENU_COMMAND_NAME: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_NAME;
                        INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION: import("../types/shared.js").Errors.INVALID_CONTEXT_MENU_COMMAND_DESCRIPTION;
                        INVALID_WEBHOOK_NAME: import("../types/shared.js").Errors.INVALID_WEBHOOK_NAME;
                        INVALID_WEBHOOK_OPTIONS: import("../types/shared.js").Errors.INVALID_WEBHOOK_OPTIONS;
                        MISSING_ADD_REACTIONS: import("../types/shared.js").Errors.MISSING_ADD_REACTIONS;
                        MISSING_ADMINISTRATOR: import("../types/shared.js").Errors.MISSING_ADMINISTRATOR;
                        MISSING_ATTACH_FILES: import("../types/shared.js").Errors.MISSING_ATTACH_FILES;
                        MISSING_BAN_MEMBERS: import("../types/shared.js").Errors.MISSING_BAN_MEMBERS;
                        MISSING_CHANGE_NICKNAME: import("../types/shared.js").Errors.MISSING_CHANGE_NICKNAME;
                        MISSING_CONNECT: import("../types/shared.js").Errors.MISSING_CONNECT;
                        MISSING_CREATE_INSTANT_INVITE: import("../types/shared.js").Errors.MISSING_CREATE_INSTANT_INVITE;
                        MISSING_DEAFEN_MEMBERS: import("../types/shared.js").Errors.MISSING_DEAFEN_MEMBERS;
                        MISSING_EMBED_LINKS: import("../types/shared.js").Errors.MISSING_EMBED_LINKS;
                        MISSING_INTENT_GUILD_MEMBERS: import("../types/shared.js").Errors.MISSING_INTENT_GUILD_MEMBERS;
                        MISSING_KICK_MEMBERS: import("../types/shared.js").Errors.MISSING_KICK_MEMBERS;
                        MISSING_MANAGE_CHANNELS: import("../types/shared.js").Errors.MISSING_MANAGE_CHANNELS;
                        MISSING_MANAGE_EMOJIS: import("../types/shared.js").Errors.MISSING_MANAGE_EMOJIS;
                        MISSING_MANAGE_GUILD: import("../types/shared.js").Errors.MISSING_MANAGE_GUILD;
                        MISSING_MANAGE_MESSAGES: import("../types/shared.js").Errors.MISSING_MANAGE_MESSAGES;
                        MISSING_MANAGE_NICKNAMES: import("../types/shared.js").Errors.MISSING_MANAGE_NICKNAMES;
                        MISSING_MANAGE_ROLES: import("../types/shared.js").Errors.MISSING_MANAGE_ROLES;
                        MISSING_MANAGE_WEBHOOKS: import("../types/shared.js").Errors.MISSING_MANAGE_WEBHOOKS;
                        MISSING_MENTION_EVERYONE: import("../types/shared.js").Errors.MISSING_MENTION_EVERYONE;
                        MISSING_MOVE_MEMBERS: import("../types/shared.js").Errors.MISSING_MOVE_MEMBERS;
                        MISSING_MUTE_MEMBERS: import("../types/shared.js").Errors.MISSING_MUTE_MEMBERS;
                        MISSING_PRIORITY_SPEAKER: import("../types/shared.js").Errors.MISSING_PRIORITY_SPEAKER;
                        MISSING_READ_MESSAGE_HISTORY: import("../types/shared.js").Errors.MISSING_READ_MESSAGE_HISTORY;
                        MISSING_SEND_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_MESSAGES;
                        MISSING_SEND_TTS_MESSAGES: import("../types/shared.js").Errors.MISSING_SEND_TTS_MESSAGES;
                        MISSING_SPEAK: import("../types/shared.js").Errors.MISSING_SPEAK;
                        MISSING_STREAM: import("../types/shared.js").Errors.MISSING_STREAM;
                        MISSING_USE_VAD: import("../types/shared.js").Errors.MISSING_USE_VAD;
                        MISSING_USE_EXTERNAL_EMOJIS: import("../types/shared.js").Errors.MISSING_USE_EXTERNAL_EMOJIS;
                        MISSING_VIEW_AUDIT_LOG: import("../types/shared.js").Errors.MISSING_VIEW_AUDIT_LOG;
                        MISSING_VIEW_CHANNEL: import("../types/shared.js").Errors.MISSING_VIEW_CHANNEL;
                        MISSING_VIEW_GUILD_INSIGHTS: import("../types/shared.js").Errors.MISSING_VIEW_GUILD_INSIGHTS;
                        USERNAME_INVALID_CHARACTER: import("../types/shared.js").Errors.USERNAME_INVALID_CHARACTER;
                        USERNAME_INVALID_USERNAME: import("../types/shared.js").Errors.USERNAME_INVALID_USERNAME;
                        USERNAME_MAX_LENGTH: import("../types/shared.js").Errors.USERNAME_MAX_LENGTH;
                        USERNAME_MIN_LENGTH: import("../types/shared.js").Errors.USERNAME_MIN_LENGTH;
                        NONCE_TOO_LONG: import("../types/shared.js").Errors.NONCE_TOO_LONG;
                        INVITE_MAX_AGE_INVALID: import("../types/shared.js").Errors.INVITE_MAX_AGE_INVALID;
                        INVITE_MAX_USES_INVALID: import("../types/shared.js").Errors.INVITE_MAX_USES_INVALID;
                        RATE_LIMIT_RETRY_MAXED: import("../types/shared.js").Errors.RATE_LIMIT_RETRY_MAXED;
                        REQUEST_CLIENT_ERROR: import("../types/shared.js").Errors.REQUEST_CLIENT_ERROR;
                        REQUEST_SERVER_ERROR: import("../types/shared.js").Errors.REQUEST_SERVER_ERROR;
                        TOO_MANY_COMPONENTS: import("../types/shared.js").Errors.TOO_MANY_COMPONENTS;
                        TOO_MANY_ACTION_ROWS: import("../types/shared.js").Errors.TOO_MANY_ACTION_ROWS;
                        LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID: import("../types/shared.js").Errors.LINK_BUTTON_CANNOT_HAVE_CUSTOM_ID;
                        COMPONENT_LABEL_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_LABEL_TOO_BIG;
                        COMPONENT_CUSTOM_ID_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_CUSTOM_ID_TOO_BIG;
                        BUTTON_REQUIRES_CUSTOM_ID: import("../types/shared.js").Errors.BUTTON_REQUIRES_CUSTOM_ID;
                        COMPONENT_SELECT_MUST_BE_ALONE: import("../types/shared.js").Errors.COMPONENT_SELECT_MUST_BE_ALONE;
                        COMPONENT_PLACEHOLDER_TOO_BIG: import("../types/shared.js").Errors.COMPONENT_PLACEHOLDER_TOO_BIG;
                        COMPONENT_SELECT_MIN_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_LOW;
                        COMPONENT_SELECT_MIN_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_VALUE_TOO_MANY;
                        COMPONENT_SELECT_MAX_VALUE_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_LOW;
                        COMPONENT_SELECT_MAX_VALUE_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_MAX_VALUE_TOO_MANY;
                        COMPONENT_SELECT_OPTIONS_TOO_LOW: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_LOW;
                        COMPONENT_SELECT_OPTIONS_TOO_MANY: import("../types/shared.js").Errors.COMPONENT_SELECT_OPTIONS_TOO_MANY;
                        SELECT_OPTION_LABEL_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_LABEL_TOO_BIG;
                        SELECT_OPTION_VALUE_TOO_BIG: import("../types/shared.js").Errors.SELECT_OPTION_VALUE_TOO_BIG;
                        SELECT_OPTION_TOO_MANY_DEFAULTS: import("../types/shared.js").Errors.SELECT_OPTION_TOO_MANY_DEFAULTS;
                        COMPONENT_SELECT_MIN_HIGHER_THAN_MAX: import("../types/shared.js").Errors.COMPONENT_SELECT_MIN_HIGHER_THAN_MAX;
                        CANNOT_ADD_USER_TO_ARCHIVED_THREADS: import("../types/shared.js").Errors.CANNOT_ADD_USER_TO_ARCHIVED_THREADS;
                        CANNOT_LEAVE_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_LEAVE_ARCHIVED_THREAD;
                        CANNOT_REMOVE_FROM_ARCHIVED_THREAD: import("../types/shared.js").Errors.CANNOT_REMOVE_FROM_ARCHIVED_THREAD;
                        YOU_CAN_NOT_DM_THE_BOT_ITSELF: import("../types/shared.js").Errors.YOU_CAN_NOT_DM_THE_BOT_ITSELF;
                    };
                };
                events: import("../bot.js").EventHandlers;
                applicationId: bigint;
                token: string;
                intents: import("../types/shared.js").GatewayIntents;
                urlWSS: string;
                utils: {
                    snowflakeToBigint: typeof import("../mod.js").snowflakeToBigint;
                    bigintToSnowflake: typeof import("../mod.js").bigintToSnowflake;
                    calculateShardId: typeof import("../mod.js").calculateShardId;
                    delay: typeof import("../mod.js").delay;
                    iconHashToBigInt: typeof import("../mod.js").iconHashToBigInt;
                    iconBigintToHash: typeof import("../mod.js").iconBigintToHash;
                    validateLength: typeof import("../mod.js").validateLength;
                    urlToBase64: typeof import("../util/urlToBase64.js").urlToBase64;
                    formatImageURL: typeof import("../mod.js").formatImageURL;
                    calculateBits: typeof import("../util/permissions.js").calculateBits;
                    calculatePermissions: typeof import("../util/permissions.js").calculatePermissions;
                };
                transformers: import("../bot.js").Transformers;
                helpers: {
                    addToThread: (threadId: bigint, userId: bigint) => Promise<void>;
                    getActiveThreads: (guildId: bigint) => Promise<{
                        threads: Collection<bigint, import("./channel.js").Channel>;
                        members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                    }>;
                    getArchivedThreads: (channelId: bigint, options?: (import("../mod.js").ListArchivedThreads & {
                        type?: "private" | "public" | "privateJoinedThreads" | undefined;
                    }) | undefined) => Promise<{
                        threads: Collection<bigint, import("./channel.js").Channel>;
                        members: Collection<bigint | undefined, import("./threadMember.js").ThreadMember>;
                        hasMore: boolean;
                    }>;
                    getThreadMember: (threadId: bigint, userId: bigint) => Promise<{
                        id: bigint | undefined;
                        userId: bigint | undefined;
                        joinTimestamp: number;
                        flags: number;
                    }>;
                    getThreadMembers: (threadId: bigint) => Promise<Collection<bigint | undefined, import("./threadMember.js").ThreadMember>>;
                    joinThread: (threadId: bigint) => Promise<void>;
                    leaveThread: (threadId: bigint) => Promise<void>;
                    removeThreadMember: (threadId: bigint, userId: bigint) => Promise<void>;
                    startThreadWithMessage: (channelId: bigint, messageId: bigint, options: import("../mod.js").StartThreadWithMessage) => Promise<import("./channel.js").Channel>;
                    startThreadWithoutMessage: (channelId: bigint, options: import("../mod.js").StartThreadWithoutMessage) => Promise<import("./channel.js").Channel>;
                    createForumPost: (channelId: bigint, options: import("../mod.js").CreateForumPostWithMessage) => Promise<import("./channel.js").Channel>;
                    createChannel: (guildId: bigint, options?: import("../mod.js").CreateGuildChannel | undefined, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                    createStageInstance: (options: import("../mod.js").CreateStageInstance) => Promise<import("./stageInstance.js").StageInstance>;
                    deleteChannel: (channelId: bigint, reason?: string | undefined) => Promise<void>;
                    deleteChannelOverwrite: (channelId: bigint, overwriteId: bigint) => Promise<void>;
                    deleteStageInstance: (channelId: bigint) => Promise<void>;
                    editChannel: (channelId: bigint, options: import("../mod.js").ModifyChannel, reason?: string | undefined) => Promise<import("./channel.js").Channel>;
                    editChannelOverwrite: (channelId: bigint, overwrite: import("../mod.js").OverwriteReadable) => Promise<void>;
                    followChannel: (sourceChannelId: bigint, targetChannelId: bigint) => Promise<bigint>;
                    getChannel: (channelId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                    getChannels: (guildId: bigint) => Promise<Collection<bigint, import("./channel.js").Channel>>;
                    getChannelWebhooks: (channelId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                    getPins: (channelId: bigint) => Promise<Message[]>;
                    getStageInstance: (channelId: bigint) => Promise<import("./stageInstance.js").StageInstance>;
                    startTyping: (channelId: bigint) => Promise<void>;
                    swapChannels: (guildId: bigint, channelPositions: import("../mod.js").ModifyGuildChannelPositions[]) => Promise<void>;
                    updateStageInstance: (channelId: bigint, data: import("../types/shared.js").AtLeastOne<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, {
                        topic: Pick<Pick<import("../types/discord.js").DiscordStageInstance, "topic">, "topic">;
                    }>) => Promise<import("./stageInstance.js").StageInstance>;
                    updateBotVoiceState: (guildId: bigint, options: import("../mod.js").UpdateSelfVoiceState) => Promise<void>;
                    updateUserVoiceState: (guildId: bigint, options: import("../mod.js").UpdateOthersVoiceState) => Promise<void>;
                    addDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                    editDiscovery: (guildId: bigint, data: import("../mod.js").ModifyGuildDiscoveryMetadata) => Promise<{
                        guildId: bigint;
                        primaryCategoryId: number;
                        keywords: string[] | undefined;
                        emojiDiscoverabilityEnabled: boolean;
                        partnerActionedTimestamp: number | undefined;
                        partnerApplicationTimestamp: number | undefined;
                        categoryIds: number[];
                    }>;
                    getDiscovery: (guildId: bigint) => Promise<{
                        guildId: bigint;
                        primaryCategoryId: number;
                        keywords: string[] | undefined;
                        emojiDiscoverabilityEnabled: boolean;
                        partnerActionedTimestamp: number | undefined;
                        partnerApplicationTimestamp: number | undefined;
                        categoryIds: number[];
                    }>;
                    getDiscoveryCategories: () => Promise<Collection<number, import("../types/discord.js").DiscordDiscoveryCategory>>;
                    removeDiscoverySubcategory: (guildId: bigint, categoryId: number) => Promise<void>;
                    validDiscoveryTerm: (term: string) => Promise<boolean>;
                    createEmoji: (guildId: bigint, options: import("../mod.js").CreateGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                    deleteEmoji: (guildId: bigint, id: bigint, reason?: string | undefined) => Promise<void>;
                    editEmoji: (guildId: bigint, id: bigint, options: import("../mod.js").ModifyGuildEmoji) => Promise<import("./emoji.js").Emoji>;
                    emojiUrl: (id: bigint, animated?: boolean | undefined) => string;
                    getEmoji: (guildId: bigint, emojiId: bigint) => Promise<import("./emoji.js").Emoji>;
                    getEmojis: (guildId: bigint) => Promise<Collection<bigint, import("./emoji.js").Emoji>>;
                    createScheduledEvent: (guildId: bigint, options: import("../mod.js").CreateScheduledEvent) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                    deleteScheduledEvent: (guildId: bigint, eventId: bigint) => Promise<void>;
                    editScheduledEvent: (guildId: bigint, eventId: bigint, options: Partial<import("../mod.js").EditScheduledEvent>) => Promise<import("./scheduledEvent.js").ScheduledEvent>;
                    getScheduledEvent: (guildId: bigint, eventId: bigint, options?: {
                        withUserCount?: boolean | undefined;
                    } | undefined) => Promise<import("./scheduledEvent.js").ScheduledEvent | undefined>;
                    getScheduledEvents: (guildId: bigint, options?: import("../mod.js").GetScheduledEvents | undefined) => Promise<Collection<bigint, import("./scheduledEvent.js").ScheduledEvent>>;
                    getScheduledEventUsers: (guildId: bigint, eventId: bigint, options?: (import("../mod.js").GetScheduledEventUsers & {
                        withMember: true;
                    }) | undefined) => Promise<Collection<bigint, {
                        user: User;
                        member: Member;
                    }>>;
                    getAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<import("./automodRule.js").AutoModerationRule>;
                    getAutomodRules: (guildId: bigint) => Promise<Collection<bigint, import("./automodRule.js").AutoModerationRule>>;
                    createAutomodRule: (guildId: bigint, options: import("../mod.js").CreateAutoModerationRuleOptions) => Promise<import("./automodRule.js").AutoModerationRule>;
                    editAutomodRule: (guildId: bigint, options: Partial<import("../mod.js").EditAutoModerationRuleOptions>) => Promise<import("./automodRule.js").AutoModerationRule>;
                    deleteAutomodRule: (guildId: bigint, ruleId: bigint) => Promise<void>;
                    createGuild: (options: import("../mod.js").CreateGuild) => Promise<import("./guild.js").Guild>;
                    deleteGuild: (guildId: bigint) => Promise<void>;
                    editGuild: (guildId: bigint, options: import("../mod.js").ModifyGuild, shardId: number) => Promise<import("./guild.js").Guild>;
                    editWelcomeScreen: (guildId: bigint, options: import("../mod.js").ModifyGuildWelcomeScreen) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                    editWidget: (guildId: bigint, enabled: boolean, channelId?: string | null | undefined) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                    getAuditLogs: (guildId: bigint, options?: import("../mod.js").GetGuildAuditLog | undefined) => Promise<{
                        users: User[];
                        webhook: import("./webhook.js").Webhook[];
                        auditLogEntries: import("./auditLogEntry.js").AuditLogEntry[];
                        integrations: {
                            id: bigint | undefined;
                            name: string | undefined;
                            type: "twitch" | "youtube" | "discord" | undefined;
                            enabled: boolean | undefined;
                            syncing: boolean | undefined;
                            roleId: bigint | undefined;
                            enableEmoticons: boolean | undefined;
                            expireBehavior: import("../types/shared.js").IntegrationExpireBehaviors | undefined;
                            expireGracePeriod: number | undefined;
                            user: User | undefined;
                            account: {
                                id: bigint | undefined;
                                name: string | undefined;
                            };
                            syncedAt: number | undefined;
                            subscriberCount: number | undefined;
                            revoked: boolean | undefined;
                            application: {
                                id: bigint;
                                name: string;
                                icon: bigint | undefined;
                                description: string;
                                bot: User | undefined;
                            } | undefined;
                        }[];
                        threads: import("./channel.js").Channel[];
                        scheduledEvents: import("./scheduledEvent.js").ScheduledEvent[] | undefined;
                    }>;
                    getAvailableVoiceRegions: () => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                    getBan: (guildId: bigint, memberId: bigint) => Promise<{
                        reason: string | null;
                        user: User;
                    } | undefined>;
                    getBans: (guildId: bigint, options?: import("../mod.js").GetBans | undefined) => Promise<Collection<bigint, {
                        reason?: string | undefined;
                        user: User;
                    }>>;
                    getGuild: (guildId: bigint, options?: {
                        counts?: boolean | undefined;
                    } | undefined) => Promise<import("./guild.js").Guild | undefined>;
                    getGuildPreview: (guildId: bigint) => Promise<{
                        id: bigint;
                        name: string;
                        icon: string | undefined;
                        splash: string | undefined;
                        discoverySplash: string | undefined;
                        emojis: import("./emoji.js").Emoji[];
                        features: import("../types/shared.js").GuildFeatures[];
                        approximateMemberCount: number;
                        approximatePresenceCount: number;
                        description: string | undefined;
                        stickers: import("./sticker.js").Sticker[];
                    }>;
                    getPruneCount: (guildId: bigint, options?: import("../mod.js").GetGuildPruneCountQuery | undefined) => Promise<number>;
                    getVanityUrl: (guildId: bigint) => Promise<{
                        uses: number | undefined;
                        code: string | undefined;
                    }>;
                    getVoiceRegions: (guildId: bigint) => Promise<Collection<string, import("./voiceRegion.js").VoiceRegions>>;
                    getWelcomeScreen: (guildId: bigint) => Promise<import("./welcomeScreen.js").WelcomeScreen>;
                    getWidget: (guildId: bigint) => Promise<import("./widget.js").GuildWidget>;
                    getWidgetImageURL: (guildId: bigint, options?: import("../mod.js").GetGuildWidgetImageQuery | undefined) => Promise<string>;
                    getWidgetSettings: (guildId: bigint) => Promise<import("./widgetSettings.js").GuildWidgetSettings>;
                    guildBannerURL: (id: bigint, options: {
                        banner?: string | bigint | undefined;
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    }) => string | undefined;
                    guildIconURL: (id: bigint, icon: bigint | undefined, options?: {
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    } | undefined) => string | undefined;
                    guildSplashURL: (id: bigint, splash: bigint | undefined, options?: {
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    } | undefined) => string | undefined;
                    leaveGuild: (guildId: bigint) => Promise<void>;
                    deleteIntegration: (guildId: bigint, id: bigint) => Promise<void>;
                    getIntegrations: (guildId: bigint) => Promise<Collection<bigint, import("./integration.js").Integration>>;
                    createApplicationCommand: (options: import("../mod.js").CreateApplicationCommand | import("../mod.js").CreateContextApplicationCommand, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                    makeOptionsForCommand: () => import("../types/discord.js").DiscordApplicationCommandOption[];
                    isContextApplicationCommand: () => boolean;
                    deleteApplicationCommand: (id: bigint, guildId?: bigint | undefined) => Promise<void>;
                    deleteInteractionResponse: (token: string, messageId?: bigint | undefined) => Promise<void>;
                    editApplicationCommandPermissions: (guildId: bigint, commandId: bigint, bearerToken: string, options: import("../mod.js").ApplicationCommandPermissions[]) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                    editInteractionResponse: (token: string, options: import("../mod.js").EditWebhookMessage & {
                        messageId?: bigint | undefined;
                    }) => Promise<Message | undefined>;
                    getApplicationCommand: (commandId: bigint, options?: import("../mod.js").GetApplicationCommand | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                    getApplicationCommandPermission: (guildId: bigint, commandId: bigint) => Promise<import("./applicationCommandPermission.js").ApplicationCommandPermission>;
                    getApplicationCommandPermissions: (guildId: bigint) => Promise<Collection<bigint, import("./applicationCommandPermission.js").ApplicationCommandPermission>>;
                    getApplicationCommands: (guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                    upsertApplicationCommand: (commandId: bigint, options: import("../types/shared.js").AtLeastOne<import("../mod.js").CreateContextApplicationCommand, {
                        type: Pick<import("../mod.js").CreateContextApplicationCommand, "type">;
                        description: Pick<import("../mod.js").CreateContextApplicationCommand, "description">;
                        name: Pick<import("../mod.js").CreateContextApplicationCommand, "name">;
                        nameLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "nameLocalizations"> | undefined;
                        descriptionLocalizations?: Pick<import("../mod.js").CreateContextApplicationCommand, "descriptionLocalizations"> | undefined;
                        defaultMemberPermissions?: Pick<import("../mod.js").CreateContextApplicationCommand, "defaultMemberPermissions"> | undefined;
                        dmPermission?: Pick<import("../mod.js").CreateContextApplicationCommand, "dmPermission"> | undefined;
                    }> | import("../types/shared.js").AtLeastOne<import("../mod.js").CreateApplicationCommand, {
                        name: Pick<import("../mod.js").CreateApplicationCommand, "name">;
                        nameLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "nameLocalizations"> | undefined;
                        description: Pick<import("../mod.js").CreateApplicationCommand, "description">;
                        descriptionLocalizations?: Pick<import("../mod.js").CreateApplicationCommand, "descriptionLocalizations"> | undefined;
                        type?: Pick<import("../mod.js").CreateApplicationCommand, "type"> | undefined;
                        options?: Pick<import("../mod.js").CreateApplicationCommand, "options"> | undefined;
                        defaultMemberPermissions?: Pick<import("../mod.js").CreateApplicationCommand, "defaultMemberPermissions"> | undefined;
                        dmPermission?: Pick<import("../mod.js").CreateApplicationCommand, "dmPermission"> | undefined;
                    }>, guildId?: bigint | undefined) => Promise<import("./applicationCommand.js").ApplicationCommand>;
                    upsertApplicationCommands: (options: (import("../mod.js").CreateContextApplicationCommand | import("../mod.js").UpsertApplicationCommands)[], guildId?: bigint | undefined) => Promise<Collection<bigint, import("./applicationCommand.js").ApplicationCommand>>;
                    deleteFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<void>;
                    editFollowupMessage: (interactionToken: string, messageId: bigint, options: import("../mod.js").EditWebhookMessage) => Promise<Message>;
                    getFollowupMessage: (interactionToken: string, messageId: bigint) => Promise<Message>;
                    getOriginalInteractionResponse: (token: string) => Promise<Message>;
                    sendInteractionResponse: (id: bigint, token: string, options: import("../mod.js").InteractionResponse) => Promise<Message | undefined>;
                    verifySignature: () => {
                        isValid: boolean;
                        body: string;
                    };
                    createInvite: (channelId: bigint, options?: import("../mod.js").CreateChannelInvite | undefined) => Promise<{
                        code: string;
                        guildId: bigint | undefined;
                        channelId: bigint | undefined;
                        inviter: User | undefined;
                        targetType: import("../types/shared.js").TargetTypes | undefined;
                        targetUser: User | undefined;
                        targetApplicationId: bigint | undefined;
                        approximatePresenceCount: number | undefined;
                        approximateMemberCount: number | undefined;
                        expiresAt: number | undefined;
                    }>;
                    deleteInvite: (inviteCode: string) => Promise<void>;
                    getChannelInvites: (channelId: bigint) => Promise<Collection<string, {
                        uses: number;
                        maxUses: number;
                        maxAge: number;
                        temporary: boolean;
                        createdAt: number;
                    }>>;
                    getInvite: (inviteCode: string, options?: import("../mod.js").GetInvite | undefined) => Promise<{
                        code: string;
                        guildId: bigint | undefined;
                        channelId: bigint | undefined;
                        inviter: User | undefined;
                        targetType: import("../types/shared.js").TargetTypes | undefined;
                        targetUser: User | undefined;
                        targetApplicationId: bigint | undefined;
                        approximatePresenceCount: number | undefined;
                        approximateMemberCount: number | undefined;
                        expiresAt: number | undefined;
                    }>;
                    getInvites: (guildId: bigint) => Promise<Collection<string, {
                        uses: number;
                        maxUses: number;
                        maxAge: number;
                        temporary: boolean;
                        createdAt: number;
                    }>>;
                    avatarURL: (userId: bigint, discriminator: string, options?: {
                        avatar: bigint | undefined;
                        size?: import("../mod.js").ImageSize | undefined;
                        format?: import("../mod.js").ImageFormat | undefined;
                    } | undefined) => string;
                    banMember: (guildId: bigint, id: bigint, options?: import("../mod.js").CreateGuildBan | undefined) => Promise<void>;
                    editBotNickname: (guildId: bigint, options: {
                        nick: string | null;
                        reason?: string | undefined;
                    }) => Promise<string | undefined>;
                    editMember: (guildId: bigint, memberId: bigint, options: import("../mod.js").ModifyGuildMember) => Promise<Member>;
                    fetchMembers: (guildId: bigint, options?: Omit<import("../mod.js").RequestGuildMembers, "guildId"> | undefined) => Promise<void>;
                    getDmChannel: (userId: bigint) => Promise<import("./channel.js").Channel | undefined>;
                    getMember: (guildId: bigint, id: bigint) => Promise<Member | undefined>;
                    getMembers: (guildId: bigint, options: import("../mod.js").ListGuildMembers) => Promise<Collection<bigint, Member>>;
                    kickMember: (guildId: bigint, memberId: bigint, reason?: string | undefined) => Promise<void>;
                    pruneMembers: (guildId: bigint, options: import("../mod.js").BeginGuildPrune) => Promise<number>;
                    searchMembers: (guildId: bigint, query: string, options?: Omit<import("../mod.js").SearchMembers, "query"> | undefined) => Promise<Collection<bigint, Member>>;
                    unbanMember: (guildId: bigint, id: bigint) => Promise<void>;
                    addReaction: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                    addReactions: (channelId: bigint, messageId: bigint, reactions: string[], ordered?: boolean | undefined) => Promise<void>;
                    deleteMessage: (channelId: bigint, messageId: bigint, reason?: string | undefined, delayMilliseconds?: number | undefined) => Promise<void>;
                    deleteMessages: (channelId: bigint, ids: bigint[], reason?: string | undefined) => Promise<void>;
                    editMessage: (channelId: bigint, messageId: bigint, content: import("../mod.js").EditMessage) => Promise<Message>;
                    getMessage: (channelId: bigint, id: bigint) => Promise<Message | undefined>;
                    getMessages: (channelId: bigint, options?: import("../mod.js").GetMessagesOptions | undefined) => Promise<Collection<bigint, Message>>;
                    isGetMessagesAfter: () => boolean;
                    isGetMessagesBefore: () => boolean;
                    isGetMessagesAround: () => boolean;
                    isGetMessagesLimit: () => boolean;
                    getReactions: (channelId: bigint, messageId: bigint, reaction: string, options?: import("../mod.js").GetReactions | undefined) => Promise<Collection<bigint, User>>;
                    pinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                    publishMessage: (channelId: bigint, messageId: bigint) => Promise<Message>;
                    removeAllReactions: (channelId: bigint, messageId: bigint) => Promise<void>;
                    removeReaction: (channelId: bigint, messageId: bigint, reaction: string, options?: {
                        userId?: bigint | undefined;
                    } | undefined) => Promise<void>;
                    removeReactionEmoji: (channelId: bigint, messageId: bigint, reaction: string) => Promise<void>;
                    sendMessage: (channelId: bigint, content: import("../mod.js").CreateMessage) => Promise<Message>;
                    unpinMessage: (channelId: bigint, messageId: bigint) => Promise<void>;
                    editBotProfile: (options: {
                        username?: string | undefined;
                        botAvatarURL?: string | null | undefined;
                    }) => Promise<User>;
                    editBotStatus: (data: import("../mod.js").StatusUpdate) => Promise<void>;
                    editShardStatus: (shardId: number, data: import("../mod.js").StatusUpdate) => void;
                    getGatewayBot: () => Promise<import("./gatewayBot.js").GetGatewayBot>;
                    getUser: (userId: bigint) => Promise<User | undefined>;
                    nitroStickerPacks: () => Promise<import("./sticker.js").StickerPack[]>;
                    getApplicationInfo: () => Promise<import("./application.js").Application>;
                    addRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                    createRole: (guildId: bigint, options: import("../mod.js").CreateGuildRole, reason?: string | undefined) => Promise<Role>;
                    deleteRole: (guildId: bigint, id: bigint) => Promise<void>;
                    editRole: (guildId: bigint, id: bigint, options: import("../mod.js").EditGuildRole) => Promise<Role>;
                    getRoles: (guildId: bigint) => Promise<Collection<bigint, Role>>;
                    modifyRolePositions: (guildId: bigint, options: import("../mod.js").ModifyRolePositions[]) => Promise<Collection<bigint, Role>>;
                    removeRole: (guildId: bigint, memberId: bigint, roleId: bigint, reason?: string | undefined) => Promise<void>;
                    createGuildFromTemplate: (templateCode: string, data: import("../mod.js").CreateGuildFromTemplate) => Promise<import("./guild.js").Guild>;
                    createGuildTemplate: (guildId: bigint, data: import("../mod.js").CreateTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                    deleteGuildTemplate: (guildId: bigint, templateCode: string) => Promise<void>;
                    editGuildTemplate: (guildId: bigint, templateCode: string, data: import("../mod.js").ModifyGuildTemplate) => Promise<import("../types/discord.js").DiscordTemplate>;
                    getGuildTemplates: (guildId: bigint) => Promise<Collection<string, import("./template.js").Template>>;
                    getTemplate: (templateCode: string) => Promise<import("./template.js").Template>;
                    syncGuildTemplate: (guildId: bigint, templateCode: string) => Promise<import("../types/discord.js").DiscordTemplate>;
                    connectToVoiceChannel: (guildId: bigint, channelId: bigint, options?: import("../types/shared.js").AtLeastOne<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, {
                        selfDeaf: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfDeaf">;
                        selfMute: Pick<Omit<import("../mod.js").UpdateVoiceState, "guildId" | "channelId">, "selfMute">;
                    }> | undefined) => Promise<void>;
                    createWebhook: (channelId: bigint, options: import("../mod.js").CreateWebhook) => Promise<import("./webhook.js").Webhook>;
                    deleteWebhook: (webhookId: bigint, reason?: string | undefined) => Promise<void>;
                    deleteWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").DeleteWebhookMessageOptions | undefined) => Promise<void>;
                    deleteWebhookWithToken: (webhookId: bigint, webhookToken: string) => Promise<void>;
                    editWebhook: (webhookId: bigint, options: import("../mod.js").ModifyWebhook) => Promise<import("./webhook.js").Webhook>;
                    editWebhookMessage: (webhookId: bigint, webhookToken: string, options: import("../mod.js").EditWebhookMessage & {
                        messageId?: bigint | undefined;
                        threadId?: bigint | undefined;
                    }) => Promise<Message>;
                    editWebhookWithToken: (webhookId: bigint, webhookToken: string, options: Omit<import("../mod.js").ModifyWebhook, "channelId">) => Promise<import("./webhook.js").Webhook>;
                    getWebhook: (webhookId: bigint) => Promise<import("./webhook.js").Webhook | undefined>;
                    getWebhookMessage: (webhookId: bigint, webhookToken: string, messageId: bigint, options?: import("../mod.js").GetWebhookMessageOptions | undefined) => Promise<Message>;
                    getWebhooks: (guildId: bigint) => Promise<Collection<bigint, import("./webhook.js").Webhook>>;
                    getWebhookWithToken: (webhookId: bigint, token: string) => Promise<import("./webhook.js").Webhook>;
                    sendWebhook: (webhookId: bigint, webhookToken: string, options: import("../mod.js").ExecuteWebhook) => Promise<Message | undefined>;
                };
                rest: {
                    version: number;
                    token: string;
                    debug: (text: string) => unknown;
                    customUrl: string;
                    maxRetryCount: number;
                    secretKey: string;
                    checkRateLimits: typeof import("../mod.js").checkRateLimits;
                    cleanupQueues: typeof import("../mod.js").cleanupQueues;
                    processQueue: typeof import("../mod.js").processQueue;
                    processRateLimitedPaths: typeof import("../mod.js").processRateLimitedPaths;
                    processRequestHeaders: typeof import("../mod.js").processRequestHeaders;
                    processRequest: typeof import("../mod.js").processRequest;
                    createRequestBody: typeof import("../mod.js").createRequestBody;
                    runMethod: typeof import("../mod.js").runMethod;
                    simplifyUrl: typeof import("../mod.js").simplifyUrl;
                    processGlobalQueue: typeof import("../mod.js").processGlobalQueue;
                    convertRestError: typeof import("../mod.js").convertRestError;
                    sendRequest: typeof import("../mod.js").sendRequest;
                    invalidRequests: number;
                    maxInvalidRequests: number;
                    invalidRequestsInterval: number;
                    invalidRequestsTimeoutId: number;
                    invalidRequestsSafetyAmount: number;
                    invalidRequestFrozenAt: number;
                    invalidRequestErrorStatuses: number[];
                    pathQueues: Map<string, {
                        isWaiting: boolean;
                        requests: {
                            request: import("../mod.js").RestRequest;
                            payload: import("../mod.js").RestPayload;
                        }[];
                    }>;
                    processingQueue: boolean;
                    processingRateLimitedPaths: boolean;
                    globallyRateLimited: boolean;
                    globalQueue: {
                        request: import("../mod.js").RestRequest;
                        payload: import("../mod.js").RestPayload;
                        basicURL: string;
                        urlToUse: string;
                    }[];
                    globalQueueProcessing: boolean;
                    rateLimitedPaths: Map<string, import("../mod.js").RestRateLimitedPath>;
                };
                gateway: {
                    stop: (code: number, reason: string) => Promise<void>;
                    gatewayBot: {
                        url: string;
                        shards: number;
                        sessionStartLimit: {
                            total: number;
                            remaining: number;
                            resetAfter: number;
                            maxConcurrency: number;
                        };
                    };
                    spawnShardDelay: number;
                    shardsPerWorker: number;
                    totalWorkers: number;
                    firstShardId: number;
                    lastShardId: number;
                    buckets: Collection<number, {
                        workers: {
                            id: number;
                            queue: number[];
                        }[];
                        leak: import("../util/bucket.js").LeakyBucket;
                    }>;
                    prepareBuckets: () => void;
                    spawnShards: () => void;
                    tellWorkerToIdentify: (workerId: number, shardId: number, bucketId: number) => Promise<void>;
                    debug: (text: import("../mod.js").GatewayDebugEvents, ...args: any[]) => unknown;
                    calculateTotalShards: () => number;
                    calculateWorkerId: (shardId: number) => number;
                    manager: {
                        shards: Collection<number, {
                            gatewayConfig: import("../mod.js").ShardGatewayConfig;
                            heart: import("../mod.js").ShardHeart;
                            id: number;
                            maxRequestsPerRateLimitTick: number;
                            previousSequenceNumber: number | null;
                            rateLimitResetInterval: number;
                            sessionId: string | undefined;
                            socket: import("ws") | undefined;
                            state: import("../mod.js").ShardState;
                            totalShards: number;
                            events: import("../mod.js").ShardEvents;
                            calculateSafeRequests: () => number;
                            close: (code: number, reason: string) => void;
                            connect: () => Promise<void>;
                            identify: () => Promise<void>;
                            isOpen: () => boolean;
                            makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                            resume: () => Promise<void>;
                            send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                            shutdown: () => Promise<void>;
                            bucket: import("../util/bucket.js").LeakyBucket;
                            handleClose: (close: CloseEvent) => Promise<void>;
                            handleMessage: (message: MessageEvent<any>) => Promise<void>;
                            requestIdentify: () => Promise<void>;
                            offlineSendQueue: ((_?: unknown) => void)[];
                            resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                            startHeartbeating: (interval: number) => void;
                            stopHeartbeating: () => void;
                        }>;
                        gatewayConfig: {
                            url?: string | undefined;
                            version?: number | undefined;
                            compress?: boolean | undefined;
                            intents?: number | undefined;
                            properties?: {
                                browser: string;
                                os: string;
                                device: string;
                            } | undefined;
                            token: string;
                        };
                        totalShards: number;
                        createShardOptions: {
                            state?: import("../mod.js").ShardState | undefined;
                            close?: {} | undefined;
                            resume?: {} | undefined;
                            connect?: {} | undefined;
                            calculateSafeRequests?: {} | undefined;
                            handleClose?: {} | undefined;
                            handleMessage?: {} | undefined;
                            identify?: {} | undefined;
                            isOpen?: {} | undefined;
                            makePresence?: {} | undefined;
                            maxRequestsPerRateLimitTick?: number | undefined;
                            previousSequenceNumber?: number | undefined;
                            rateLimitResetInterval?: number | undefined;
                            send?: {} | undefined;
                            shutdown?: {} | undefined;
                            startHeartbeating?: {} | undefined;
                            stopHeartbeating?: {} | undefined;
                            heart?: {
                                intervalId?: number | undefined;
                                lastAck?: number | undefined;
                                lastBeat?: number | undefined;
                                rtt?: number | undefined;
                                timeoutId?: number | undefined;
                                interval: number;
                                acknowledged: boolean;
                            } | undefined;
                            bucket?: {
                                max: number;
                                waiting: ((_?: unknown) => void)[];
                                refillInterval: number;
                                refillAmount: number;
                                tokens: () => number;
                                acquire: (amount: number, highPriority?: boolean | undefined) => Promise<void>;
                                nextRefill: () => number;
                                lastRefill: number;
                                allowAcquire: boolean;
                                tokensState: number;
                            } | undefined;
                            offlineSendQueue?: {
                                d?: unknown;
                                op: import("../types/shared.js").GatewayOpcodes;
                            }[] | undefined;
                            resolves?: {
                                [Symbol.toStringTag]: string;
                                [Symbol.iterator]: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                forEach: (callbackfn: (value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void, key: "READY" | "RESUMED" | "INVALID_SESSION", map: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>) => void, thisArg?: any) => void;
                                entries: () => IterableIterator<["READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void]>;
                                keys: () => IterableIterator<"READY" | "RESUMED" | "INVALID_SESSION">;
                                values: () => IterableIterator<(payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                set: (key: "READY" | "RESUMED" | "INVALID_SESSION", value: (payload: import("../types/discord.js").DiscordGatewayPayload) => void) => Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                clear: () => void;
                                size: number;
                                get: (key: "READY" | "RESUMED" | "INVALID_SESSION") => ((payload: import("../types/discord.js").DiscordGatewayPayload) => void) | undefined;
                                delete: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                                has: (key: "READY" | "RESUMED" | "INVALID_SESSION") => boolean;
                            } | undefined;
                            events: {
                                connected?: {} | undefined;
                                connecting?: {} | undefined;
                                disconnected?: {} | undefined;
                                heartbeat?: {} | undefined;
                                heartbeatAck?: {} | undefined;
                                hello?: {} | undefined;
                                invalidSession?: {} | undefined;
                                resuming?: {} | undefined;
                                resumed?: {} | undefined;
                                requestedReconnect?: {} | undefined;
                                identifying?: {} | undefined;
                                identified?: {} | undefined;
                                message: (shard: {
                                    gatewayConfig: import("../mod.js").ShardGatewayConfig;
                                    heart: import("../mod.js").ShardHeart;
                                    id: number;
                                    maxRequestsPerRateLimitTick: number;
                                    previousSequenceNumber: number | null;
                                    rateLimitResetInterval: number;
                                    sessionId: string | undefined;
                                    socket: import("ws") | undefined;
                                    state: import("../mod.js").ShardState;
                                    totalShards: number;
                                    events: import("../mod.js").ShardEvents;
                                    calculateSafeRequests: () => number;
                                    close: (code: number, reason: string) => void;
                                    connect: () => Promise<void>;
                                    identify: () => Promise<void>;
                                    isOpen: () => boolean;
                                    makePresence: ((shardId: number) => import("../mod.js").StatusUpdate | Promise<import("../mod.js").StatusUpdate>) | undefined;
                                    resume: () => Promise<void>;
                                    send: (message: import("../mod.js").ShardSocketRequest, highPriority?: boolean) => Promise<void>;
                                    shutdown: () => Promise<void>;
                                    bucket: import("../util/bucket.js").LeakyBucket;
                                    handleClose: (close: CloseEvent) => Promise<void>;
                                    handleMessage: (message: MessageEvent<any>) => Promise<void>;
                                    requestIdentify: () => Promise<void>;
                                    offlineSendQueue: ((_?: unknown) => void)[];
                                    resolves: Map<"READY" | "RESUMED" | "INVALID_SESSION", (payload: import("../types/discord.js").DiscordGatewayPayload) => void>;
                                    startHeartbeating: (interval: number) => void;
                                    stopHeartbeating: () => void;
                                }, payload: import("../types/discord.js").DiscordGatewayPayload) => unknown;
                            };
                        };
                        requestIdentify: (shardId: number) => Promise<void>;
                        identify: (shardId: number) => Promise<void>;
                        kill: (shardId: number) => Promise<void>;
                    };
                };
                handlers: {
                    READY: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_PINS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    CHANNEL_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_BAN_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_BAN_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_EMOJIS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_INTEGRATIONS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_MEMBERS_CHUNK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_ROLE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_ROLE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_ROLE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_USER_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_SCHEDULED_EVENT_USER_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTERACTION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INVITE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INVITE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_DELETE_BULK: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_ADD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_REMOVE_ALL: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_REMOVE_EMOJI: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_REACTION_REMOVE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    MESSAGE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    PRESENCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    TYPING_START: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    USER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    VOICE_SERVER_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    VOICE_STATE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    WEBHOOKS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTEGRATION_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTEGRATION_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    INTEGRATION_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    STAGE_INSTANCE_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    STAGE_INSTANCE_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    STAGE_INSTANCE_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_CREATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_DELETE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_LIST_SYNC: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    THREAD_MEMBERS_UPDATE: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                    GUILD_LOADED_DD: (bot: Bot, data: import("../types/discord.js").DiscordGatewayPayload, shardId: number) => any;
                };
                activeGuildIds: Set<bigint>;
                cache: {
                    unrepliedInteractions: Set<bigint>;
                    fetchAllMembersProcessingRequests: Map<string, Function>;
                };
                enabledPlugins: Set<string>;
            } | undefined;
            intervalId?: number | undefined;
            filter: (value: User, key: bigint, ...args: any[]) => boolean;
            interval: number;
        } | undefined;
        [Symbol.toStringTag]: string;
        [Symbol.iterator]: () => IterableIterator<[bigint, User]>;
        every: (callback: (value: User, key: bigint) => boolean) => boolean;
        some: (callback: (value: User, key: bigint) => boolean) => boolean;
        forEach: (callbackfn: (value: User, key: bigint, map: Map<bigint, User>) => void, thisArg?: any) => void;
        map: <T_10>(callback: (value: User, key: bigint) => T_10) => T_10[];
        filter: (callback: (value: User, key: bigint) => boolean) => Collection<bigint, User>;
        reduce: <T_11>(callback: (accumulator: T_11, value: User, key: bigint) => T_11, initialValue?: T_11 | undefined) => T_11;
        find: (callback: (value: User, key: bigint) => boolean) => User | undefined;
        entries: () => IterableIterator<[bigint, User]>;
        keys: () => IterableIterator<bigint>;
        values: () => IterableIterator<User>;
        set: (key: bigint, value: User) => Collection<bigint, User>;
        clear: () => void;
        size: number;
        get: (key: bigint) => User | undefined;
        startSweeper: (options: import("../util/collection.js").CollectionSweeper<bigint, User>) => number;
        stopSweeper: () => void;
        changeSweeperInterval: (newInterval: number) => void;
        changeSweeperFilter: (newFilter: (value: User, key: bigint, bot: Bot) => boolean) => void;
        forceSet: (key: bigint, value: User) => Collection<bigint, User>;
        array: () => User[];
        first: () => User | undefined;
        last: () => User | undefined;
        random: () => User | undefined;
        delete: (key: bigint) => boolean;
        has: (key: bigint) => boolean;
    } | undefined;
};
export interface Interaction extends ReturnType<typeof transformInteraction> {
}
export interface InteractionDataResolved extends ReturnType<typeof transformInteractionDataResolved> {
}
export interface InteractionDataOption extends ReturnType<typeof transformInteractionDataOption> {
}
